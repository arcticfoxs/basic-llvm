//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../BASIC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class BASICParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, WS=37, SPACE=38, EXCLAMATIONMARK=39, 
		QUOTATIONMARK=40, NUMBERSIGN=41, DOLLARSIGN=42, PERCENTSIGN=43, AMPERSAND=44, 
		APOSTROPHE=45, LEFTPARENTHESIS=46, RIGHTPARENTHESIS=47, ASTERISK=48, PLUSSIGN=49, 
		COMMA=50, MINUSSIGN=51, FULLSTOP=52, SOLIDUS=53, COLON=54, SEMICOLON=55, 
		LESSTHANSIGN=56, EQUALSSIGN=57, GREATERTHANSIGN=58, QUESTIONMARK=59, CIRCUMFLEXACCENT=60, 
		UNDERLINE=61, LETTERE=62, DIGIT=63, LETTER=64;
	public const int
		RULE_line = 0, RULE_linenumber = 1, RULE_endline = 2, RULE_endstatement = 3, 
		RULE_statement = 4, RULE_sign = 5, RULE_numericrep = 6, RULE_significand = 7, 
		RULE_integer = 8, RULE_fraction = 9, RULE_exrad = 10, RULE_stringconstant = 11, 
		RULE_variable = 12, RULE_numericvariable = 13, RULE_simplenumericvariable = 14, 
		RULE_numericarrayelement = 15, RULE_numericarrayname = 16, RULE_subscript = 17, 
		RULE_stringvariable = 18, RULE_expression = 19, RULE_numericexpression = 20, 
		RULE_term = 21, RULE_factor = 22, RULE_multiplier = 23, RULE_primary = 24, 
		RULE_numericfunctionref = 25, RULE_numericfunctionname = 26, RULE_argumentlist = 27, 
		RULE_argument = 28, RULE_stringexpression = 29, RULE_numericsuppliedfunction = 30, 
		RULE_defstatement = 31, RULE_numericdefinedfunction = 32, RULE_parameterlist = 33, 
		RULE_parameter = 34, RULE_letstatement = 35, RULE_numericletstatement = 36, 
		RULE_stringletstatement = 37, RULE_gotostatement = 38, RULE_ifthenstatement = 39, 
		RULE_relationalexpression = 40, RULE_relation = 41, RULE_equalityrelation = 42, 
		RULE_notless = 43, RULE_notgreater = 44, RULE_notequals = 45, RULE_gosubstatement = 46, 
		RULE_returnstatement = 47, RULE_ongotostatement = 48, RULE_stopstatement = 49, 
		RULE_forstatement = 50, RULE_controlvariable = 51, RULE_initialvalue = 52, 
		RULE_limit = 53, RULE_increment = 54, RULE_nextstatement = 55, RULE_printstatement = 56, 
		RULE_printlist = 57, RULE_printitem = 58, RULE_tabcall = 59, RULE_printseparator = 60, 
		RULE_inputstatement = 61, RULE_variablelist = 62, RULE_inputprompt = 63, 
		RULE_inputreply = 64, RULE_inputlist = 65, RULE_paddeddatum = 66, RULE_datum = 67, 
		RULE_readstatement = 68, RULE_restorestatement = 69, RULE_datastatement = 70, 
		RULE_datalist = 71, RULE_dimensionstatement = 72, RULE_arraydeclaration = 73, 
		RULE_bounds = 74, RULE_remarkstatement = 75, RULE_randomizestatement = 76, 
		RULE_stringcharacter = 77, RULE_quotedstringcharacter = 78, RULE_unquotedstringcharacter = 79, 
		RULE_plainstringcharacter = 80, RULE_remarkstring = 81, RULE_quotedstring = 82, 
		RULE_unquotedstring = 83;
	public static readonly string[] ruleNames = {
		"line", "linenumber", "endline", "endstatement", "statement", "sign", 
		"numericrep", "significand", "integer", "fraction", "exrad", "stringconstant", 
		"variable", "numericvariable", "simplenumericvariable", "numericarrayelement", 
		"numericarrayname", "subscript", "stringvariable", "expression", "numericexpression", 
		"term", "factor", "multiplier", "primary", "numericfunctionref", "numericfunctionname", 
		"argumentlist", "argument", "stringexpression", "numericsuppliedfunction", 
		"defstatement", "numericdefinedfunction", "parameterlist", "parameter", 
		"letstatement", "numericletstatement", "stringletstatement", "gotostatement", 
		"ifthenstatement", "relationalexpression", "relation", "equalityrelation", 
		"notless", "notgreater", "notequals", "gosubstatement", "returnstatement", 
		"ongotostatement", "stopstatement", "forstatement", "controlvariable", 
		"initialvalue", "limit", "increment", "nextstatement", "printstatement", 
		"printlist", "printitem", "tabcall", "printseparator", "inputstatement", 
		"variablelist", "inputprompt", "inputreply", "inputlist", "paddeddatum", 
		"datum", "readstatement", "restorestatement", "datastatement", "datalist", 
		"dimensionstatement", "arraydeclaration", "bounds", "remarkstatement", 
		"randomizestatement", "stringcharacter", "quotedstringcharacter", "unquotedstringcharacter", 
		"plainstringcharacter", "remarkstring", "quotedstring", "unquotedstring"
	};

	private static readonly string[] _LiteralNames = {
		null, "'END'", "'ABS'", "'ATN'", "'COS'", "'EXP'", "'INT'", "'LOG'", "'RND'", 
		"'SGN'", "'SIN'", "'SQR'", "'TAN'", "'DEF'", "'FN'", "'LET'", "'GO'", 
		"'TO'", "'IF'", "'THEN'", "'SUB'", "'RETURN'", "'ON'", "'STOP'", "'FOR'", 
		"'STEP'", "'NEXT'", "'PRINT'", "'TAB'", "'INPUT'", "'INPUT?'", "'READ'", 
		"'restore'", "'DATA'", "'DIM'", "'REM'", "'RANDOMIZE'", null, "' '", "'!'", 
		"'\"'", "'#'", "'$'", "'%'", "'&'", "'''", "'('", "')'", "'*'", "'+'", 
		"','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", "'='", "'>'", "'?'", 
		"'^'", "'_'", "'E'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "SPACE", "EXCLAMATIONMARK", "QUOTATIONMARK", "NUMBERSIGN", 
		"DOLLARSIGN", "PERCENTSIGN", "AMPERSAND", "APOSTROPHE", "LEFTPARENTHESIS", 
		"RIGHTPARENTHESIS", "ASTERISK", "PLUSSIGN", "COMMA", "MINUSSIGN", "FULLSTOP", 
		"SOLIDUS", "COLON", "SEMICOLON", "LESSTHANSIGN", "EQUALSSIGN", "GREATERTHANSIGN", 
		"QUESTIONMARK", "CIRCUMFLEXACCENT", "UNDERLINE", "LETTERE", "DIGIT", "LETTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BASIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BASICParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndlineContext endline() {
			return GetRuleContext<EndlineContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		int _la;
		try {
			State = 173;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 168; linenumber();
					}
				}

				State = 171; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; endline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 2, RULE_linenumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndlineContext : ParserRuleContext {
		public EndstatementContext endstatement() {
			return GetRuleContext<EndstatementContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndline(this);
		}
	}

	[RuleVersion(0)]
	public EndlineContext endline() {
		EndlineContext _localctx = new EndlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_endline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 177; linenumber();
				}
			}

			State = 180; endstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstatementContext : ParserRuleContext {
		public EndstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndstatement(this);
		}
	}

	[RuleVersion(0)]
	public EndstatementContext endstatement() {
		EndstatementContext _localctx = new EndstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_endstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DatastatementContext datastatement() {
			return GetRuleContext<DatastatementContext>(0);
		}
		public DefstatementContext defstatement() {
			return GetRuleContext<DefstatementContext>(0);
		}
		public DimensionstatementContext dimensionstatement() {
			return GetRuleContext<DimensionstatementContext>(0);
		}
		public GosubstatementContext gosubstatement() {
			return GetRuleContext<GosubstatementContext>(0);
		}
		public GotostatementContext gotostatement() {
			return GetRuleContext<GotostatementContext>(0);
		}
		public IfthenstatementContext ifthenstatement() {
			return GetRuleContext<IfthenstatementContext>(0);
		}
		public InputstatementContext inputstatement() {
			return GetRuleContext<InputstatementContext>(0);
		}
		public LetstatementContext letstatement() {
			return GetRuleContext<LetstatementContext>(0);
		}
		public OngotostatementContext ongotostatement() {
			return GetRuleContext<OngotostatementContext>(0);
		}
		public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		public RandomizestatementContext randomizestatement() {
			return GetRuleContext<RandomizestatementContext>(0);
		}
		public ReadstatementContext readstatement() {
			return GetRuleContext<ReadstatementContext>(0);
		}
		public RemarkstatementContext remarkstatement() {
			return GetRuleContext<RemarkstatementContext>(0);
		}
		public RestorestatementContext restorestatement() {
			return GetRuleContext<RestorestatementContext>(0);
		}
		public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		public StopstatementContext stopstatement() {
			return GetRuleContext<StopstatementContext>(0);
		}
		public ForstatementContext forstatement() {
			return GetRuleContext<ForstatementContext>(0);
		}
		public NextstatementContext nextstatement() {
			return GetRuleContext<NextstatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 202;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; datastatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; defstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; dimensionstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187; gosubstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 188; gotostatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 189; ifthenstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 190; inputstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 191; letstatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 192; ongotostatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 193; printstatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 194; randomizestatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 195; readstatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 196; remarkstatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 197; restorestatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 198; returnstatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 199; stopstatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 200; forstatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 201; nextstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 10, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.La(1);
			if ( !(_la==PLUSSIGN || _la==MINUSSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericrepContext : ParserRuleContext {
		public SignificandContext significand() {
			return GetRuleContext<SignificandContext>(0);
		}
		public ExradContext exrad() {
			return GetRuleContext<ExradContext>(0);
		}
		public NumericrepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericrep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericrep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericrep(this);
		}
	}

	[RuleVersion(0)]
	public NumericrepContext numericrep() {
		NumericrepContext _localctx = new NumericrepContext(Context, State);
		EnterRule(_localctx, 12, RULE_numericrep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; significand();
			State = 208;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 207; exrad();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignificandContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		public SignificandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_significand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSignificand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSignificand(this);
		}
	}

	[RuleVersion(0)]
	public SignificandContext significand() {
		SignificandContext _localctx = new SignificandContext(Context, State);
		EnterRule(_localctx, 14, RULE_significand);
		int _la;
		try {
			State = 218;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; integer();
				State = 212;
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 211; Match(FULLSTOP);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 214; integer();
					}
				}

				State = 217; fraction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_integer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(DIGIT);
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 221; Match(DIGIT);
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFraction(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(Context, State);
		EnterRule(_localctx, 18, RULE_fraction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(FULLSTOP);
			State = 228; Match(DIGIT);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 229; Match(DIGIT);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExradContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ExradContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exrad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExrad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExrad(this);
		}
	}

	[RuleVersion(0)]
	public ExradContext exrad() {
		ExradContext _localctx = new ExradContext(Context, State);
		EnterRule(_localctx, 20, RULE_exrad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(LETTERE);
			State = 237;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 236; sign();
				}
			}

			State = 239; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringconstantContext : ParserRuleContext {
		public QuotedstringContext quotedstring() {
			return GetRuleContext<QuotedstringContext>(0);
		}
		public StringconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringconstant(this);
		}
	}

	[RuleVersion(0)]
	public StringconstantContext stringconstant() {
		StringconstantContext _localctx = new StringconstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_stringconstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; quotedstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable);
		try {
			State = 245;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; numericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; stringvariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public NumericarrayelementContext numericarrayelement() {
			return GetRuleContext<NumericarrayelementContext>(0);
		}
		public NumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public NumericvariableContext numericvariable() {
		NumericvariableContext _localctx = new NumericvariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_numericvariable);
		try {
			State = 249;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; simplenumericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; numericarrayelement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplenumericvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public SimplenumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplenumericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSimplenumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSimplenumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public SimplenumericvariableContext simplenumericvariable() {
		SimplenumericvariableContext _localctx = new SimplenumericvariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_simplenumericvariable);
		try {
			State = 259;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; Match(LETTER);
				State = 253;
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 252; Match(DIGIT);
					}
					break;
				}
				}
				break;
			case LETTERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255; Match(LETTERE);
				State = 257;
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 256; Match(DIGIT);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarrayelementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public NumericarrayelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayelement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayelement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayelement(this);
		}
	}

	[RuleVersion(0)]
	public NumericarrayelementContext numericarrayelement() {
		NumericarrayelementContext _localctx = new NumericarrayelementContext(Context, State);
		EnterRule(_localctx, 30, RULE_numericarrayelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; numericarrayname();
			State = 262; subscript();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarraynameContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericarraynameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayname(this);
		}
	}

	[RuleVersion(0)]
	public NumericarraynameContext numericarrayname() {
		NumericarraynameContext _localctx = new NumericarraynameContext(Context, State);
		EnterRule(_localctx, 32, RULE_numericarrayname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = TokenStream.La(1);
			if ( !(_la==LETTERE || _la==LETTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 34, RULE_subscript);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(LEFTPARENTHESIS);
			State = 267; numericexpression();
			State = 270;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 268; Match(COMMA);
				State = 269; numericexpression();
				}
			}

			State = 272; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringvariableContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public StringvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringvariable(this);
		}
	}

	[RuleVersion(0)]
	public StringvariableContext stringvariable() {
		StringvariableContext _localctx = new StringvariableContext(Context, State);
		EnterRule(_localctx, 36, RULE_stringvariable);
		try {
			State = 278;
			switch (TokenStream.La(1)) {
			case LETTERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; Match(LETTERE);
				State = 275; Match(DOLLARSIGN);
				}
				break;
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; Match(LETTER);
				State = 277; Match(DOLLARSIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			State = 282;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericexpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public SignContext[] sign() {
			return GetRuleContexts<SignContext>();
		}
		public SignContext sign(int i) {
			return GetRuleContext<SignContext>(i);
		}
		public NumericexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericexpression(this);
		}
	}

	[RuleVersion(0)]
	public NumericexpressionContext numericexpression() {
		NumericexpressionContext _localctx = new NumericexpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_numericexpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 284; sign();
				}
			}

			State = 287; term();
			State = 293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; sign();
					State = 289; term();
					}
					} 
				}
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MultiplierContext[] multiplier() {
			return GetRuleContexts<MultiplierContext>();
		}
		public MultiplierContext multiplier(int i) {
			return GetRuleContext<MultiplierContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 42, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; factor();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ASTERISK || _la==SOLIDUS) {
				{
				{
				State = 297; multiplier();
				State = 298; factor();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		public ITerminalNode[] CIRCUMFLEXACCENT() { return GetTokens(BASICParser.CIRCUMFLEXACCENT); }
		public ITerminalNode CIRCUMFLEXACCENT(int i) {
			return GetToken(BASICParser.CIRCUMFLEXACCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 44, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; primary();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CIRCUMFLEXACCENT) {
				{
				{
				State = 306; Match(CIRCUMFLEXACCENT);
				State = 307; primary();
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplierContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public MultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterMultiplier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitMultiplier(this);
		}
	}

	[RuleVersion(0)]
	public MultiplierContext multiplier() {
		MultiplierContext _localctx = new MultiplierContext(Context, State);
		EnterRule(_localctx, 46, RULE_multiplier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_la = TokenStream.La(1);
			if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public NumericfunctionrefContext numericfunctionref() {
			return GetRuleContext<NumericfunctionrefContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_primary);
		try {
			State = 322;
			switch (TokenStream.La(1)) {
			case LETTERE:
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; numericvariable();
				}
				break;
			case FULLSTOP:
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; numericrep();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; numericfunctionref();
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 318; Match(LEFTPARENTHESIS);
				State = 319; numericexpression();
				State = 320; Match(RIGHTPARENTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionrefContext : ParserRuleContext {
		public NumericfunctionnameContext numericfunctionname() {
			return GetRuleContext<NumericfunctionnameContext>(0);
		}
		public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public NumericfunctionrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionref(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionrefContext numericfunctionref() {
		NumericfunctionrefContext _localctx = new NumericfunctionrefContext(Context, State);
		EnterRule(_localctx, 50, RULE_numericfunctionref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; numericfunctionname();
			State = 326;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 325; argumentlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionnameContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public NumericsuppliedfunctionContext numericsuppliedfunction() {
			return GetRuleContext<NumericsuppliedfunctionContext>(0);
		}
		public NumericfunctionnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionname(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionnameContext numericfunctionname() {
		NumericfunctionnameContext _localctx = new NumericfunctionnameContext(Context, State);
		EnterRule(_localctx, 52, RULE_numericfunctionname);
		try {
			State = 330;
			switch (TokenStream.La(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; numericdefinedfunction();
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; numericsuppliedfunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArgumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgumentlist(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentlistContext argumentlist() {
		ArgumentlistContext _localctx = new ArgumentlistContext(Context, State);
		EnterRule(_localctx, 54, RULE_argumentlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(LEFTPARENTHESIS);
			State = 333; argument();
			State = 334; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 56, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringexpressionContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		public StringexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringexpression(this);
		}
	}

	[RuleVersion(0)]
	public StringexpressionContext stringexpression() {
		StringexpressionContext _localctx = new StringexpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_stringexpression);
		try {
			State = 340;
			switch (TokenStream.La(1)) {
			case LETTERE:
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; stringvariable();
				}
				break;
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; stringconstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericsuppliedfunctionContext : ParserRuleContext {
		public NumericsuppliedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericsuppliedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericsuppliedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericsuppliedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericsuppliedfunctionContext numericsuppliedfunction() {
		NumericsuppliedfunctionContext _localctx = new NumericsuppliedfunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_numericsuppliedfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstatementContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		public DefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDefstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDefstatement(this);
		}
	}

	[RuleVersion(0)]
	public DefstatementContext defstatement() {
		DefstatementContext _localctx = new DefstatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_defstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__12);
			State = 345; numericdefinedfunction();
			State = 347;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 346; parameterlist();
				}
			}

			State = 349; Match(EQUALSSIGN);
			State = 350; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericdefinedfunctionContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericdefinedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericdefinedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericdefinedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericdefinedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericdefinedfunctionContext numericdefinedfunction() {
		NumericdefinedfunctionContext _localctx = new NumericdefinedfunctionContext(Context, State);
		EnterRule(_localctx, 64, RULE_numericdefinedfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(T__13);
			State = 353; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ParameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameterlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterlistContext parameterlist() {
		ParameterlistContext _localctx = new ParameterlistContext(Context, State);
		EnterRule(_localctx, 66, RULE_parameterlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(LEFTPARENTHESIS);
			State = 356; parameter();
			State = 357; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstatementContext : ParserRuleContext {
		public NumericletstatementContext numericletstatement() {
			return GetRuleContext<NumericletstatementContext>(0);
		}
		public StringletstatementContext stringletstatement() {
			return GetRuleContext<StringletstatementContext>(0);
		}
		public LetstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLetstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLetstatement(this);
		}
	}

	[RuleVersion(0)]
	public LetstatementContext letstatement() {
		LetstatementContext _localctx = new LetstatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_letstatement);
		try {
			State = 363;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; numericletstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; stringletstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericletstatementContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public NumericletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericletstatement(this);
		}
	}

	[RuleVersion(0)]
	public NumericletstatementContext numericletstatement() {
		NumericletstatementContext _localctx = new NumericletstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_numericletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(T__14);
			State = 366; numericvariable();
			State = 367; Match(EQUALSSIGN);
			State = 368; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringletstatementContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public StringletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringletstatement(this);
		}
	}

	[RuleVersion(0)]
	public StringletstatementContext stringletstatement() {
		StringletstatementContext _localctx = new StringletstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_stringletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__14);
			State = 371; stringvariable();
			State = 372; Match(EQUALSSIGN);
			State = 373; stringexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGotostatement(this);
		}
	}

	[RuleVersion(0)]
	public GotostatementContext gotostatement() {
		GotostatementContext _localctx = new GotostatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_gotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(T__15);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 376; Match(SPACE);
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 382; Match(T__16);
			State = 383; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstatementContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public IfthenstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIfthenstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIfthenstatement(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstatementContext ifthenstatement() {
		IfthenstatementContext _localctx = new IfthenstatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_ifthenstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(T__17);
			State = 386; relationalexpression();
			State = 387; Match(T__18);
			State = 388; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public StringexpressionContext[] stringexpression() {
			return GetRuleContexts<StringexpressionContext>();
		}
		public StringexpressionContext stringexpression(int i) {
			return GetRuleContext<StringexpressionContext>(i);
		}
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_relationalexpression);
		try {
			State = 398;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390; numericexpression();
				State = 391; relation();
				State = 392; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; stringexpression();
				State = 395; equalityrelation();
				State = 396; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotlessContext notless() {
			return GetRuleContext<NotlessContext>(0);
		}
		public NotgreaterContext notgreater() {
			return GetRuleContext<NotgreaterContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 82, RULE_relation);
		try {
			State = 405;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400; equalityrelation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401; Match(LESSTHANSIGN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402; Match(GREATERTHANSIGN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403; notless();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404; notgreater();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityrelationContext : ParserRuleContext {
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotequalsContext notequals() {
			return GetRuleContext<NotequalsContext>(0);
		}
		public EqualityrelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityrelation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEqualityrelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEqualityrelation(this);
		}
	}

	[RuleVersion(0)]
	public EqualityrelationContext equalityrelation() {
		EqualityrelationContext _localctx = new EqualityrelationContext(Context, State);
		EnterRule(_localctx, 84, RULE_equalityrelation);
		try {
			State = 409;
			switch (TokenStream.La(1)) {
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407; Match(EQUALSSIGN);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408; notequals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotlessContext : ParserRuleContext {
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notless; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotless(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotless(this);
		}
	}

	[RuleVersion(0)]
	public NotlessContext notless() {
		NotlessContext _localctx = new NotlessContext(Context, State);
		EnterRule(_localctx, 86, RULE_notless);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(GREATERTHANSIGN);
			State = 412; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotgreaterContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotgreaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notgreater; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotgreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotgreater(this);
		}
	}

	[RuleVersion(0)]
	public NotgreaterContext notgreater() {
		NotgreaterContext _localctx = new NotgreaterContext(Context, State);
		EnterRule(_localctx, 88, RULE_notgreater);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(LESSTHANSIGN);
			State = 415; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotequalsContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotequalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notequals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotequals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotequals(this);
		}
	}

	[RuleVersion(0)]
	public NotequalsContext notequals() {
		NotequalsContext _localctx = new NotequalsContext(Context, State);
		EnterRule(_localctx, 90, RULE_notequals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(LESSTHANSIGN);
			State = 418; Match(GREATERTHANSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GosubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGosubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGosubstatement(this);
		}
	}

	[RuleVersion(0)]
	public GosubstatementContext gosubstatement() {
		GosubstatementContext _localctx = new GosubstatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_gosubstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(T__15);
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 421; Match(SPACE);
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 427; Match(T__19);
			State = 428; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostatementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public OngotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterOngotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitOngotostatement(this);
		}
	}

	[RuleVersion(0)]
	public OngotostatementContext ongotostatement() {
		OngotostatementContext _localctx = new OngotostatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_ongotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(T__21);
			State = 433; numericexpression();
			State = 434; Match(T__15);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 435; Match(SPACE);
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 441; Match(T__16);
			State = 442; linenumber();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 443; Match(COMMA);
				State = 444; linenumber();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstatementContext : ParserRuleContext {
		public StopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStopstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStopstatement(this);
		}
	}

	[RuleVersion(0)]
	public StopstatementContext stopstatement() {
		StopstatementContext _localctx = new StopstatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_stopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public InitialvalueContext initialvalue() {
			return GetRuleContext<InitialvalueContext>(0);
		}
		public LimitContext limit() {
			return GetRuleContext<LimitContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public ForstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForstatementContext forstatement() {
		ForstatementContext _localctx = new ForstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_forstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(T__23);
			State = 453; controlvariable();
			State = 454; Match(EQUALSSIGN);
			State = 455; initialvalue();
			State = 456; Match(T__16);
			State = 457; limit();
			State = 460;
			_la = TokenStream.La(1);
			if (_la==T__24) {
				{
				State = 458; Match(T__24);
				State = 459; increment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ControlvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterControlvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitControlvariable(this);
		}
	}

	[RuleVersion(0)]
	public ControlvariableContext controlvariable() {
		ControlvariableContext _localctx = new ControlvariableContext(Context, State);
		EnterRule(_localctx, 102, RULE_controlvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialvalueContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public InitialvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInitialvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInitialvalue(this);
		}
	}

	[RuleVersion(0)]
	public InitialvalueContext initialvalue() {
		InitialvalueContext _localctx = new InitialvalueContext(Context, State);
		EnterRule(_localctx, 104, RULE_initialvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLimit(this);
		}
	}

	[RuleVersion(0)]
	public LimitContext limit() {
		LimitContext _localctx = new LimitContext(Context, State);
		EnterRule(_localctx, 106, RULE_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 108, RULE_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public NextstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextstatement(this);
		}
	}

	[RuleVersion(0)]
	public NextstatementContext nextstatement() {
		NextstatementContext _localctx = new NextstatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_nextstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(T__25);
			State = 471; controlvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		public PrintlistContext printlist() {
			return GetRuleContext<PrintlistContext>(0);
		}
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_printstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(T__26);
			State = 475;
			_la = TokenStream.La(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (T__2 - 2)) | (1L << (T__3 - 2)) | (1L << (T__4 - 2)) | (1L << (T__5 - 2)) | (1L << (T__6 - 2)) | (1L << (T__7 - 2)) | (1L << (T__8 - 2)) | (1L << (T__9 - 2)) | (1L << (T__10 - 2)) | (1L << (T__11 - 2)) | (1L << (T__13 - 2)) | (1L << (T__27 - 2)) | (1L << (QUOTATIONMARK - 2)) | (1L << (LEFTPARENTHESIS - 2)) | (1L << (PLUSSIGN - 2)) | (1L << (COMMA - 2)) | (1L << (MINUSSIGN - 2)) | (1L << (FULLSTOP - 2)) | (1L << (SEMICOLON - 2)) | (1L << (LETTERE - 2)) | (1L << (DIGIT - 2)) | (1L << (LETTER - 2)))) != 0)) {
				{
				State = 474; printlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlistContext : ParserRuleContext {
		public PrintseparatorContext[] printseparator() {
			return GetRuleContexts<PrintseparatorContext>();
		}
		public PrintseparatorContext printseparator(int i) {
			return GetRuleContext<PrintseparatorContext>(i);
		}
		public PrintitemContext[] printitem() {
			return GetRuleContexts<PrintitemContext>();
		}
		public PrintitemContext printitem(int i) {
			return GetRuleContext<PrintitemContext>(i);
		}
		public PrintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintlist(this);
		}
	}

	[RuleVersion(0)]
	public PrintlistContext printlist() {
		PrintlistContext _localctx = new PrintlistContext(Context, State);
		EnterRule(_localctx, 114, RULE_printlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 478;
					_la = TokenStream.La(1);
					if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (T__2 - 2)) | (1L << (T__3 - 2)) | (1L << (T__4 - 2)) | (1L << (T__5 - 2)) | (1L << (T__6 - 2)) | (1L << (T__7 - 2)) | (1L << (T__8 - 2)) | (1L << (T__9 - 2)) | (1L << (T__10 - 2)) | (1L << (T__11 - 2)) | (1L << (T__13 - 2)) | (1L << (T__27 - 2)) | (1L << (QUOTATIONMARK - 2)) | (1L << (LEFTPARENTHESIS - 2)) | (1L << (PLUSSIGN - 2)) | (1L << (MINUSSIGN - 2)) | (1L << (FULLSTOP - 2)) | (1L << (LETTERE - 2)) | (1L << (DIGIT - 2)) | (1L << (LETTER - 2)))) != 0)) {
						{
						State = 477; printitem();
						}
					}

					State = 480; printseparator();
					}
					} 
				}
				State = 485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 486; printitem();
				}
				}
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (T__1 - 2)) | (1L << (T__2 - 2)) | (1L << (T__3 - 2)) | (1L << (T__4 - 2)) | (1L << (T__5 - 2)) | (1L << (T__6 - 2)) | (1L << (T__7 - 2)) | (1L << (T__8 - 2)) | (1L << (T__9 - 2)) | (1L << (T__10 - 2)) | (1L << (T__11 - 2)) | (1L << (T__13 - 2)) | (1L << (T__27 - 2)) | (1L << (QUOTATIONMARK - 2)) | (1L << (LEFTPARENTHESIS - 2)) | (1L << (PLUSSIGN - 2)) | (1L << (MINUSSIGN - 2)) | (1L << (FULLSTOP - 2)) | (1L << (LETTERE - 2)) | (1L << (DIGIT - 2)) | (1L << (LETTER - 2)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintitemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabcallContext tabcall() {
			return GetRuleContext<TabcallContext>(0);
		}
		public PrintitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintitem(this);
		}
	}

	[RuleVersion(0)]
	public PrintitemContext printitem() {
		PrintitemContext _localctx = new PrintitemContext(Context, State);
		EnterRule(_localctx, 116, RULE_printitem);
		try {
			State = 493;
			switch (TokenStream.La(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case QUOTATIONMARK:
			case LEFTPARENTHESIS:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; expression();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492; tabcall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabcallContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public TabcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabcall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTabcall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTabcall(this);
		}
	}

	[RuleVersion(0)]
	public TabcallContext tabcall() {
		TabcallContext _localctx = new TabcallContext(Context, State);
		EnterRule(_localctx, 118, RULE_tabcall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(T__27);
			State = 496; Match(LEFTPARENTHESIS);
			State = 497; numericexpression();
			State = 498; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintseparatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public PrintseparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printseparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintseparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintseparator(this);
		}
	}

	[RuleVersion(0)]
	public PrintseparatorContext printseparator() {
		PrintseparatorContext _localctx = new PrintseparatorContext(Context, State);
		EnterRule(_localctx, 120, RULE_printseparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public InputstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputstatement(this);
		}
	}

	[RuleVersion(0)]
	public InputstatementContext inputstatement() {
		InputstatementContext _localctx = new InputstatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_inputstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(T__28);
			State = 503; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariablelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariablelist(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 124, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; variable();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 506; Match(COMMA);
				State = 507; variable();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputpromptContext : ParserRuleContext {
		public InputpromptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputprompt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputprompt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputprompt(this);
		}
	}

	[RuleVersion(0)]
	public InputpromptContext inputprompt() {
		InputpromptContext _localctx = new InputpromptContext(Context, State);
		EnterRule(_localctx, 126, RULE_inputprompt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputreplyContext : ParserRuleContext {
		public InputlistContext inputlist() {
			return GetRuleContext<InputlistContext>(0);
		}
		public InputreplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputreply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputreply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputreply(this);
		}
	}

	[RuleVersion(0)]
	public InputreplyContext inputreply() {
		InputreplyContext _localctx = new InputreplyContext(Context, State);
		EnterRule(_localctx, 128, RULE_inputreply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; inputlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputlistContext : ParserRuleContext {
		public PaddeddatumContext[] paddeddatum() {
			return GetRuleContexts<PaddeddatumContext>();
		}
		public PaddeddatumContext paddeddatum(int i) {
			return GetRuleContext<PaddeddatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public InputlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputlist(this);
		}
	}

	[RuleVersion(0)]
	public InputlistContext inputlist() {
		InputlistContext _localctx = new InputlistContext(Context, State);
		EnterRule(_localctx, 130, RULE_inputlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; paddeddatum();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 518; Match(COMMA);
				State = 519; paddeddatum();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PaddeddatumContext : ParserRuleContext {
		public DatumContext datum() {
			return GetRuleContext<DatumContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public PaddeddatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paddeddatum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPaddeddatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPaddeddatum(this);
		}
	}

	[RuleVersion(0)]
	public PaddeddatumContext paddeddatum() {
		PaddeddatumContext _localctx = new PaddeddatumContext(Context, State);
		EnterRule(_localctx, 132, RULE_paddeddatum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 525; Match(SPACE);
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 531; datum();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 532; Match(SPACE);
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		public QuotedstringContext quotedstring() {
			return GetRuleContext<QuotedstringContext>(0);
		}
		public UnquotedstringContext unquotedstring() {
			return GetRuleContext<UnquotedstringContext>(0);
		}
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 134, RULE_datum);
		try {
			State = 540;
			switch (TokenStream.La(1)) {
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538; quotedstring();
				}
				break;
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 539; unquotedstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReadstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReadstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReadstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReadstatementContext readstatement() {
		ReadstatementContext _localctx = new ReadstatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_readstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542; Match(T__30);
			State = 543; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestatementContext : ParserRuleContext {
		public RestorestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRestorestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRestorestatement(this);
		}
	}

	[RuleVersion(0)]
	public RestorestatementContext restorestatement() {
		RestorestatementContext _localctx = new RestorestatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_restorestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastatementContext : ParserRuleContext {
		public DatalistContext datalist() {
			return GetRuleContext<DatalistContext>(0);
		}
		public DatastatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatastatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatastatement(this);
		}
	}

	[RuleVersion(0)]
	public DatastatementContext datastatement() {
		DatastatementContext _localctx = new DatastatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_datastatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(T__32);
			State = 548; datalist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatalistContext : ParserRuleContext {
		public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DatalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datalist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatalist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatalist(this);
		}
	}

	[RuleVersion(0)]
	public DatalistContext datalist() {
		DatalistContext _localctx = new DatalistContext(Context, State);
		EnterRule(_localctx, 142, RULE_datalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; datum();
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 551; Match(COMMA);
				State = 552; datum();
				}
				}
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionstatementContext : ParserRuleContext {
		public ArraydeclarationContext[] arraydeclaration() {
			return GetRuleContexts<ArraydeclarationContext>();
		}
		public ArraydeclarationContext arraydeclaration(int i) {
			return GetRuleContext<ArraydeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DimensionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDimensionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDimensionstatement(this);
		}
	}

	[RuleVersion(0)]
	public DimensionstatementContext dimensionstatement() {
		DimensionstatementContext _localctx = new DimensionstatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_dimensionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(T__33);
			State = 559; arraydeclaration();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 560; Match(COMMA);
				State = 561; arraydeclaration();
				}
				}
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public BoundsContext bounds() {
			return GetRuleContext<BoundsContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArraydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArraydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; numericarrayname();
			State = 568; Match(LEFTPARENTHESIS);
			State = 569; bounds();
			State = 570; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsContext : ParserRuleContext {
		public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public BoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitBounds(this);
		}
	}

	[RuleVersion(0)]
	public BoundsContext bounds() {
		BoundsContext _localctx = new BoundsContext(Context, State);
		EnterRule(_localctx, 148, RULE_bounds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; integer();
			State = 575;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 573; Match(COMMA);
				State = 574; integer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstatementContext : ParserRuleContext {
		public RemarkstringContext remarkstring() {
			return GetRuleContext<RemarkstringContext>(0);
		}
		public RemarkstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstatement(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstatementContext remarkstatement() {
		RemarkstatementContext _localctx = new RemarkstatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_remarkstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(T__34);
			State = 578; remarkstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizestatementContext : ParserRuleContext {
		public RandomizestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRandomizestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRandomizestatement(this);
		}
	}

	[RuleVersion(0)]
	public RandomizestatementContext randomizestatement() {
		RandomizestatementContext _localctx = new RandomizestatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_randomizestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringcharacterContext : ParserRuleContext {
		public ITerminalNode QUOTATIONMARK() { return GetToken(BASICParser.QUOTATIONMARK, 0); }
		public QuotedstringcharacterContext quotedstringcharacter() {
			return GetRuleContext<QuotedstringcharacterContext>(0);
		}
		public StringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public StringcharacterContext stringcharacter() {
		StringcharacterContext _localctx = new StringcharacterContext(Context, State);
		EnterRule(_localctx, 154, RULE_stringcharacter);
		try {
			State = 584;
			switch (TokenStream.La(1)) {
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; Match(QUOTATIONMARK);
				}
				break;
			case SPACE:
			case EXCLAMATIONMARK:
			case NUMBERSIGN:
			case DOLLARSIGN:
			case PERCENTSIGN:
			case AMPERSAND:
			case APOSTROPHE:
			case LEFTPARENTHESIS:
			case RIGHTPARENTHESIS:
			case ASTERISK:
			case PLUSSIGN:
			case COMMA:
			case MINUSSIGN:
			case FULLSTOP:
			case SOLIDUS:
			case COLON:
			case SEMICOLON:
			case LESSTHANSIGN:
			case EQUALSSIGN:
			case GREATERTHANSIGN:
			case QUESTIONMARK:
			case CIRCUMFLEXACCENT:
			case UNDERLINE:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; quotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(BASICParser.EXCLAMATIONMARK, 0); }
		public ITerminalNode NUMBERSIGN() { return GetToken(BASICParser.NUMBERSIGN, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public ITerminalNode PERCENTSIGN() { return GetToken(BASICParser.PERCENTSIGN, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(BASICParser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(BASICParser.APOSTROPHE, 0); }
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public ITerminalNode COLON() { return GetToken(BASICParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode QUESTIONMARK() { return GetToken(BASICParser.QUESTIONMARK, 0); }
		public ITerminalNode CIRCUMFLEXACCENT() { return GetToken(BASICParser.CIRCUMFLEXACCENT, 0); }
		public ITerminalNode UNDERLINE() { return GetToken(BASICParser.UNDERLINE, 0); }
		public UnquotedstringcharacterContext unquotedstringcharacter() {
			return GetRuleContext<UnquotedstringcharacterContext>(0);
		}
		public QuotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringcharacterContext quotedstringcharacter() {
		QuotedstringcharacterContext _localctx = new QuotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 156, RULE_quotedstringcharacter);
		try {
			State = 606;
			switch (TokenStream.La(1)) {
			case EXCLAMATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586; Match(EXCLAMATIONMARK);
				}
				break;
			case NUMBERSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587; Match(NUMBERSIGN);
				}
				break;
			case DOLLARSIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 588; Match(DOLLARSIGN);
				}
				break;
			case PERCENTSIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 589; Match(PERCENTSIGN);
				}
				break;
			case AMPERSAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 590; Match(AMPERSAND);
				}
				break;
			case APOSTROPHE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 591; Match(APOSTROPHE);
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 592; Match(LEFTPARENTHESIS);
				}
				break;
			case RIGHTPARENTHESIS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 593; Match(RIGHTPARENTHESIS);
				}
				break;
			case ASTERISK:
				EnterOuterAlt(_localctx, 9);
				{
				State = 594; Match(ASTERISK);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 10);
				{
				State = 595; Match(COMMA);
				}
				break;
			case SOLIDUS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 596; Match(SOLIDUS);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 597; Match(COLON);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 13);
				{
				State = 598; Match(SEMICOLON);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 599; Match(LESSTHANSIGN);
				}
				break;
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 15);
				{
				State = 600; Match(EQUALSSIGN);
				}
				break;
			case GREATERTHANSIGN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 601; Match(GREATERTHANSIGN);
				}
				break;
			case QUESTIONMARK:
				EnterOuterAlt(_localctx, 17);
				{
				State = 602; Match(QUESTIONMARK);
				}
				break;
			case CIRCUMFLEXACCENT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 603; Match(CIRCUMFLEXACCENT);
				}
				break;
			case UNDERLINE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 604; Match(UNDERLINE);
				}
				break;
			case SPACE:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 20);
				{
				State = 605; unquotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(BASICParser.SPACE, 0); }
		public PlainstringcharacterContext plainstringcharacter() {
			return GetRuleContext<PlainstringcharacterContext>(0);
		}
		public UnquotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringcharacterContext unquotedstringcharacter() {
		UnquotedstringcharacterContext _localctx = new UnquotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 158, RULE_unquotedstringcharacter);
		try {
			State = 610;
			switch (TokenStream.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608; Match(SPACE);
				}
				break;
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609; plainstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainstringcharacterContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public PlainstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPlainstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPlainstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public PlainstringcharacterContext plainstringcharacter() {
		PlainstringcharacterContext _localctx = new PlainstringcharacterContext(Context, State);
		EnterRule(_localctx, 160, RULE_plainstringcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			_la = TokenStream.La(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (PLUSSIGN - 49)) | (1L << (MINUSSIGN - 49)) | (1L << (FULLSTOP - 49)) | (1L << (LETTERE - 49)) | (1L << (DIGIT - 49)) | (1L << (LETTER - 49)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstringContext : ParserRuleContext {
		public StringcharacterContext[] stringcharacter() {
			return GetRuleContexts<StringcharacterContext>();
		}
		public StringcharacterContext stringcharacter(int i) {
			return GetRuleContext<StringcharacterContext>(i);
		}
		public RemarkstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstring(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstringContext remarkstring() {
		RemarkstringContext _localctx = new RemarkstringContext(Context, State);
		EnterRule(_localctx, 162, RULE_remarkstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 614; stringcharacter();
				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SPACE - 38)) | (1L << (EXCLAMATIONMARK - 38)) | (1L << (QUOTATIONMARK - 38)) | (1L << (NUMBERSIGN - 38)) | (1L << (DOLLARSIGN - 38)) | (1L << (PERCENTSIGN - 38)) | (1L << (AMPERSAND - 38)) | (1L << (APOSTROPHE - 38)) | (1L << (LEFTPARENTHESIS - 38)) | (1L << (RIGHTPARENTHESIS - 38)) | (1L << (ASTERISK - 38)) | (1L << (PLUSSIGN - 38)) | (1L << (COMMA - 38)) | (1L << (MINUSSIGN - 38)) | (1L << (FULLSTOP - 38)) | (1L << (SOLIDUS - 38)) | (1L << (COLON - 38)) | (1L << (SEMICOLON - 38)) | (1L << (LESSTHANSIGN - 38)) | (1L << (EQUALSSIGN - 38)) | (1L << (GREATERTHANSIGN - 38)) | (1L << (QUESTIONMARK - 38)) | (1L << (CIRCUMFLEXACCENT - 38)) | (1L << (UNDERLINE - 38)) | (1L << (LETTERE - 38)) | (1L << (DIGIT - 38)) | (1L << (LETTER - 38)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringContext : ParserRuleContext {
		public ITerminalNode[] QUOTATIONMARK() { return GetTokens(BASICParser.QUOTATIONMARK); }
		public ITerminalNode QUOTATIONMARK(int i) {
			return GetToken(BASICParser.QUOTATIONMARK, i);
		}
		public QuotedstringcharacterContext[] quotedstringcharacter() {
			return GetRuleContexts<QuotedstringcharacterContext>();
		}
		public QuotedstringcharacterContext quotedstringcharacter(int i) {
			return GetRuleContext<QuotedstringcharacterContext>(i);
		}
		public QuotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstring(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringContext quotedstring() {
		QuotedstringContext _localctx = new QuotedstringContext(Context, State);
		EnterRule(_localctx, 164, RULE_quotedstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(QUOTATIONMARK);
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (SPACE - 38)) | (1L << (EXCLAMATIONMARK - 38)) | (1L << (NUMBERSIGN - 38)) | (1L << (DOLLARSIGN - 38)) | (1L << (PERCENTSIGN - 38)) | (1L << (AMPERSAND - 38)) | (1L << (APOSTROPHE - 38)) | (1L << (LEFTPARENTHESIS - 38)) | (1L << (RIGHTPARENTHESIS - 38)) | (1L << (ASTERISK - 38)) | (1L << (PLUSSIGN - 38)) | (1L << (COMMA - 38)) | (1L << (MINUSSIGN - 38)) | (1L << (FULLSTOP - 38)) | (1L << (SOLIDUS - 38)) | (1L << (COLON - 38)) | (1L << (SEMICOLON - 38)) | (1L << (LESSTHANSIGN - 38)) | (1L << (EQUALSSIGN - 38)) | (1L << (GREATERTHANSIGN - 38)) | (1L << (QUESTIONMARK - 38)) | (1L << (CIRCUMFLEXACCENT - 38)) | (1L << (UNDERLINE - 38)) | (1L << (LETTERE - 38)) | (1L << (DIGIT - 38)) | (1L << (LETTER - 38)))) != 0)) {
				{
				{
				State = 620; quotedstringcharacter();
				}
				}
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 626; Match(QUOTATIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringContext : ParserRuleContext {
		public PlainstringcharacterContext[] plainstringcharacter() {
			return GetRuleContexts<PlainstringcharacterContext>();
		}
		public PlainstringcharacterContext plainstringcharacter(int i) {
			return GetRuleContext<PlainstringcharacterContext>(i);
		}
		public UnquotedstringcharacterContext[] unquotedstringcharacter() {
			return GetRuleContexts<UnquotedstringcharacterContext>();
		}
		public UnquotedstringcharacterContext unquotedstringcharacter(int i) {
			return GetRuleContext<UnquotedstringcharacterContext>(i);
		}
		public UnquotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstring(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringContext unquotedstring() {
		UnquotedstringContext _localctx = new UnquotedstringContext(Context, State);
		EnterRule(_localctx, 166, RULE_unquotedstring);
		try {
			int _alt;
			State = 638;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 628; plainstringcharacter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629; plainstringcharacter();
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 630; unquotedstringcharacter();
						}
						} 
					}
					State = 635;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				State = 636; plainstringcharacter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x42\x283\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x3\x2\x5\x2\xAC\n\x2"+
		"\x3\x2\x3\x2\x5\x2\xB0\n\x2\x3\x3\x3\x3\x3\x4\x5\x4\xB5\n\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xCD\n\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x5\b\xD3\n\b\x3\t\x3\t\x5\t\xD7\n\t\x3\t\x5\t\xDA"+
		"\n\t\x3\t\x5\t\xDD\n\t\x3\n\x3\n\a\n\xE1\n\n\f\n\xE\n\xE4\v\n\x3\v\x3"+
		"\v\x3\v\a\v\xE9\n\v\f\v\xE\v\xEC\v\v\x3\f\x3\f\x5\f\xF0\n\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xF8\n\xE\x3\xF\x3\xF\x5\xF\xFC\n\xF\x3\x10"+
		"\x3\x10\x5\x10\x100\n\x10\x3\x10\x3\x10\x5\x10\x104\n\x10\x5\x10\x106"+
		"\n\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x111\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x119"+
		"\n\x14\x3\x15\x3\x15\x5\x15\x11D\n\x15\x3\x16\x5\x16\x120\n\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\a\x16\x126\n\x16\f\x16\xE\x16\x129\v\x16\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\a\x17\x12F\n\x17\f\x17\xE\x17\x132\v\x17\x3\x18"+
		"\x3\x18\x3\x18\a\x18\x137\n\x18\f\x18\xE\x18\x13A\v\x18\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x145\n\x1A\x3"+
		"\x1B\x3\x1B\x5\x1B\x149\n\x1B\x3\x1C\x3\x1C\x5\x1C\x14D\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x157\n\x1F\x3 \x3"+
		" \x3!\x3!\x3!\x5!\x15E\n!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3"+
		"$\x3$\x3%\x3%\x5%\x16E\n%\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3(\x3(\a(\x17C\n(\f(\xE(\x17F\v(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x191\n*\x3+\x3+\x3+\x3+\x3+\x5+\x198"+
		"\n+\x3,\x3,\x5,\x19C\n,\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3/\x3/\x3\x30\x3"+
		"\x30\a\x30\x1A9\n\x30\f\x30\xE\x30\x1AC\v\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x1B7\n\x32\f\x32\xE\x32"+
		"\x1BA\v\x32\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x1C0\n\x32\f\x32\xE\x32"+
		"\x1C3\v\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x5\x34\x1CF\n\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37"+
		"\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3:\x3:\x5:\x1DE\n:\x3;\x5;\x1E1\n"+
		";\x3;\a;\x1E4\n;\f;\xE;\x1E7\v;\x3;\x6;\x1EA\n;\r;\xE;\x1EB\x3<\x3<\x5"+
		"<\x1F0\n<\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3?\x3?\x3?\x3@\x3@\x3@\a@\x1FF"+
		"\n@\f@\xE@\x202\v@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\a"+
		"\x43\x20B\n\x43\f\x43\xE\x43\x20E\v\x43\x3\x44\a\x44\x211\n\x44\f\x44"+
		"\xE\x44\x214\v\x44\x3\x44\x3\x44\a\x44\x218\n\x44\f\x44\xE\x44\x21B\v"+
		"\x44\x3\x45\x3\x45\x5\x45\x21F\n\x45\x3\x46\x3\x46\x3\x46\x3G\x3G\x3H"+
		"\x3H\x3H\x3I\x3I\x3I\aI\x22C\nI\fI\xEI\x22F\vI\x3J\x3J\x3J\x3J\aJ\x235"+
		"\nJ\fJ\xEJ\x238\vJ\x3K\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x5L\x242\nL\x3M\x3"+
		"M\x3M\x3N\x3N\x3O\x3O\x5O\x24B\nO\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x261\nP\x3Q\x3Q\x5Q\x265"+
		"\nQ\x3R\x3R\x3S\x6S\x26A\nS\rS\xES\x26B\x3T\x3T\aT\x270\nT\fT\xET\x273"+
		"\vT\x3T\x3T\x3U\x3U\x3U\aU\x27A\nU\fU\xEU\x27D\vU\x3U\x3U\x5U\x281\nU"+
		"\x3U\x2\x2V\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,"+
		".\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnpr"+
		"tvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E"+
		"\xA0\xA2\xA4\xA6\xA8\x2\b\x4\x2\x33\x33\x35\x35\x4\x2@@\x42\x42\x4\x2"+
		"\x32\x32\x37\x37\x3\x2\x4\xE\x4\x2\x34\x34\x39\x39\x5\x2\x33\x33\x35\x36"+
		"@\x42\x28E\x2\xAF\x3\x2\x2\x2\x4\xB1\x3\x2\x2\x2\x6\xB4\x3\x2\x2\x2\b"+
		"\xB8\x3\x2\x2\x2\n\xCC\x3\x2\x2\x2\f\xCE\x3\x2\x2\x2\xE\xD0\x3\x2\x2\x2"+
		"\x10\xDC\x3\x2\x2\x2\x12\xDE\x3\x2\x2\x2\x14\xE5\x3\x2\x2\x2\x16\xED\x3"+
		"\x2\x2\x2\x18\xF3\x3\x2\x2\x2\x1A\xF7\x3\x2\x2\x2\x1C\xFB\x3\x2\x2\x2"+
		"\x1E\x105\x3\x2\x2\x2 \x107\x3\x2\x2\x2\"\x10A\x3\x2\x2\x2$\x10C\x3\x2"+
		"\x2\x2&\x118\x3\x2\x2\x2(\x11C\x3\x2\x2\x2*\x11F\x3\x2\x2\x2,\x12A\x3"+
		"\x2\x2\x2.\x133\x3\x2\x2\x2\x30\x13B\x3\x2\x2\x2\x32\x144\x3\x2\x2\x2"+
		"\x34\x146\x3\x2\x2\x2\x36\x14C\x3\x2\x2\x2\x38\x14E\x3\x2\x2\x2:\x152"+
		"\x3\x2\x2\x2<\x156\x3\x2\x2\x2>\x158\x3\x2\x2\x2@\x15A\x3\x2\x2\x2\x42"+
		"\x162\x3\x2\x2\x2\x44\x165\x3\x2\x2\x2\x46\x169\x3\x2\x2\x2H\x16D\x3\x2"+
		"\x2\x2J\x16F\x3\x2\x2\x2L\x174\x3\x2\x2\x2N\x179\x3\x2\x2\x2P\x183\x3"+
		"\x2\x2\x2R\x190\x3\x2\x2\x2T\x197\x3\x2\x2\x2V\x19B\x3\x2\x2\x2X\x19D"+
		"\x3\x2\x2\x2Z\x1A0\x3\x2\x2\x2\\\x1A3\x3\x2\x2\x2^\x1A6\x3\x2\x2\x2`\x1B0"+
		"\x3\x2\x2\x2\x62\x1B2\x3\x2\x2\x2\x64\x1C4\x3\x2\x2\x2\x66\x1C6\x3\x2"+
		"\x2\x2h\x1D0\x3\x2\x2\x2j\x1D2\x3\x2\x2\x2l\x1D4\x3\x2\x2\x2n\x1D6\x3"+
		"\x2\x2\x2p\x1D8\x3\x2\x2\x2r\x1DB\x3\x2\x2\x2t\x1E5\x3\x2\x2\x2v\x1EF"+
		"\x3\x2\x2\x2x\x1F1\x3\x2\x2\x2z\x1F6\x3\x2\x2\x2|\x1F8\x3\x2\x2\x2~\x1FB"+
		"\x3\x2\x2\x2\x80\x203\x3\x2\x2\x2\x82\x205\x3\x2\x2\x2\x84\x207\x3\x2"+
		"\x2\x2\x86\x212\x3\x2\x2\x2\x88\x21E\x3\x2\x2\x2\x8A\x220\x3\x2\x2\x2"+
		"\x8C\x223\x3\x2\x2\x2\x8E\x225\x3\x2\x2\x2\x90\x228\x3\x2\x2\x2\x92\x230"+
		"\x3\x2\x2\x2\x94\x239\x3\x2\x2\x2\x96\x23E\x3\x2\x2\x2\x98\x243\x3\x2"+
		"\x2\x2\x9A\x246\x3\x2\x2\x2\x9C\x24A\x3\x2\x2\x2\x9E\x260\x3\x2\x2\x2"+
		"\xA0\x264\x3\x2\x2\x2\xA2\x266\x3\x2\x2\x2\xA4\x269\x3\x2\x2\x2\xA6\x26D"+
		"\x3\x2\x2\x2\xA8\x280\x3\x2\x2\x2\xAA\xAC\x5\x4\x3\x2\xAB\xAA\x3\x2\x2"+
		"\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB0\x5\n\x6\x2\xAE\xB0"+
		"\x5\x6\x4\x2\xAF\xAB\x3\x2\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\x3\x3\x2\x2\x2"+
		"\xB1\xB2\x5\x12\n\x2\xB2\x5\x3\x2\x2\x2\xB3\xB5\x5\x4\x3\x2\xB4\xB3\x3"+
		"\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\x5\b\x5\x2\xB7"+
		"\a\x3\x2\x2\x2\xB8\xB9\a\x3\x2\x2\xB9\t\x3\x2\x2\x2\xBA\xCD\x5\x8EH\x2"+
		"\xBB\xCD\x5@!\x2\xBC\xCD\x5\x92J\x2\xBD\xCD\x5^\x30\x2\xBE\xCD\x5N(\x2"+
		"\xBF\xCD\x5P)\x2\xC0\xCD\x5|?\x2\xC1\xCD\x5H%\x2\xC2\xCD\x5\x62\x32\x2"+
		"\xC3\xCD\x5r:\x2\xC4\xCD\x5\x9AN\x2\xC5\xCD\x5\x8A\x46\x2\xC6\xCD\x5\x98"+
		"M\x2\xC7\xCD\x5\x8CG\x2\xC8\xCD\x5`\x31\x2\xC9\xCD\x5\x64\x33\x2\xCA\xCD"+
		"\x5\x66\x34\x2\xCB\xCD\x5p\x39\x2\xCC\xBA\x3\x2\x2\x2\xCC\xBB\x3\x2\x2"+
		"\x2\xCC\xBC\x3\x2\x2\x2\xCC\xBD\x3\x2\x2\x2\xCC\xBE\x3\x2\x2\x2\xCC\xBF"+
		"\x3\x2\x2\x2\xCC\xC0\x3\x2\x2\x2\xCC\xC1\x3\x2\x2\x2\xCC\xC2\x3\x2\x2"+
		"\x2\xCC\xC3\x3\x2\x2\x2\xCC\xC4\x3\x2\x2\x2\xCC\xC5\x3\x2\x2\x2\xCC\xC6"+
		"\x3\x2\x2\x2\xCC\xC7\x3\x2\x2\x2\xCC\xC8\x3\x2\x2\x2\xCC\xC9\x3\x2\x2"+
		"\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\v\x3\x2\x2\x2\xCE\xCF"+
		"\t\x2\x2\x2\xCF\r\x3\x2\x2\x2\xD0\xD2\x5\x10\t\x2\xD1\xD3\x5\x16\f\x2"+
		"\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xF\x3\x2\x2\x2\xD4\xD6\x5"+
		"\x12\n\x2\xD5\xD7\a\x36\x2\x2\xD6\xD5\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2"+
		"\xD7\xDD\x3\x2\x2\x2\xD8\xDA\x5\x12\n\x2\xD9\xD8\x3\x2\x2\x2\xD9\xDA\x3"+
		"\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x5\x14\v\x2\xDC\xD4\x3\x2\x2\x2"+
		"\xDC\xD9\x3\x2\x2\x2\xDD\x11\x3\x2\x2\x2\xDE\xE2\a\x41\x2\x2\xDF\xE1\a"+
		"\x41\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2"+
		"\xE2\xE3\x3\x2\x2\x2\xE3\x13\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE6\a"+
		"\x36\x2\x2\xE6\xEA\a\x41\x2\x2\xE7\xE9\a\x41\x2\x2\xE8\xE7\x3\x2\x2\x2"+
		"\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\x15\x3"+
		"\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xEF\a@\x2\x2\xEE\xF0\x5\f\a\x2\xEF\xEE"+
		"\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x5\x12\n"+
		"\x2\xF2\x17\x3\x2\x2\x2\xF3\xF4\x5\xA6T\x2\xF4\x19\x3\x2\x2\x2\xF5\xF8"+
		"\x5\x1C\xF\x2\xF6\xF8\x5&\x14\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2\x2"+
		"\x2\xF8\x1B\x3\x2\x2\x2\xF9\xFC\x5\x1E\x10\x2\xFA\xFC\x5 \x11\x2\xFB\xF9"+
		"\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\x1D\x3\x2\x2\x2\xFD\xFF\a\x42\x2"+
		"\x2\xFE\x100\a\x41\x2\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100"+
		"\x106\x3\x2\x2\x2\x101\x103\a@\x2\x2\x102\x104\a\x41\x2\x2\x103\x102\x3"+
		"\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x106\x3\x2\x2\x2\x105\xFD\x3\x2\x2"+
		"\x2\x105\x101\x3\x2\x2\x2\x106\x1F\x3\x2\x2\x2\x107\x108\x5\"\x12\x2\x108"+
		"\x109\x5$\x13\x2\x109!\x3\x2\x2\x2\x10A\x10B\t\x3\x2\x2\x10B#\x3\x2\x2"+
		"\x2\x10C\x10D\a\x30\x2\x2\x10D\x110\x5*\x16\x2\x10E\x10F\a\x34\x2\x2\x10F"+
		"\x111\x5*\x16\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x112"+
		"\x3\x2\x2\x2\x112\x113\a\x31\x2\x2\x113%\x3\x2\x2\x2\x114\x115\a@\x2\x2"+
		"\x115\x119\a,\x2\x2\x116\x117\a\x42\x2\x2\x117\x119\a,\x2\x2\x118\x114"+
		"\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119\'\x3\x2\x2\x2\x11A\x11D\x5*\x16"+
		"\x2\x11B\x11D\x5<\x1F\x2\x11C\x11A\x3\x2\x2\x2\x11C\x11B\x3\x2\x2\x2\x11D"+
		")\x3\x2\x2\x2\x11E\x120\x5\f\a\x2\x11F\x11E\x3\x2\x2\x2\x11F\x120\x3\x2"+
		"\x2\x2\x120\x121\x3\x2\x2\x2\x121\x127\x5,\x17\x2\x122\x123\x5\f\a\x2"+
		"\x123\x124\x5,\x17\x2\x124\x126\x3\x2\x2\x2\x125\x122\x3\x2\x2\x2\x126"+
		"\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128+\x3"+
		"\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A\x130\x5.\x18\x2\x12B\x12C\x5\x30"+
		"\x19\x2\x12C\x12D\x5.\x18\x2\x12D\x12F\x3\x2\x2\x2\x12E\x12B\x3\x2\x2"+
		"\x2\x12F\x132\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2"+
		"\x131-\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x133\x138\x5\x32\x1A\x2\x134"+
		"\x135\a>\x2\x2\x135\x137\x5\x32\x1A\x2\x136\x134\x3\x2\x2\x2\x137\x13A"+
		"\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139/\x3\x2\x2"+
		"\x2\x13A\x138\x3\x2\x2\x2\x13B\x13C\t\x4\x2\x2\x13C\x31\x3\x2\x2\x2\x13D"+
		"\x145\x5\x1C\xF\x2\x13E\x145\x5\xE\b\x2\x13F\x145\x5\x34\x1B\x2\x140\x141"+
		"\a\x30\x2\x2\x141\x142\x5*\x16\x2\x142\x143\a\x31\x2\x2\x143\x145\x3\x2"+
		"\x2\x2\x144\x13D\x3\x2\x2\x2\x144\x13E\x3\x2\x2\x2\x144\x13F\x3\x2\x2"+
		"\x2\x144\x140\x3\x2\x2\x2\x145\x33\x3\x2\x2\x2\x146\x148\x5\x36\x1C\x2"+
		"\x147\x149\x5\x38\x1D\x2\x148\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149"+
		"\x35\x3\x2\x2\x2\x14A\x14D\x5\x42\"\x2\x14B\x14D\x5> \x2\x14C\x14A\x3"+
		"\x2\x2\x2\x14C\x14B\x3\x2\x2\x2\x14D\x37\x3\x2\x2\x2\x14E\x14F\a\x30\x2"+
		"\x2\x14F\x150\x5:\x1E\x2\x150\x151\a\x31\x2\x2\x151\x39\x3\x2\x2\x2\x152"+
		"\x153\x5*\x16\x2\x153;\x3\x2\x2\x2\x154\x157\x5&\x14\x2\x155\x157\x5\x18"+
		"\r\x2\x156\x154\x3\x2\x2\x2\x156\x155\x3\x2\x2\x2\x157=\x3\x2\x2\x2\x158"+
		"\x159\t\x5\x2\x2\x159?\x3\x2\x2\x2\x15A\x15B\a\xF\x2\x2\x15B\x15D\x5\x42"+
		"\"\x2\x15C\x15E\x5\x44#\x2\x15D\x15C\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2"+
		"\x15E\x15F\x3\x2\x2\x2\x15F\x160\a;\x2\x2\x160\x161\x5*\x16\x2\x161\x41"+
		"\x3\x2\x2\x2\x162\x163\a\x10\x2\x2\x163\x164\a\x42\x2\x2\x164\x43\x3\x2"+
		"\x2\x2\x165\x166\a\x30\x2\x2\x166\x167\x5\x46$\x2\x167\x168\a\x31\x2\x2"+
		"\x168\x45\x3\x2\x2\x2\x169\x16A\x5\x1E\x10\x2\x16AG\x3\x2\x2\x2\x16B\x16E"+
		"\x5J&\x2\x16C\x16E\x5L\'\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16C\x3\x2\x2\x2"+
		"\x16EI\x3\x2\x2\x2\x16F\x170\a\x11\x2\x2\x170\x171\x5\x1C\xF\x2\x171\x172"+
		"\a;\x2\x2\x172\x173\x5*\x16\x2\x173K\x3\x2\x2\x2\x174\x175\a\x11\x2\x2"+
		"\x175\x176\x5&\x14\x2\x176\x177\a;\x2\x2\x177\x178\x5<\x1F\x2\x178M\x3"+
		"\x2\x2\x2\x179\x17D\a\x12\x2\x2\x17A\x17C\a(\x2\x2\x17B\x17A\x3\x2\x2"+
		"\x2\x17C\x17F\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2"+
		"\x17E\x180\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x180\x181\a\x13\x2\x2\x181"+
		"\x182\x5\x4\x3\x2\x182O\x3\x2\x2\x2\x183\x184\a\x14\x2\x2\x184\x185\x5"+
		"R*\x2\x185\x186\a\x15\x2\x2\x186\x187\x5\x4\x3\x2\x187Q\x3\x2\x2\x2\x188"+
		"\x189\x5*\x16\x2\x189\x18A\x5T+\x2\x18A\x18B\x5*\x16\x2\x18B\x191\x3\x2"+
		"\x2\x2\x18C\x18D\x5<\x1F\x2\x18D\x18E\x5V,\x2\x18E\x18F\x5<\x1F\x2\x18F"+
		"\x191\x3\x2\x2\x2\x190\x188\x3\x2\x2\x2\x190\x18C\x3\x2\x2\x2\x191S\x3"+
		"\x2\x2\x2\x192\x198\x5V,\x2\x193\x198\a:\x2\x2\x194\x198\a<\x2\x2\x195"+
		"\x198\x5X-\x2\x196\x198\x5Z.\x2\x197\x192\x3\x2\x2\x2\x197\x193\x3\x2"+
		"\x2\x2\x197\x194\x3\x2\x2\x2\x197\x195\x3\x2\x2\x2\x197\x196\x3\x2\x2"+
		"\x2\x198U\x3\x2\x2\x2\x199\x19C\a;\x2\x2\x19A\x19C\x5\\/\x2\x19B\x199"+
		"\x3\x2\x2\x2\x19B\x19A\x3\x2\x2\x2\x19CW\x3\x2\x2\x2\x19D\x19E\a<\x2\x2"+
		"\x19E\x19F\a;\x2\x2\x19FY\x3\x2\x2\x2\x1A0\x1A1\a:\x2\x2\x1A1\x1A2\a;"+
		"\x2\x2\x1A2[\x3\x2\x2\x2\x1A3\x1A4\a:\x2\x2\x1A4\x1A5\a<\x2\x2\x1A5]\x3"+
		"\x2\x2\x2\x1A6\x1AA\a\x12\x2\x2\x1A7\x1A9\a(\x2\x2\x1A8\x1A7\x3\x2\x2"+
		"\x2\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2"+
		"\x1AB\x1AD\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1AE\a\x16\x2\x2\x1AE"+
		"\x1AF\x5\x4\x3\x2\x1AF_\x3\x2\x2\x2\x1B0\x1B1\a\x17\x2\x2\x1B1\x61\x3"+
		"\x2\x2\x2\x1B2\x1B3\a\x18\x2\x2\x1B3\x1B4\x5*\x16\x2\x1B4\x1B8\a\x12\x2"+
		"\x2\x1B5\x1B7\a(\x2\x2\x1B6\x1B5\x3\x2\x2\x2\x1B7\x1BA\x3\x2\x2\x2\x1B8"+
		"\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB\x3\x2\x2\x2\x1BA\x1B8"+
		"\x3\x2\x2\x2\x1BB\x1BC\a\x13\x2\x2\x1BC\x1C1\x5\x4\x3\x2\x1BD\x1BE\a\x34"+
		"\x2\x2\x1BE\x1C0\x5\x4\x3\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1C3\x3\x2\x2"+
		"\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x63\x3\x2\x2\x2\x1C3"+
		"\x1C1\x3\x2\x2\x2\x1C4\x1C5\a\x19\x2\x2\x1C5\x65\x3\x2\x2\x2\x1C6\x1C7"+
		"\a\x1A\x2\x2\x1C7\x1C8\x5h\x35\x2\x1C8\x1C9\a;\x2\x2\x1C9\x1CA\x5j\x36"+
		"\x2\x1CA\x1CB\a\x13\x2\x2\x1CB\x1CE\x5l\x37\x2\x1CC\x1CD\a\x1B\x2\x2\x1CD"+
		"\x1CF\x5n\x38\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CFg\x3"+
		"\x2\x2\x2\x1D0\x1D1\x5\x1E\x10\x2\x1D1i\x3\x2\x2\x2\x1D2\x1D3\x5*\x16"+
		"\x2\x1D3k\x3\x2\x2\x2\x1D4\x1D5\x5*\x16\x2\x1D5m\x3\x2\x2\x2\x1D6\x1D7"+
		"\x5*\x16\x2\x1D7o\x3\x2\x2\x2\x1D8\x1D9\a\x1C\x2\x2\x1D9\x1DA\x5h\x35"+
		"\x2\x1DAq\x3\x2\x2\x2\x1DB\x1DD\a\x1D\x2\x2\x1DC\x1DE\x5t;\x2\x1DD\x1DC"+
		"\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DEs\x3\x2\x2\x2\x1DF\x1E1\x5v<\x2"+
		"\x1E0\x1DF\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2"+
		"\x1E4\x5z>\x2\x1E3\x1E0\x3\x2\x2\x2\x1E4\x1E7\x3\x2\x2\x2\x1E5\x1E3\x3"+
		"\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E9\x3\x2\x2\x2\x1E7\x1E5\x3\x2"+
		"\x2\x2\x1E8\x1EA\x5v<\x2\x1E9\x1E8\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB"+
		"\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1ECu\x3\x2\x2\x2\x1ED\x1F0\x5"+
		"(\x15\x2\x1EE\x1F0\x5x=\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1EE\x3\x2\x2\x2"+
		"\x1F0w\x3\x2\x2\x2\x1F1\x1F2\a\x1E\x2\x2\x1F2\x1F3\a\x30\x2\x2\x1F3\x1F4"+
		"\x5*\x16\x2\x1F4\x1F5\a\x31\x2\x2\x1F5y\x3\x2\x2\x2\x1F6\x1F7\t\x6\x2"+
		"\x2\x1F7{\x3\x2\x2\x2\x1F8\x1F9\a\x1F\x2\x2\x1F9\x1FA\x5~@\x2\x1FA}\x3"+
		"\x2\x2\x2\x1FB\x200\x5\x1A\xE\x2\x1FC\x1FD\a\x34\x2\x2\x1FD\x1FF\x5\x1A"+
		"\xE\x2\x1FE\x1FC\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200\x1FE\x3\x2\x2"+
		"\x2\x200\x201\x3\x2\x2\x2\x201\x7F\x3\x2\x2\x2\x202\x200\x3\x2\x2\x2\x203"+
		"\x204\a \x2\x2\x204\x81\x3\x2\x2\x2\x205\x206\x5\x84\x43\x2\x206\x83\x3"+
		"\x2\x2\x2\x207\x20C\x5\x86\x44\x2\x208\x209\a\x34\x2\x2\x209\x20B\x5\x86"+
		"\x44\x2\x20A\x208\x3\x2\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C\x20A\x3\x2\x2"+
		"\x2\x20C\x20D\x3\x2\x2\x2\x20D\x85\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20F"+
		"\x211\a(\x2\x2\x210\x20F\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2\x212\x210\x3"+
		"\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213\x215\x3\x2\x2\x2\x214\x212\x3\x2"+
		"\x2\x2\x215\x219\x5\x88\x45\x2\x216\x218\a(\x2\x2\x217\x216\x3\x2\x2\x2"+
		"\x218\x21B\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A"+
		"\x87\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21C\x21F\x5\xA6T\x2\x21D\x21F"+
		"\x5\xA8U\x2\x21E\x21C\x3\x2\x2\x2\x21E\x21D\x3\x2\x2\x2\x21F\x89\x3\x2"+
		"\x2\x2\x220\x221\a!\x2\x2\x221\x222\x5~@\x2\x222\x8B\x3\x2\x2\x2\x223"+
		"\x224\a\"\x2\x2\x224\x8D\x3\x2\x2\x2\x225\x226\a#\x2\x2\x226\x227\x5\x90"+
		"I\x2\x227\x8F\x3\x2\x2\x2\x228\x22D\x5\x88\x45\x2\x229\x22A\a\x34\x2\x2"+
		"\x22A\x22C\x5\x88\x45\x2\x22B\x229\x3\x2\x2\x2\x22C\x22F\x3\x2\x2\x2\x22D"+
		"\x22B\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x91\x3\x2\x2\x2\x22F\x22D"+
		"\x3\x2\x2\x2\x230\x231\a$\x2\x2\x231\x236\x5\x94K\x2\x232\x233\a\x34\x2"+
		"\x2\x233\x235\x5\x94K\x2\x234\x232\x3\x2\x2\x2\x235\x238\x3\x2\x2\x2\x236"+
		"\x234\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x93\x3\x2\x2\x2\x238\x236"+
		"\x3\x2\x2\x2\x239\x23A\x5\"\x12\x2\x23A\x23B\a\x30\x2\x2\x23B\x23C\x5"+
		"\x96L\x2\x23C\x23D\a\x31\x2\x2\x23D\x95\x3\x2\x2\x2\x23E\x241\x5\x12\n"+
		"\x2\x23F\x240\a\x34\x2\x2\x240\x242\x5\x12\n\x2\x241\x23F\x3\x2\x2\x2"+
		"\x241\x242\x3\x2\x2\x2\x242\x97\x3\x2\x2\x2\x243\x244\a%\x2\x2\x244\x245"+
		"\x5\xA4S\x2\x245\x99\x3\x2\x2\x2\x246\x247\a&\x2\x2\x247\x9B\x3\x2\x2"+
		"\x2\x248\x24B\a*\x2\x2\x249\x24B\x5\x9EP\x2\x24A\x248\x3\x2\x2\x2\x24A"+
		"\x249\x3\x2\x2\x2\x24B\x9D\x3\x2\x2\x2\x24C\x261\a)\x2\x2\x24D\x261\a"+
		"+\x2\x2\x24E\x261\a,\x2\x2\x24F\x261\a-\x2\x2\x250\x261\a.\x2\x2\x251"+
		"\x261\a/\x2\x2\x252\x261\a\x30\x2\x2\x253\x261\a\x31\x2\x2\x254\x261\a"+
		"\x32\x2\x2\x255\x261\a\x34\x2\x2\x256\x261\a\x37\x2\x2\x257\x261\a\x38"+
		"\x2\x2\x258\x261\a\x39\x2\x2\x259\x261\a:\x2\x2\x25A\x261\a;\x2\x2\x25B"+
		"\x261\a<\x2\x2\x25C\x261\a=\x2\x2\x25D\x261\a>\x2\x2\x25E\x261\a?\x2\x2"+
		"\x25F\x261\x5\xA0Q\x2\x260\x24C\x3\x2\x2\x2\x260\x24D\x3\x2\x2\x2\x260"+
		"\x24E\x3\x2\x2\x2\x260\x24F\x3\x2\x2\x2\x260\x250\x3\x2\x2\x2\x260\x251"+
		"\x3\x2\x2\x2\x260\x252\x3\x2\x2\x2\x260\x253\x3\x2\x2\x2\x260\x254\x3"+
		"\x2\x2\x2\x260\x255\x3\x2\x2\x2\x260\x256\x3\x2\x2\x2\x260\x257\x3\x2"+
		"\x2\x2\x260\x258\x3\x2\x2\x2\x260\x259\x3\x2\x2\x2\x260\x25A\x3\x2\x2"+
		"\x2\x260\x25B\x3\x2\x2\x2\x260\x25C\x3\x2\x2\x2\x260\x25D\x3\x2\x2\x2"+
		"\x260\x25E\x3\x2\x2\x2\x260\x25F\x3\x2\x2\x2\x261\x9F\x3\x2\x2\x2\x262"+
		"\x265\a(\x2\x2\x263\x265\x5\xA2R\x2\x264\x262\x3\x2\x2\x2\x264\x263\x3"+
		"\x2\x2\x2\x265\xA1\x3\x2\x2\x2\x266\x267\t\a\x2\x2\x267\xA3\x3\x2\x2\x2"+
		"\x268\x26A\x5\x9CO\x2\x269\x268\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B"+
		"\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\xA5\x3\x2\x2\x2\x26D\x271"+
		"\a*\x2\x2\x26E\x270\x5\x9EP\x2\x26F\x26E\x3\x2\x2\x2\x270\x273\x3\x2\x2"+
		"\x2\x271\x26F\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x274\x3\x2\x2\x2"+
		"\x273\x271\x3\x2\x2\x2\x274\x275\a*\x2\x2\x275\xA7\x3\x2\x2\x2\x276\x281"+
		"\x5\xA2R\x2\x277\x27B\x5\xA2R\x2\x278\x27A\x5\xA0Q\x2\x279\x278\x3\x2"+
		"\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27B\x27C\x3\x2\x2"+
		"\x2\x27C\x27E\x3\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27E\x27F\x5\xA2R\x2\x27F"+
		"\x281\x3\x2\x2\x2\x280\x276\x3\x2\x2\x2\x280\x277\x3\x2\x2\x2\x281\xA9"+
		"\x3\x2\x2\x2;\xAB\xAF\xB4\xCC\xD2\xD6\xD9\xDC\xE2\xEA\xEF\xF7\xFB\xFF"+
		"\x103\x105\x110\x118\x11C\x11F\x127\x130\x138\x144\x148\x14C\x156\x15D"+
		"\x16D\x17D\x190\x197\x19B\x1AA\x1B8\x1C1\x1CE\x1DD\x1E0\x1E5\x1EB\x1EF"+
		"\x200\x20C\x212\x219\x21E\x22D\x236\x241\x24A\x260\x264\x26B\x271\x27B"+
		"\x280";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
