//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../BASIC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class BASICParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, DIGIT=38, 
		LETTER=39, WS=40, SPACE=41, EXCLAMATIONMARK=42, QUOTATIONMARK=43, NUMBERSIGN=44, 
		DOLLARSIGN=45, PERCENTSIGN=46, AMPERSAND=47, APOSTROPHE=48, LEFTPARENTHESIS=49, 
		RIGHTPARENTHESIS=50, ASTERISK=51, PLUSSIGN=52, COMMA=53, MINUSSIGN=54, 
		FULLSTOP=55, SOLIDUS=56, COLON=57, SEMICOLON=58, LESSTHANSIGN=59, EQUALSSIGN=60, 
		GREATERTHANSIGN=61, QUESTIONMARK=62, CIRCUMFLEXACCENT=63, UNDERLINE=64;
	public const int
		RULE_line = 0, RULE_linenumber = 1, RULE_endline = 2, RULE_endstatement = 3, 
		RULE_statement = 4, RULE_numericconstant = 5, RULE_sign = 6, RULE_numericrep = 7, 
		RULE_significand = 8, RULE_integer = 9, RULE_fraction = 10, RULE_exrad = 11, 
		RULE_stringconstant = 12, RULE_variable = 13, RULE_numericvariable = 14, 
		RULE_simplenumericvariable = 15, RULE_numericarrayelement = 16, RULE_numericarrayname = 17, 
		RULE_subscript = 18, RULE_stringvariable = 19, RULE_expression = 20, RULE_numericexpression = 21, 
		RULE_term = 22, RULE_factor = 23, RULE_multiplier = 24, RULE_primary = 25, 
		RULE_numericfunctionref = 26, RULE_numericfunctionname = 27, RULE_argumentlist = 28, 
		RULE_argument = 29, RULE_stringexpression = 30, RULE_numericsuppliedfunction = 31, 
		RULE_defstatement = 32, RULE_numericdefinedfunction = 33, RULE_parameterlist = 34, 
		RULE_parameter = 35, RULE_letstatement = 36, RULE_numericletstatement = 37, 
		RULE_stringletstatement = 38, RULE_gotostatement = 39, RULE_ifthenstatement = 40, 
		RULE_relationalexpression = 41, RULE_relation = 42, RULE_equalityrelation = 43, 
		RULE_notless = 44, RULE_notgreater = 45, RULE_notequals = 46, RULE_gosubstatement = 47, 
		RULE_returnstatement = 48, RULE_ongotostatement = 49, RULE_stopstatement = 50, 
		RULE_forline = 51, RULE_nextline = 52, RULE_forstatement = 53, RULE_controlvariable = 54, 
		RULE_initialvalue = 55, RULE_limit = 56, RULE_increment = 57, RULE_nextstatement = 58, 
		RULE_printstatement = 59, RULE_printlist = 60, RULE_printitem = 61, RULE_tabcall = 62, 
		RULE_printseparator = 63, RULE_inputstatement = 64, RULE_variablelist = 65, 
		RULE_inputprompt = 66, RULE_inputreply = 67, RULE_inputlist = 68, RULE_paddeddatum = 69, 
		RULE_datum = 70, RULE_readstatement = 71, RULE_restorestatement = 72, 
		RULE_datastatement = 73, RULE_datalist = 74, RULE_dimensionstatement = 75, 
		RULE_arraydeclaration = 76, RULE_bounds = 77, RULE_remarkstatement = 78, 
		RULE_randomizestatement = 79, RULE_stringcharacter = 80, RULE_quotedstringcharacter = 81, 
		RULE_unquotedstringcharacter = 82, RULE_plainstringcharacter = 83, RULE_remarkstring = 84, 
		RULE_quotedstring = 85, RULE_unquotedstring = 86;
	public static readonly string[] ruleNames = {
		"line", "linenumber", "endline", "endstatement", "statement", "numericconstant", 
		"sign", "numericrep", "significand", "integer", "fraction", "exrad", "stringconstant", 
		"variable", "numericvariable", "simplenumericvariable", "numericarrayelement", 
		"numericarrayname", "subscript", "stringvariable", "expression", "numericexpression", 
		"term", "factor", "multiplier", "primary", "numericfunctionref", "numericfunctionname", 
		"argumentlist", "argument", "stringexpression", "numericsuppliedfunction", 
		"defstatement", "numericdefinedfunction", "parameterlist", "parameter", 
		"letstatement", "numericletstatement", "stringletstatement", "gotostatement", 
		"ifthenstatement", "relationalexpression", "relation", "equalityrelation", 
		"notless", "notgreater", "notequals", "gosubstatement", "returnstatement", 
		"ongotostatement", "stopstatement", "forline", "nextline", "forstatement", 
		"controlvariable", "initialvalue", "limit", "increment", "nextstatement", 
		"printstatement", "printlist", "printitem", "tabcall", "printseparator", 
		"inputstatement", "variablelist", "inputprompt", "inputreply", "inputlist", 
		"paddeddatum", "datum", "readstatement", "restorestatement", "datastatement", 
		"datalist", "dimensionstatement", "arraydeclaration", "bounds", "remarkstatement", 
		"randomizestatement", "stringcharacter", "quotedstringcharacter", "unquotedstringcharacter", 
		"plainstringcharacter", "remarkstring", "quotedstring", "unquotedstring"
	};

	private static readonly string[] _LiteralNames = {
		null, "'END'", "'E'", "'ABS'", "'ATN'", "'COS'", "'EXP'", "'INT'", "'LOG'", 
		"'RND'", "'SGN'", "'SIN'", "'SQR'", "'TAN'", "'DEF'", "'FN'", "'LET'", 
		"'GO'", "'TO'", "'IF'", "'THEN'", "'SUB'", "'RETURN'", "'ON'", "'STOP'", 
		"'FOR'", "'STEP'", "'NEXT'", "'PRINT'", "'TAB'", "'INPUT'", "'INPUT?'", 
		"'READ'", "'restore'", "'DATA'", "'DIM'", "'REM'", "'RANDOMIZE'", null, 
		null, null, "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", "'('", 
		"')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", 
		"'='", "'>'", "'?'", "'^'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "DIGIT", "LETTER", "WS", "SPACE", "EXCLAMATIONMARK", "QUOTATIONMARK", 
		"NUMBERSIGN", "DOLLARSIGN", "PERCENTSIGN", "AMPERSAND", "APOSTROPHE", 
		"LEFTPARENTHESIS", "RIGHTPARENTHESIS", "ASTERISK", "PLUSSIGN", "COMMA", 
		"MINUSSIGN", "FULLSTOP", "SOLIDUS", "COLON", "SEMICOLON", "LESSTHANSIGN", 
		"EQUALSSIGN", "GREATERTHANSIGN", "QUESTIONMARK", "CIRCUMFLEXACCENT", "UNDERLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BASIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BASICParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class LineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EndlineContext endline() {
			return GetRuleContext<EndlineContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		try {
			State = 178;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; linenumber();
				State = 175; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; endline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 2, RULE_linenumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndstatementContext endstatement() {
			return GetRuleContext<EndstatementContext>(0);
		}
		public EndlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndline(this);
		}
	}

	[RuleVersion(0)]
	public EndlineContext endline() {
		EndlineContext _localctx = new EndlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_endline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; linenumber();
			State = 183; endstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstatementContext : ParserRuleContext {
		public EndstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndstatement(this);
		}
	}

	[RuleVersion(0)]
	public EndstatementContext endstatement() {
		EndstatementContext _localctx = new EndstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_endstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DatastatementContext datastatement() {
			return GetRuleContext<DatastatementContext>(0);
		}
		public DefstatementContext defstatement() {
			return GetRuleContext<DefstatementContext>(0);
		}
		public DimensionstatementContext dimensionstatement() {
			return GetRuleContext<DimensionstatementContext>(0);
		}
		public GosubstatementContext gosubstatement() {
			return GetRuleContext<GosubstatementContext>(0);
		}
		public GotostatementContext gotostatement() {
			return GetRuleContext<GotostatementContext>(0);
		}
		public IfthenstatementContext ifthenstatement() {
			return GetRuleContext<IfthenstatementContext>(0);
		}
		public InputstatementContext inputstatement() {
			return GetRuleContext<InputstatementContext>(0);
		}
		public LetstatementContext letstatement() {
			return GetRuleContext<LetstatementContext>(0);
		}
		public OngotostatementContext ongotostatement() {
			return GetRuleContext<OngotostatementContext>(0);
		}
		public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		public RandomizestatementContext randomizestatement() {
			return GetRuleContext<RandomizestatementContext>(0);
		}
		public ReadstatementContext readstatement() {
			return GetRuleContext<ReadstatementContext>(0);
		}
		public RemarkstatementContext remarkstatement() {
			return GetRuleContext<RemarkstatementContext>(0);
		}
		public RestorestatementContext restorestatement() {
			return GetRuleContext<RestorestatementContext>(0);
		}
		public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		public StopstatementContext stopstatement() {
			return GetRuleContext<StopstatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 203;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; datastatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; defstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; dimensionstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 190; gosubstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 191; gotostatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 192; ifthenstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 193; inputstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 194; letstatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 195; ongotostatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 196; printstatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 197; randomizestatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 198; readstatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 199; remarkstatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 200; restorestatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 201; returnstatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 202; stopstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericconstantContext : ParserRuleContext {
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public NumericconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericconstant(this);
		}
	}

	[RuleVersion(0)]
	public NumericconstantContext numericconstant() {
		NumericconstantContext _localctx = new NumericconstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_numericconstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 205; sign();
				}
			}

			State = 208; numericrep();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 12, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.La(1);
			if ( !(_la==PLUSSIGN || _la==MINUSSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericrepContext : ParserRuleContext {
		public SignificandContext significand() {
			return GetRuleContext<SignificandContext>(0);
		}
		public ExradContext exrad() {
			return GetRuleContext<ExradContext>(0);
		}
		public NumericrepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericrep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericrep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericrep(this);
		}
	}

	[RuleVersion(0)]
	public NumericrepContext numericrep() {
		NumericrepContext _localctx = new NumericrepContext(Context, State);
		EnterRule(_localctx, 14, RULE_numericrep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; significand();
			State = 214;
			_la = TokenStream.La(1);
			if (_la==T__1) {
				{
				State = 213; exrad();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignificandContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		public SignificandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_significand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSignificand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSignificand(this);
		}
	}

	[RuleVersion(0)]
	public SignificandContext significand() {
		SignificandContext _localctx = new SignificandContext(Context, State);
		EnterRule(_localctx, 16, RULE_significand);
		int _la;
		try {
			State = 224;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; integer();
				State = 218;
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 217; Match(FULLSTOP);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 220; integer();
					}
				}

				State = 223; fraction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_integer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(DIGIT);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 227; Match(DIGIT);
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFraction(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(Context, State);
		EnterRule(_localctx, 20, RULE_fraction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(FULLSTOP);
			State = 234; Match(DIGIT);
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 235; Match(DIGIT);
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExradContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ExradContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exrad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExrad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExrad(this);
		}
	}

	[RuleVersion(0)]
	public ExradContext exrad() {
		ExradContext _localctx = new ExradContext(Context, State);
		EnterRule(_localctx, 22, RULE_exrad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(T__1);
			State = 243;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 242; sign();
				}
			}

			State = 245; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringconstantContext : ParserRuleContext {
		public QuotedstringContext quotedstring() {
			return GetRuleContext<QuotedstringContext>(0);
		}
		public StringconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringconstant(this);
		}
	}

	[RuleVersion(0)]
	public StringconstantContext stringconstant() {
		StringconstantContext _localctx = new StringconstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringconstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; quotedstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		try {
			State = 251;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; numericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; stringvariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public NumericarrayelementContext numericarrayelement() {
			return GetRuleContext<NumericarrayelementContext>(0);
		}
		public NumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public NumericvariableContext numericvariable() {
		NumericvariableContext _localctx = new NumericvariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_numericvariable);
		try {
			State = 255;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; simplenumericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; numericarrayelement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplenumericvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public SimplenumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplenumericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSimplenumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSimplenumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public SimplenumericvariableContext simplenumericvariable() {
		SimplenumericvariableContext _localctx = new SimplenumericvariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_simplenumericvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(LETTER);
			State = 259;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 258; Match(DIGIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarrayelementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public NumericarrayelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayelement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayelement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayelement(this);
		}
	}

	[RuleVersion(0)]
	public NumericarrayelementContext numericarrayelement() {
		NumericarrayelementContext _localctx = new NumericarrayelementContext(Context, State);
		EnterRule(_localctx, 32, RULE_numericarrayelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; numericarrayname();
			State = 262; subscript();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarraynameContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericarraynameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayname(this);
		}
	}

	[RuleVersion(0)]
	public NumericarraynameContext numericarrayname() {
		NumericarraynameContext _localctx = new NumericarraynameContext(Context, State);
		EnterRule(_localctx, 34, RULE_numericarrayname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 36, RULE_subscript);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(LEFTPARENTHESIS);
			State = 267; numericexpression();
			State = 270;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 268; Match(COMMA);
				State = 269; numericexpression();
				}
			}

			State = 272; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public StringvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringvariable(this);
		}
	}

	[RuleVersion(0)]
	public StringvariableContext stringvariable() {
		StringvariableContext _localctx = new StringvariableContext(Context, State);
		EnterRule(_localctx, 38, RULE_stringvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(LETTER);
			State = 275; Match(DOLLARSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			State = 279;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericexpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public SignContext[] sign() {
			return GetRuleContexts<SignContext>();
		}
		public SignContext sign(int i) {
			return GetRuleContext<SignContext>(i);
		}
		public NumericexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericexpression(this);
		}
	}

	[RuleVersion(0)]
	public NumericexpressionContext numericexpression() {
		NumericexpressionContext _localctx = new NumericexpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_numericexpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 281; sign();
				}
			}

			State = 284; term();
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 285; sign();
					State = 286; term();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MultiplierContext[] multiplier() {
			return GetRuleContexts<MultiplierContext>();
		}
		public MultiplierContext multiplier(int i) {
			return GetRuleContext<MultiplierContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 44, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; factor();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ASTERISK || _la==SOLIDUS) {
				{
				{
				State = 294; multiplier();
				State = 295; factor();
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		public ITerminalNode[] CIRCUMFLEXACCENT() { return GetTokens(BASICParser.CIRCUMFLEXACCENT); }
		public ITerminalNode CIRCUMFLEXACCENT(int i) {
			return GetToken(BASICParser.CIRCUMFLEXACCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 46, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; primary();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CIRCUMFLEXACCENT) {
				{
				{
				State = 303; Match(CIRCUMFLEXACCENT);
				State = 304; primary();
				}
				}
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplierContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public MultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterMultiplier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitMultiplier(this);
		}
	}

	[RuleVersion(0)]
	public MultiplierContext multiplier() {
		MultiplierContext _localctx = new MultiplierContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			_la = TokenStream.La(1);
			if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public NumericfunctionrefContext numericfunctionref() {
			return GetRuleContext<NumericfunctionrefContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_primary);
		try {
			State = 319;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; numericvariable();
				}
				break;
			case DIGIT:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; numericrep();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; numericfunctionref();
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315; Match(LEFTPARENTHESIS);
				State = 316; numericexpression();
				State = 317; Match(RIGHTPARENTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionrefContext : ParserRuleContext {
		public NumericfunctionnameContext numericfunctionname() {
			return GetRuleContext<NumericfunctionnameContext>(0);
		}
		public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public NumericfunctionrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionref(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionrefContext numericfunctionref() {
		NumericfunctionrefContext _localctx = new NumericfunctionrefContext(Context, State);
		EnterRule(_localctx, 52, RULE_numericfunctionref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; numericfunctionname();
			State = 323;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 322; argumentlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionnameContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public NumericsuppliedfunctionContext numericsuppliedfunction() {
			return GetRuleContext<NumericsuppliedfunctionContext>(0);
		}
		public NumericfunctionnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionname(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionnameContext numericfunctionname() {
		NumericfunctionnameContext _localctx = new NumericfunctionnameContext(Context, State);
		EnterRule(_localctx, 54, RULE_numericfunctionname);
		try {
			State = 327;
			switch (TokenStream.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; numericdefinedfunction();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; numericsuppliedfunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArgumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgumentlist(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentlistContext argumentlist() {
		ArgumentlistContext _localctx = new ArgumentlistContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(LEFTPARENTHESIS);
			State = 330; argument();
			State = 331; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringexpressionContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		public StringexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringexpression(this);
		}
	}

	[RuleVersion(0)]
	public StringexpressionContext stringexpression() {
		StringexpressionContext _localctx = new StringexpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_stringexpression);
		try {
			State = 337;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335; stringvariable();
				}
				break;
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336; stringconstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericsuppliedfunctionContext : ParserRuleContext {
		public NumericsuppliedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericsuppliedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericsuppliedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericsuppliedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericsuppliedfunctionContext numericsuppliedfunction() {
		NumericsuppliedfunctionContext _localctx = new NumericsuppliedfunctionContext(Context, State);
		EnterRule(_localctx, 62, RULE_numericsuppliedfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstatementContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		public DefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDefstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDefstatement(this);
		}
	}

	[RuleVersion(0)]
	public DefstatementContext defstatement() {
		DefstatementContext _localctx = new DefstatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_defstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(T__13);
			State = 342; numericdefinedfunction();
			State = 344;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 343; parameterlist();
				}
			}

			State = 346; Match(EQUALSSIGN);
			State = 347; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericdefinedfunctionContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericdefinedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericdefinedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericdefinedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericdefinedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericdefinedfunctionContext numericdefinedfunction() {
		NumericdefinedfunctionContext _localctx = new NumericdefinedfunctionContext(Context, State);
		EnterRule(_localctx, 66, RULE_numericdefinedfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(T__14);
			State = 350; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ParameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameterlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterlistContext parameterlist() {
		ParameterlistContext _localctx = new ParameterlistContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameterlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(LEFTPARENTHESIS);
			State = 353; parameter();
			State = 354; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstatementContext : ParserRuleContext {
		public NumericletstatementContext numericletstatement() {
			return GetRuleContext<NumericletstatementContext>(0);
		}
		public StringletstatementContext stringletstatement() {
			return GetRuleContext<StringletstatementContext>(0);
		}
		public LetstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLetstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLetstatement(this);
		}
	}

	[RuleVersion(0)]
	public LetstatementContext letstatement() {
		LetstatementContext _localctx = new LetstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_letstatement);
		try {
			State = 360;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; numericletstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; stringletstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericletstatementContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public NumericletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericletstatement(this);
		}
	}

	[RuleVersion(0)]
	public NumericletstatementContext numericletstatement() {
		NumericletstatementContext _localctx = new NumericletstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_numericletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__15);
			State = 363; numericvariable();
			State = 364; Match(EQUALSSIGN);
			State = 365; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringletstatementContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public StringletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringletstatement(this);
		}
	}

	[RuleVersion(0)]
	public StringletstatementContext stringletstatement() {
		StringletstatementContext _localctx = new StringletstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(T__15);
			State = 368; stringvariable();
			State = 369; Match(EQUALSSIGN);
			State = 370; stringexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGotostatement(this);
		}
	}

	[RuleVersion(0)]
	public GotostatementContext gotostatement() {
		GotostatementContext _localctx = new GotostatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_gotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__16);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 373; Match(SPACE);
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 379; Match(T__17);
			State = 380; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstatementContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public IfthenstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIfthenstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIfthenstatement(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstatementContext ifthenstatement() {
		IfthenstatementContext _localctx = new IfthenstatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_ifthenstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(T__18);
			State = 383; relationalexpression();
			State = 384; Match(T__19);
			State = 385; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public StringexpressionContext[] stringexpression() {
			return GetRuleContexts<StringexpressionContext>();
		}
		public StringexpressionContext stringexpression(int i) {
			return GetRuleContext<StringexpressionContext>(i);
		}
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_relationalexpression);
		try {
			State = 395;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; numericexpression();
				State = 388; relation();
				State = 389; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; stringexpression();
				State = 392; equalityrelation();
				State = 393; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotlessContext notless() {
			return GetRuleContext<NotlessContext>(0);
		}
		public NotgreaterContext notgreater() {
			return GetRuleContext<NotgreaterContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 84, RULE_relation);
		try {
			State = 402;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; equalityrelation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; Match(LESSTHANSIGN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 399; Match(GREATERTHANSIGN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 400; notless();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 401; notgreater();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityrelationContext : ParserRuleContext {
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotequalsContext notequals() {
			return GetRuleContext<NotequalsContext>(0);
		}
		public EqualityrelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityrelation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEqualityrelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEqualityrelation(this);
		}
	}

	[RuleVersion(0)]
	public EqualityrelationContext equalityrelation() {
		EqualityrelationContext _localctx = new EqualityrelationContext(Context, State);
		EnterRule(_localctx, 86, RULE_equalityrelation);
		try {
			State = 406;
			switch (TokenStream.La(1)) {
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; Match(EQUALSSIGN);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405; notequals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotlessContext : ParserRuleContext {
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notless; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotless(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotless(this);
		}
	}

	[RuleVersion(0)]
	public NotlessContext notless() {
		NotlessContext _localctx = new NotlessContext(Context, State);
		EnterRule(_localctx, 88, RULE_notless);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(GREATERTHANSIGN);
			State = 409; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotgreaterContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotgreaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notgreater; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotgreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotgreater(this);
		}
	}

	[RuleVersion(0)]
	public NotgreaterContext notgreater() {
		NotgreaterContext _localctx = new NotgreaterContext(Context, State);
		EnterRule(_localctx, 90, RULE_notgreater);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(LESSTHANSIGN);
			State = 412; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotequalsContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotequalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notequals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotequals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotequals(this);
		}
	}

	[RuleVersion(0)]
	public NotequalsContext notequals() {
		NotequalsContext _localctx = new NotequalsContext(Context, State);
		EnterRule(_localctx, 92, RULE_notequals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(LESSTHANSIGN);
			State = 415; Match(GREATERTHANSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GosubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGosubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGosubstatement(this);
		}
	}

	[RuleVersion(0)]
	public GosubstatementContext gosubstatement() {
		GosubstatementContext _localctx = new GosubstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_gosubstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(T__16);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 418; Match(SPACE);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 424; Match(T__20);
			State = 425; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostatementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public OngotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterOngotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitOngotostatement(this);
		}
	}

	[RuleVersion(0)]
	public OngotostatementContext ongotostatement() {
		OngotostatementContext _localctx = new OngotostatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_ongotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(T__22);
			State = 430; numericexpression();
			State = 431; Match(T__16);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 432; Match(SPACE);
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 438; Match(T__17);
			State = 439; linenumber();
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 440; Match(COMMA);
				State = 441; linenumber();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstatementContext : ParserRuleContext {
		public StopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStopstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStopstatement(this);
		}
	}

	[RuleVersion(0)]
	public StopstatementContext stopstatement() {
		StopstatementContext _localctx = new StopstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_stopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ForstatementContext forstatement() {
			return GetRuleContext<ForstatementContext>(0);
		}
		public ForlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForline(this);
		}
	}

	[RuleVersion(0)]
	public ForlineContext forline() {
		ForlineContext _localctx = new ForlineContext(Context, State);
		EnterRule(_localctx, 102, RULE_forline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; linenumber();
			State = 450; forstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public NextstatementContext nextstatement() {
			return GetRuleContext<NextstatementContext>(0);
		}
		public NextlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextline(this);
		}
	}

	[RuleVersion(0)]
	public NextlineContext nextline() {
		NextlineContext _localctx = new NextlineContext(Context, State);
		EnterRule(_localctx, 104, RULE_nextline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; linenumber();
			State = 453; nextstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public InitialvalueContext initialvalue() {
			return GetRuleContext<InitialvalueContext>(0);
		}
		public LimitContext limit() {
			return GetRuleContext<LimitContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public ForstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForstatementContext forstatement() {
		ForstatementContext _localctx = new ForstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_forstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(T__24);
			State = 456; controlvariable();
			State = 457; Match(EQUALSSIGN);
			State = 458; initialvalue();
			State = 459; Match(T__17);
			State = 460; limit();
			State = 463;
			_la = TokenStream.La(1);
			if (_la==T__25) {
				{
				State = 461; Match(T__25);
				State = 462; increment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ControlvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterControlvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitControlvariable(this);
		}
	}

	[RuleVersion(0)]
	public ControlvariableContext controlvariable() {
		ControlvariableContext _localctx = new ControlvariableContext(Context, State);
		EnterRule(_localctx, 108, RULE_controlvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialvalueContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public InitialvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInitialvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInitialvalue(this);
		}
	}

	[RuleVersion(0)]
	public InitialvalueContext initialvalue() {
		InitialvalueContext _localctx = new InitialvalueContext(Context, State);
		EnterRule(_localctx, 110, RULE_initialvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLimit(this);
		}
	}

	[RuleVersion(0)]
	public LimitContext limit() {
		LimitContext _localctx = new LimitContext(Context, State);
		EnterRule(_localctx, 112, RULE_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 114, RULE_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public NextstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextstatement(this);
		}
	}

	[RuleVersion(0)]
	public NextstatementContext nextstatement() {
		NextstatementContext _localctx = new NextstatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_nextstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(T__26);
			State = 474; controlvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		public PrintlistContext printlist() {
			return GetRuleContext<PrintlistContext>(0);
		}
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_printstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(T__27);
			State = 478;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__28) | (1L << DIGIT) | (1L << LETTER) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << COMMA) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << SEMICOLON))) != 0)) {
				{
				State = 477; printlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlistContext : ParserRuleContext {
		public PrintseparatorContext[] printseparator() {
			return GetRuleContexts<PrintseparatorContext>();
		}
		public PrintseparatorContext printseparator(int i) {
			return GetRuleContext<PrintseparatorContext>(i);
		}
		public PrintitemContext[] printitem() {
			return GetRuleContexts<PrintitemContext>();
		}
		public PrintitemContext printitem(int i) {
			return GetRuleContext<PrintitemContext>(i);
		}
		public PrintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintlist(this);
		}
	}

	[RuleVersion(0)]
	public PrintlistContext printlist() {
		PrintlistContext _localctx = new PrintlistContext(Context, State);
		EnterRule(_localctx, 120, RULE_printlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 481;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__28) | (1L << DIGIT) | (1L << LETTER) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP))) != 0)) {
						{
						State = 480; printitem();
						}
					}

					State = 483; printseparator();
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 489; printitem();
				}
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__28) | (1L << DIGIT) | (1L << LETTER) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintitemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabcallContext tabcall() {
			return GetRuleContext<TabcallContext>(0);
		}
		public PrintitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintitem(this);
		}
	}

	[RuleVersion(0)]
	public PrintitemContext printitem() {
		PrintitemContext _localctx = new PrintitemContext(Context, State);
		EnterRule(_localctx, 122, RULE_printitem);
		try {
			State = 496;
			switch (TokenStream.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__14:
			case DIGIT:
			case LETTER:
			case QUOTATIONMARK:
			case LEFTPARENTHESIS:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494; expression();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; tabcall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabcallContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public TabcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabcall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTabcall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTabcall(this);
		}
	}

	[RuleVersion(0)]
	public TabcallContext tabcall() {
		TabcallContext _localctx = new TabcallContext(Context, State);
		EnterRule(_localctx, 124, RULE_tabcall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; Match(T__28);
			State = 499; Match(LEFTPARENTHESIS);
			State = 500; numericexpression();
			State = 501; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintseparatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public PrintseparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printseparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintseparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintseparator(this);
		}
	}

	[RuleVersion(0)]
	public PrintseparatorContext printseparator() {
		PrintseparatorContext _localctx = new PrintseparatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_printseparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			_la = TokenStream.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public InputstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputstatement(this);
		}
	}

	[RuleVersion(0)]
	public InputstatementContext inputstatement() {
		InputstatementContext _localctx = new InputstatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_inputstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(T__29);
			State = 506; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariablelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariablelist(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 130, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; variable();
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 509; Match(COMMA);
				State = 510; variable();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputpromptContext : ParserRuleContext {
		public InputpromptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputprompt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputprompt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputprompt(this);
		}
	}

	[RuleVersion(0)]
	public InputpromptContext inputprompt() {
		InputpromptContext _localctx = new InputpromptContext(Context, State);
		EnterRule(_localctx, 132, RULE_inputprompt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputreplyContext : ParserRuleContext {
		public InputlistContext inputlist() {
			return GetRuleContext<InputlistContext>(0);
		}
		public InputreplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputreply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputreply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputreply(this);
		}
	}

	[RuleVersion(0)]
	public InputreplyContext inputreply() {
		InputreplyContext _localctx = new InputreplyContext(Context, State);
		EnterRule(_localctx, 134, RULE_inputreply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; inputlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputlistContext : ParserRuleContext {
		public PaddeddatumContext[] paddeddatum() {
			return GetRuleContexts<PaddeddatumContext>();
		}
		public PaddeddatumContext paddeddatum(int i) {
			return GetRuleContext<PaddeddatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public InputlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputlist(this);
		}
	}

	[RuleVersion(0)]
	public InputlistContext inputlist() {
		InputlistContext _localctx = new InputlistContext(Context, State);
		EnterRule(_localctx, 136, RULE_inputlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; paddeddatum();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 521; Match(COMMA);
				State = 522; paddeddatum();
				}
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PaddeddatumContext : ParserRuleContext {
		public DatumContext datum() {
			return GetRuleContext<DatumContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public PaddeddatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paddeddatum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPaddeddatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPaddeddatum(this);
		}
	}

	[RuleVersion(0)]
	public PaddeddatumContext paddeddatum() {
		PaddeddatumContext _localctx = new PaddeddatumContext(Context, State);
		EnterRule(_localctx, 138, RULE_paddeddatum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 528; Match(SPACE);
				}
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 534; datum();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 535; Match(SPACE);
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		public QuotedstringContext quotedstring() {
			return GetRuleContext<QuotedstringContext>(0);
		}
		public UnquotedstringContext unquotedstring() {
			return GetRuleContext<UnquotedstringContext>(0);
		}
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 140, RULE_datum);
		try {
			State = 543;
			switch (TokenStream.La(1)) {
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541; quotedstring();
				}
				break;
			case DIGIT:
			case LETTER:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542; unquotedstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReadstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReadstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReadstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReadstatementContext readstatement() {
		ReadstatementContext _localctx = new ReadstatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_readstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(T__31);
			State = 546; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestatementContext : ParserRuleContext {
		public RestorestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRestorestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRestorestatement(this);
		}
	}

	[RuleVersion(0)]
	public RestorestatementContext restorestatement() {
		RestorestatementContext _localctx = new RestorestatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_restorestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastatementContext : ParserRuleContext {
		public DatalistContext datalist() {
			return GetRuleContext<DatalistContext>(0);
		}
		public DatastatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatastatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatastatement(this);
		}
	}

	[RuleVersion(0)]
	public DatastatementContext datastatement() {
		DatastatementContext _localctx = new DatastatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_datastatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(T__33);
			State = 551; datalist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatalistContext : ParserRuleContext {
		public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DatalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datalist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatalist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatalist(this);
		}
	}

	[RuleVersion(0)]
	public DatalistContext datalist() {
		DatalistContext _localctx = new DatalistContext(Context, State);
		EnterRule(_localctx, 148, RULE_datalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; datum();
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 554; Match(COMMA);
				State = 555; datum();
				}
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionstatementContext : ParserRuleContext {
		public ArraydeclarationContext[] arraydeclaration() {
			return GetRuleContexts<ArraydeclarationContext>();
		}
		public ArraydeclarationContext arraydeclaration(int i) {
			return GetRuleContext<ArraydeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DimensionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDimensionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDimensionstatement(this);
		}
	}

	[RuleVersion(0)]
	public DimensionstatementContext dimensionstatement() {
		DimensionstatementContext _localctx = new DimensionstatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_dimensionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(T__34);
			State = 562; arraydeclaration();
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 563; Match(COMMA);
				State = 564; arraydeclaration();
				}
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public BoundsContext bounds() {
			return GetRuleContext<BoundsContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArraydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArraydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 152, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; numericarrayname();
			State = 571; Match(LEFTPARENTHESIS);
			State = 572; bounds();
			State = 573; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsContext : ParserRuleContext {
		public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public BoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitBounds(this);
		}
	}

	[RuleVersion(0)]
	public BoundsContext bounds() {
		BoundsContext _localctx = new BoundsContext(Context, State);
		EnterRule(_localctx, 154, RULE_bounds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; integer();
			State = 578;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 576; Match(COMMA);
				State = 577; integer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstatementContext : ParserRuleContext {
		public RemarkstringContext remarkstring() {
			return GetRuleContext<RemarkstringContext>(0);
		}
		public RemarkstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstatement(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstatementContext remarkstatement() {
		RemarkstatementContext _localctx = new RemarkstatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_remarkstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580; Match(T__35);
			State = 581; remarkstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizestatementContext : ParserRuleContext {
		public RandomizestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRandomizestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRandomizestatement(this);
		}
	}

	[RuleVersion(0)]
	public RandomizestatementContext randomizestatement() {
		RandomizestatementContext _localctx = new RandomizestatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_randomizestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringcharacterContext : ParserRuleContext {
		public ITerminalNode QUOTATIONMARK() { return GetToken(BASICParser.QUOTATIONMARK, 0); }
		public QuotedstringcharacterContext quotedstringcharacter() {
			return GetRuleContext<QuotedstringcharacterContext>(0);
		}
		public StringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public StringcharacterContext stringcharacter() {
		StringcharacterContext _localctx = new StringcharacterContext(Context, State);
		EnterRule(_localctx, 160, RULE_stringcharacter);
		try {
			State = 587;
			switch (TokenStream.La(1)) {
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; Match(QUOTATIONMARK);
				}
				break;
			case DIGIT:
			case LETTER:
			case SPACE:
			case EXCLAMATIONMARK:
			case NUMBERSIGN:
			case DOLLARSIGN:
			case PERCENTSIGN:
			case AMPERSAND:
			case APOSTROPHE:
			case LEFTPARENTHESIS:
			case RIGHTPARENTHESIS:
			case ASTERISK:
			case PLUSSIGN:
			case COMMA:
			case MINUSSIGN:
			case FULLSTOP:
			case SOLIDUS:
			case COLON:
			case SEMICOLON:
			case LESSTHANSIGN:
			case EQUALSSIGN:
			case GREATERTHANSIGN:
			case QUESTIONMARK:
			case CIRCUMFLEXACCENT:
			case UNDERLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586; quotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(BASICParser.EXCLAMATIONMARK, 0); }
		public ITerminalNode NUMBERSIGN() { return GetToken(BASICParser.NUMBERSIGN, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public ITerminalNode PERCENTSIGN() { return GetToken(BASICParser.PERCENTSIGN, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(BASICParser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(BASICParser.APOSTROPHE, 0); }
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public ITerminalNode COLON() { return GetToken(BASICParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode QUESTIONMARK() { return GetToken(BASICParser.QUESTIONMARK, 0); }
		public ITerminalNode CIRCUMFLEXACCENT() { return GetToken(BASICParser.CIRCUMFLEXACCENT, 0); }
		public ITerminalNode UNDERLINE() { return GetToken(BASICParser.UNDERLINE, 0); }
		public UnquotedstringcharacterContext unquotedstringcharacter() {
			return GetRuleContext<UnquotedstringcharacterContext>(0);
		}
		public QuotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringcharacterContext quotedstringcharacter() {
		QuotedstringcharacterContext _localctx = new QuotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 162, RULE_quotedstringcharacter);
		try {
			State = 609;
			switch (TokenStream.La(1)) {
			case EXCLAMATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589; Match(EXCLAMATIONMARK);
				}
				break;
			case NUMBERSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; Match(NUMBERSIGN);
				}
				break;
			case DOLLARSIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 591; Match(DOLLARSIGN);
				}
				break;
			case PERCENTSIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 592; Match(PERCENTSIGN);
				}
				break;
			case AMPERSAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 593; Match(AMPERSAND);
				}
				break;
			case APOSTROPHE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 594; Match(APOSTROPHE);
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 595; Match(LEFTPARENTHESIS);
				}
				break;
			case RIGHTPARENTHESIS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 596; Match(RIGHTPARENTHESIS);
				}
				break;
			case ASTERISK:
				EnterOuterAlt(_localctx, 9);
				{
				State = 597; Match(ASTERISK);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 10);
				{
				State = 598; Match(COMMA);
				}
				break;
			case SOLIDUS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 599; Match(SOLIDUS);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 600; Match(COLON);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 13);
				{
				State = 601; Match(SEMICOLON);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 602; Match(LESSTHANSIGN);
				}
				break;
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 15);
				{
				State = 603; Match(EQUALSSIGN);
				}
				break;
			case GREATERTHANSIGN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 604; Match(GREATERTHANSIGN);
				}
				break;
			case QUESTIONMARK:
				EnterOuterAlt(_localctx, 17);
				{
				State = 605; Match(QUESTIONMARK);
				}
				break;
			case CIRCUMFLEXACCENT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 606; Match(CIRCUMFLEXACCENT);
				}
				break;
			case UNDERLINE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 607; Match(UNDERLINE);
				}
				break;
			case DIGIT:
			case LETTER:
			case SPACE:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 20);
				{
				State = 608; unquotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(BASICParser.SPACE, 0); }
		public PlainstringcharacterContext plainstringcharacter() {
			return GetRuleContext<PlainstringcharacterContext>(0);
		}
		public UnquotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringcharacterContext unquotedstringcharacter() {
		UnquotedstringcharacterContext _localctx = new UnquotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 164, RULE_unquotedstringcharacter);
		try {
			State = 613;
			switch (TokenStream.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611; Match(SPACE);
				}
				break;
			case DIGIT:
			case LETTER:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 612; plainstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainstringcharacterContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public PlainstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPlainstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPlainstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public PlainstringcharacterContext plainstringcharacter() {
		PlainstringcharacterContext _localctx = new PlainstringcharacterContext(Context, State);
		EnterRule(_localctx, 166, RULE_plainstringcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIGIT) | (1L << LETTER) | (1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstringContext : ParserRuleContext {
		public StringcharacterContext[] stringcharacter() {
			return GetRuleContexts<StringcharacterContext>();
		}
		public StringcharacterContext stringcharacter(int i) {
			return GetRuleContext<StringcharacterContext>(i);
		}
		public RemarkstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstring(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstringContext remarkstring() {
		RemarkstringContext _localctx = new RemarkstringContext(Context, State);
		EnterRule(_localctx, 168, RULE_remarkstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 617; stringcharacter();
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (DIGIT - 38)) | (1L << (LETTER - 38)) | (1L << (SPACE - 38)) | (1L << (EXCLAMATIONMARK - 38)) | (1L << (QUOTATIONMARK - 38)) | (1L << (NUMBERSIGN - 38)) | (1L << (DOLLARSIGN - 38)) | (1L << (PERCENTSIGN - 38)) | (1L << (AMPERSAND - 38)) | (1L << (APOSTROPHE - 38)) | (1L << (LEFTPARENTHESIS - 38)) | (1L << (RIGHTPARENTHESIS - 38)) | (1L << (ASTERISK - 38)) | (1L << (PLUSSIGN - 38)) | (1L << (COMMA - 38)) | (1L << (MINUSSIGN - 38)) | (1L << (FULLSTOP - 38)) | (1L << (SOLIDUS - 38)) | (1L << (COLON - 38)) | (1L << (SEMICOLON - 38)) | (1L << (LESSTHANSIGN - 38)) | (1L << (EQUALSSIGN - 38)) | (1L << (GREATERTHANSIGN - 38)) | (1L << (QUESTIONMARK - 38)) | (1L << (CIRCUMFLEXACCENT - 38)) | (1L << (UNDERLINE - 38)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringContext : ParserRuleContext {
		public ITerminalNode[] QUOTATIONMARK() { return GetTokens(BASICParser.QUOTATIONMARK); }
		public ITerminalNode QUOTATIONMARK(int i) {
			return GetToken(BASICParser.QUOTATIONMARK, i);
		}
		public QuotedstringcharacterContext[] quotedstringcharacter() {
			return GetRuleContexts<QuotedstringcharacterContext>();
		}
		public QuotedstringcharacterContext quotedstringcharacter(int i) {
			return GetRuleContext<QuotedstringcharacterContext>(i);
		}
		public QuotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstring(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringContext quotedstring() {
		QuotedstringContext _localctx = new QuotedstringContext(Context, State);
		EnterRule(_localctx, 170, RULE_quotedstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(QUOTATIONMARK);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (DIGIT - 38)) | (1L << (LETTER - 38)) | (1L << (SPACE - 38)) | (1L << (EXCLAMATIONMARK - 38)) | (1L << (NUMBERSIGN - 38)) | (1L << (DOLLARSIGN - 38)) | (1L << (PERCENTSIGN - 38)) | (1L << (AMPERSAND - 38)) | (1L << (APOSTROPHE - 38)) | (1L << (LEFTPARENTHESIS - 38)) | (1L << (RIGHTPARENTHESIS - 38)) | (1L << (ASTERISK - 38)) | (1L << (PLUSSIGN - 38)) | (1L << (COMMA - 38)) | (1L << (MINUSSIGN - 38)) | (1L << (FULLSTOP - 38)) | (1L << (SOLIDUS - 38)) | (1L << (COLON - 38)) | (1L << (SEMICOLON - 38)) | (1L << (LESSTHANSIGN - 38)) | (1L << (EQUALSSIGN - 38)) | (1L << (GREATERTHANSIGN - 38)) | (1L << (QUESTIONMARK - 38)) | (1L << (CIRCUMFLEXACCENT - 38)) | (1L << (UNDERLINE - 38)))) != 0)) {
				{
				{
				State = 623; quotedstringcharacter();
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 629; Match(QUOTATIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringContext : ParserRuleContext {
		public PlainstringcharacterContext[] plainstringcharacter() {
			return GetRuleContexts<PlainstringcharacterContext>();
		}
		public PlainstringcharacterContext plainstringcharacter(int i) {
			return GetRuleContext<PlainstringcharacterContext>(i);
		}
		public UnquotedstringcharacterContext[] unquotedstringcharacter() {
			return GetRuleContexts<UnquotedstringcharacterContext>();
		}
		public UnquotedstringcharacterContext unquotedstringcharacter(int i) {
			return GetRuleContext<UnquotedstringcharacterContext>(i);
		}
		public UnquotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstring(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringContext unquotedstring() {
		UnquotedstringContext _localctx = new UnquotedstringContext(Context, State);
		EnterRule(_localctx, 172, RULE_unquotedstring);
		try {
			int _alt;
			State = 641;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 631; plainstringcharacter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 632; plainstringcharacter();
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 633; unquotedstringcharacter();
						}
						} 
					}
					State = 638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				State = 639; plainstringcharacter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x42\x286\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xB5\n\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xCE\n\x6\x3\a\x5\a\xD1\n"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x5\t\xD9\n\t\x3\n\x3\n\x5\n\xDD\n\n\x3"+
		"\n\x5\n\xE0\n\n\x3\n\x5\n\xE3\n\n\x3\v\x3\v\a\v\xE7\n\v\f\v\xE\v\xEA\v"+
		"\v\x3\f\x3\f\x3\f\a\f\xEF\n\f\f\f\xE\f\xF2\v\f\x3\r\x3\r\x5\r\xF6\n\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xFE\n\xF\x3\x10\x3\x10\x5\x10"+
		"\x102\n\x10\x3\x11\x3\x11\x5\x11\x106\n\x11\x3\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x111\n\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x11A\n\x16\x3\x17\x5\x17\x11D"+
		"\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x123\n\x17\f\x17\xE\x17\x126"+
		"\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x12C\n\x18\f\x18\xE\x18\x12F"+
		"\v\x18\x3\x19\x3\x19\x3\x19\a\x19\x134\n\x19\f\x19\xE\x19\x137\v\x19\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x142"+
		"\n\x1B\x3\x1C\x3\x1C\x5\x1C\x146\n\x1C\x3\x1D\x3\x1D\x5\x1D\x14A\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x5 \x154\n \x3!\x3"+
		"!\x3\"\x3\"\x3\"\x5\"\x15B\n\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$"+
		"\x3$\x3%\x3%\x3&\x3&\x5&\x16B\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3("+
		"\x3(\x3(\x3)\x3)\a)\x179\n)\f)\xE)\x17C\v)\x3)\x3)\x3)\x3*\x3*\x3*\x3"+
		"*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x18E\n+\x3,\x3,\x3,\x3,\x3,"+
		"\x5,\x195\n,\x3-\x3-\x5-\x199\n-\x3.\x3.\x3.\x3/\x3/\x3/\x3\x30\x3\x30"+
		"\x3\x30\x3\x31\x3\x31\a\x31\x1A6\n\x31\f\x31\xE\x31\x1A9\v\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\a\x33\x1B4\n"+
		"\x33\f\x33\xE\x33\x1B7\v\x33\x3\x33\x3\x33\x3\x33\x3\x33\a\x33\x1BD\n"+
		"\x33\f\x33\xE\x33\x1C0\v\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x1D2\n\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3<\x3"+
		"<\x3<\x3=\x3=\x5=\x1E1\n=\x3>\x5>\x1E4\n>\x3>\a>\x1E7\n>\f>\xE>\x1EA\v"+
		">\x3>\x6>\x1ED\n>\r>\xE>\x1EE\x3?\x3?\x5?\x1F3\n?\x3@\x3@\x3@\x3@\x3@"+
		"\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\a\x43\x202\n"+
		"\x43\f\x43\xE\x43\x205\v\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3\x46\a\x46\x20E\n\x46\f\x46\xE\x46\x211\v\x46\x3G\aG\x214\nG\fG\xE"+
		"G\x217\vG\x3G\x3G\aG\x21B\nG\fG\xEG\x21E\vG\x3H\x3H\x5H\x222\nH\x3I\x3"+
		"I\x3I\x3J\x3J\x3K\x3K\x3K\x3L\x3L\x3L\aL\x22F\nL\fL\xEL\x232\vL\x3M\x3"+
		"M\x3M\x3M\aM\x238\nM\fM\xEM\x23B\vM\x3N\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x5"+
		"O\x245\nO\x3P\x3P\x3P\x3Q\x3Q\x3R\x3R\x5R\x24E\nR\x3S\x3S\x3S\x3S\x3S"+
		"\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x264"+
		"\nS\x3T\x3T\x5T\x268\nT\x3U\x3U\x3V\x6V\x26D\nV\rV\xEV\x26E\x3W\x3W\a"+
		"W\x273\nW\fW\xEW\x276\vW\x3W\x3W\x3X\x3X\x3X\aX\x27D\nX\fX\xEX\x280\v"+
		"X\x3X\x3X\x5X\x284\nX\x3X\x2\x2Y\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18"+
		"\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\"+
		"^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94"+
		"\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\x2\a\x4\x2\x36\x36"+
		"\x38\x38\x4\x2\x35\x35::\x3\x2\x5\xF\x4\x2\x37\x37<<\x5\x2()\x36\x36\x38"+
		"\x39\x288\x2\xB4\x3\x2\x2\x2\x4\xB6\x3\x2\x2\x2\x6\xB8\x3\x2\x2\x2\b\xBB"+
		"\x3\x2\x2\x2\n\xCD\x3\x2\x2\x2\f\xD0\x3\x2\x2\x2\xE\xD4\x3\x2\x2\x2\x10"+
		"\xD6\x3\x2\x2\x2\x12\xE2\x3\x2\x2\x2\x14\xE4\x3\x2\x2\x2\x16\xEB\x3\x2"+
		"\x2\x2\x18\xF3\x3\x2\x2\x2\x1A\xF9\x3\x2\x2\x2\x1C\xFD\x3\x2\x2\x2\x1E"+
		"\x101\x3\x2\x2\x2 \x103\x3\x2\x2\x2\"\x107\x3\x2\x2\x2$\x10A\x3\x2\x2"+
		"\x2&\x10C\x3\x2\x2\x2(\x114\x3\x2\x2\x2*\x119\x3\x2\x2\x2,\x11C\x3\x2"+
		"\x2\x2.\x127\x3\x2\x2\x2\x30\x130\x3\x2\x2\x2\x32\x138\x3\x2\x2\x2\x34"+
		"\x141\x3\x2\x2\x2\x36\x143\x3\x2\x2\x2\x38\x149\x3\x2\x2\x2:\x14B\x3\x2"+
		"\x2\x2<\x14F\x3\x2\x2\x2>\x153\x3\x2\x2\x2@\x155\x3\x2\x2\x2\x42\x157"+
		"\x3\x2\x2\x2\x44\x15F\x3\x2\x2\x2\x46\x162\x3\x2\x2\x2H\x166\x3\x2\x2"+
		"\x2J\x16A\x3\x2\x2\x2L\x16C\x3\x2\x2\x2N\x171\x3\x2\x2\x2P\x176\x3\x2"+
		"\x2\x2R\x180\x3\x2\x2\x2T\x18D\x3\x2\x2\x2V\x194\x3\x2\x2\x2X\x198\x3"+
		"\x2\x2\x2Z\x19A\x3\x2\x2\x2\\\x19D\x3\x2\x2\x2^\x1A0\x3\x2\x2\x2`\x1A3"+
		"\x3\x2\x2\x2\x62\x1AD\x3\x2\x2\x2\x64\x1AF\x3\x2\x2\x2\x66\x1C1\x3\x2"+
		"\x2\x2h\x1C3\x3\x2\x2\x2j\x1C6\x3\x2\x2\x2l\x1C9\x3\x2\x2\x2n\x1D3\x3"+
		"\x2\x2\x2p\x1D5\x3\x2\x2\x2r\x1D7\x3\x2\x2\x2t\x1D9\x3\x2\x2\x2v\x1DB"+
		"\x3\x2\x2\x2x\x1DE\x3\x2\x2\x2z\x1E8\x3\x2\x2\x2|\x1F2\x3\x2\x2\x2~\x1F4"+
		"\x3\x2\x2\x2\x80\x1F9\x3\x2\x2\x2\x82\x1FB\x3\x2\x2\x2\x84\x1FE\x3\x2"+
		"\x2\x2\x86\x206\x3\x2\x2\x2\x88\x208\x3\x2\x2\x2\x8A\x20A\x3\x2\x2\x2"+
		"\x8C\x215\x3\x2\x2\x2\x8E\x221\x3\x2\x2\x2\x90\x223\x3\x2\x2\x2\x92\x226"+
		"\x3\x2\x2\x2\x94\x228\x3\x2\x2\x2\x96\x22B\x3\x2\x2\x2\x98\x233\x3\x2"+
		"\x2\x2\x9A\x23C\x3\x2\x2\x2\x9C\x241\x3\x2\x2\x2\x9E\x246\x3\x2\x2\x2"+
		"\xA0\x249\x3\x2\x2\x2\xA2\x24D\x3\x2\x2\x2\xA4\x263\x3\x2\x2\x2\xA6\x267"+
		"\x3\x2\x2\x2\xA8\x269\x3\x2\x2\x2\xAA\x26C\x3\x2\x2\x2\xAC\x270\x3\x2"+
		"\x2\x2\xAE\x283\x3\x2\x2\x2\xB0\xB1\x5\x4\x3\x2\xB1\xB2\x5\n\x6\x2\xB2"+
		"\xB5\x3\x2\x2\x2\xB3\xB5\x5\x6\x4\x2\xB4\xB0\x3\x2\x2\x2\xB4\xB3\x3\x2"+
		"\x2\x2\xB5\x3\x3\x2\x2\x2\xB6\xB7\x5\x14\v\x2\xB7\x5\x3\x2\x2\x2\xB8\xB9"+
		"\x5\x4\x3\x2\xB9\xBA\x5\b\x5\x2\xBA\a\x3\x2\x2\x2\xBB\xBC\a\x3\x2\x2\xBC"+
		"\t\x3\x2\x2\x2\xBD\xCE\x5\x94K\x2\xBE\xCE\x5\x42\"\x2\xBF\xCE\x5\x98M"+
		"\x2\xC0\xCE\x5`\x31\x2\xC1\xCE\x5P)\x2\xC2\xCE\x5R*\x2\xC3\xCE\x5\x82"+
		"\x42\x2\xC4\xCE\x5J&\x2\xC5\xCE\x5\x64\x33\x2\xC6\xCE\x5x=\x2\xC7\xCE"+
		"\x5\xA0Q\x2\xC8\xCE\x5\x90I\x2\xC9\xCE\x5\x9EP\x2\xCA\xCE\x5\x92J\x2\xCB"+
		"\xCE\x5\x62\x32\x2\xCC\xCE\x5\x66\x34\x2\xCD\xBD\x3\x2\x2\x2\xCD\xBE\x3"+
		"\x2\x2\x2\xCD\xBF\x3\x2\x2\x2\xCD\xC0\x3\x2\x2\x2\xCD\xC1\x3\x2\x2\x2"+
		"\xCD\xC2\x3\x2\x2\x2\xCD\xC3\x3\x2\x2\x2\xCD\xC4\x3\x2\x2\x2\xCD\xC5\x3"+
		"\x2\x2\x2\xCD\xC6\x3\x2\x2\x2\xCD\xC7\x3\x2\x2\x2\xCD\xC8\x3\x2\x2\x2"+
		"\xCD\xC9\x3\x2\x2\x2\xCD\xCA\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCC\x3"+
		"\x2\x2\x2\xCE\v\x3\x2\x2\x2\xCF\xD1\x5\xE\b\x2\xD0\xCF\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x5\x10\t\x2\xD3\r\x3\x2\x2"+
		"\x2\xD4\xD5\t\x2\x2\x2\xD5\xF\x3\x2\x2\x2\xD6\xD8\x5\x12\n\x2\xD7\xD9"+
		"\x5\x18\r\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\x11\x3\x2\x2"+
		"\x2\xDA\xDC\x5\x14\v\x2\xDB\xDD\a\x39\x2\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD"+
		"\x3\x2\x2\x2\xDD\xE3\x3\x2\x2\x2\xDE\xE0\x5\x14\v\x2\xDF\xDE\x3\x2\x2"+
		"\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\x5\x16\f\x2\xE2\xDA"+
		"\x3\x2\x2\x2\xE2\xDF\x3\x2\x2\x2\xE3\x13\x3\x2\x2\x2\xE4\xE8\a(\x2\x2"+
		"\xE5\xE7\a(\x2\x2\xE6\xE5\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2\xE8\xE6\x3\x2"+
		"\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\x15\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEB"+
		"\xEC\a\x39\x2\x2\xEC\xF0\a(\x2\x2\xED\xEF\a(\x2\x2\xEE\xED\x3\x2\x2\x2"+
		"\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\x17\x3"+
		"\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF5\a\x4\x2\x2\xF4\xF6\x5\xE\b\x2\xF5"+
		"\xF4\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x5\x14"+
		"\v\x2\xF8\x19\x3\x2\x2\x2\xF9\xFA\x5\xACW\x2\xFA\x1B\x3\x2\x2\x2\xFB\xFE"+
		"\x5\x1E\x10\x2\xFC\xFE\x5(\x15\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFC\x3\x2\x2"+
		"\x2\xFE\x1D\x3\x2\x2\x2\xFF\x102\x5 \x11\x2\x100\x102\x5\"\x12\x2\x101"+
		"\xFF\x3\x2\x2\x2\x101\x100\x3\x2\x2\x2\x102\x1F\x3\x2\x2\x2\x103\x105"+
		"\a)\x2\x2\x104\x106\a(\x2\x2\x105\x104\x3\x2\x2\x2\x105\x106\x3\x2\x2"+
		"\x2\x106!\x3\x2\x2\x2\x107\x108\x5$\x13\x2\x108\x109\x5&\x14\x2\x109#"+
		"\x3\x2\x2\x2\x10A\x10B\a)\x2\x2\x10B%\x3\x2\x2\x2\x10C\x10D\a\x33\x2\x2"+
		"\x10D\x110\x5,\x17\x2\x10E\x10F\a\x37\x2\x2\x10F\x111\x5,\x17\x2\x110"+
		"\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113"+
		"\a\x34\x2\x2\x113\'\x3\x2\x2\x2\x114\x115\a)\x2\x2\x115\x116\a/\x2\x2"+
		"\x116)\x3\x2\x2\x2\x117\x11A\x5,\x17\x2\x118\x11A\x5> \x2\x119\x117\x3"+
		"\x2\x2\x2\x119\x118\x3\x2\x2\x2\x11A+\x3\x2\x2\x2\x11B\x11D\x5\xE\b\x2"+
		"\x11C\x11B\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E"+
		"\x124\x5.\x18\x2\x11F\x120\x5\xE\b\x2\x120\x121\x5.\x18\x2\x121\x123\x3"+
		"\x2\x2\x2\x122\x11F\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2"+
		"\x2\x2\x124\x125\x3\x2\x2\x2\x125-\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127"+
		"\x12D\x5\x30\x19\x2\x128\x129\x5\x32\x1A\x2\x129\x12A\x5\x30\x19\x2\x12A"+
		"\x12C\x3\x2\x2\x2\x12B\x128\x3\x2\x2\x2\x12C\x12F\x3\x2\x2\x2\x12D\x12B"+
		"\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E/\x3\x2\x2\x2\x12F\x12D\x3\x2\x2"+
		"\x2\x130\x135\x5\x34\x1B\x2\x131\x132\a\x41\x2\x2\x132\x134\x5\x34\x1B"+
		"\x2\x133\x131\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2"+
		"\x135\x136\x3\x2\x2\x2\x136\x31\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x138"+
		"\x139\t\x3\x2\x2\x139\x33\x3\x2\x2\x2\x13A\x142\x5\x1E\x10\x2\x13B\x142"+
		"\x5\x10\t\x2\x13C\x142\x5\x36\x1C\x2\x13D\x13E\a\x33\x2\x2\x13E\x13F\x5"+
		",\x17\x2\x13F\x140\a\x34\x2\x2\x140\x142\x3\x2\x2\x2\x141\x13A\x3\x2\x2"+
		"\x2\x141\x13B\x3\x2\x2\x2\x141\x13C\x3\x2\x2\x2\x141\x13D\x3\x2\x2\x2"+
		"\x142\x35\x3\x2\x2\x2\x143\x145\x5\x38\x1D\x2\x144\x146\x5:\x1E\x2\x145"+
		"\x144\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x37\x3\x2\x2\x2\x147\x14A"+
		"\x5\x44#\x2\x148\x14A\x5@!\x2\x149\x147\x3\x2\x2\x2\x149\x148\x3\x2\x2"+
		"\x2\x14A\x39\x3\x2\x2\x2\x14B\x14C\a\x33\x2\x2\x14C\x14D\x5<\x1F\x2\x14D"+
		"\x14E\a\x34\x2\x2\x14E;\x3\x2\x2\x2\x14F\x150\x5,\x17\x2\x150=\x3\x2\x2"+
		"\x2\x151\x154\x5(\x15\x2\x152\x154\x5\x1A\xE\x2\x153\x151\x3\x2\x2\x2"+
		"\x153\x152\x3\x2\x2\x2\x154?\x3\x2\x2\x2\x155\x156\t\x4\x2\x2\x156\x41"+
		"\x3\x2\x2\x2\x157\x158\a\x10\x2\x2\x158\x15A\x5\x44#\x2\x159\x15B\x5\x46"+
		"$\x2\x15A\x159\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2"+
		"\x15C\x15D\a>\x2\x2\x15D\x15E\x5,\x17\x2\x15E\x43\x3\x2\x2\x2\x15F\x160"+
		"\a\x11\x2\x2\x160\x161\a)\x2\x2\x161\x45\x3\x2\x2\x2\x162\x163\a\x33\x2"+
		"\x2\x163\x164\x5H%\x2\x164\x165\a\x34\x2\x2\x165G\x3\x2\x2\x2\x166\x167"+
		"\x5 \x11\x2\x167I\x3\x2\x2\x2\x168\x16B\x5L\'\x2\x169\x16B\x5N(\x2\x16A"+
		"\x168\x3\x2\x2\x2\x16A\x169\x3\x2\x2\x2\x16BK\x3\x2\x2\x2\x16C\x16D\a"+
		"\x12\x2\x2\x16D\x16E\x5\x1E\x10\x2\x16E\x16F\a>\x2\x2\x16F\x170\x5,\x17"+
		"\x2\x170M\x3\x2\x2\x2\x171\x172\a\x12\x2\x2\x172\x173\x5(\x15\x2\x173"+
		"\x174\a>\x2\x2\x174\x175\x5> \x2\x175O\x3\x2\x2\x2\x176\x17A\a\x13\x2"+
		"\x2\x177\x179\a+\x2\x2\x178\x177\x3\x2\x2\x2\x179\x17C\x3\x2\x2\x2\x17A"+
		"\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17D\x3\x2\x2\x2\x17C\x17A"+
		"\x3\x2\x2\x2\x17D\x17E\a\x14\x2\x2\x17E\x17F\x5\x4\x3\x2\x17FQ\x3\x2\x2"+
		"\x2\x180\x181\a\x15\x2\x2\x181\x182\x5T+\x2\x182\x183\a\x16\x2\x2\x183"+
		"\x184\x5\x4\x3\x2\x184S\x3\x2\x2\x2\x185\x186\x5,\x17\x2\x186\x187\x5"+
		"V,\x2\x187\x188\x5,\x17\x2\x188\x18E\x3\x2\x2\x2\x189\x18A\x5> \x2\x18A"+
		"\x18B\x5X-\x2\x18B\x18C\x5> \x2\x18C\x18E\x3\x2\x2\x2\x18D\x185\x3\x2"+
		"\x2\x2\x18D\x189\x3\x2\x2\x2\x18EU\x3\x2\x2\x2\x18F\x195\x5X-\x2\x190"+
		"\x195\a=\x2\x2\x191\x195\a?\x2\x2\x192\x195\x5Z.\x2\x193\x195\x5\\/\x2"+
		"\x194\x18F\x3\x2\x2\x2\x194\x190\x3\x2\x2\x2\x194\x191\x3\x2\x2\x2\x194"+
		"\x192\x3\x2\x2\x2\x194\x193\x3\x2\x2\x2\x195W\x3\x2\x2\x2\x196\x199\a"+
		">\x2\x2\x197\x199\x5^\x30\x2\x198\x196\x3\x2\x2\x2\x198\x197\x3\x2\x2"+
		"\x2\x199Y\x3\x2\x2\x2\x19A\x19B\a?\x2\x2\x19B\x19C\a>\x2\x2\x19C[\x3\x2"+
		"\x2\x2\x19D\x19E\a=\x2\x2\x19E\x19F\a>\x2\x2\x19F]\x3\x2\x2\x2\x1A0\x1A1"+
		"\a=\x2\x2\x1A1\x1A2\a?\x2\x2\x1A2_\x3\x2\x2\x2\x1A3\x1A7\a\x13\x2\x2\x1A4"+
		"\x1A6\a+\x2\x2\x1A5\x1A4\x3\x2\x2\x2\x1A6\x1A9\x3\x2\x2\x2\x1A7\x1A5\x3"+
		"\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1AA\x3\x2\x2\x2\x1A9\x1A7\x3\x2"+
		"\x2\x2\x1AA\x1AB\a\x17\x2\x2\x1AB\x1AC\x5\x4\x3\x2\x1AC\x61\x3\x2\x2\x2"+
		"\x1AD\x1AE\a\x18\x2\x2\x1AE\x63\x3\x2\x2\x2\x1AF\x1B0\a\x19\x2\x2\x1B0"+
		"\x1B1\x5,\x17\x2\x1B1\x1B5\a\x13\x2\x2\x1B2\x1B4\a+\x2\x2\x1B3\x1B2\x3"+
		"\x2\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2"+
		"\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8\x1B9\a\x14\x2"+
		"\x2\x1B9\x1BE\x5\x4\x3\x2\x1BA\x1BB\a\x37\x2\x2\x1BB\x1BD\x5\x4\x3\x2"+
		"\x1BC\x1BA\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE"+
		"\x1BF\x3\x2\x2\x2\x1BF\x65\x3\x2\x2\x2\x1C0\x1BE\x3\x2\x2\x2\x1C1\x1C2"+
		"\a\x1A\x2\x2\x1C2g\x3\x2\x2\x2\x1C3\x1C4\x5\x4\x3\x2\x1C4\x1C5\x5l\x37"+
		"\x2\x1C5i\x3\x2\x2\x2\x1C6\x1C7\x5\x4\x3\x2\x1C7\x1C8\x5v<\x2\x1C8k\x3"+
		"\x2\x2\x2\x1C9\x1CA\a\x1B\x2\x2\x1CA\x1CB\x5n\x38\x2\x1CB\x1CC\a>\x2\x2"+
		"\x1CC\x1CD\x5p\x39\x2\x1CD\x1CE\a\x14\x2\x2\x1CE\x1D1\x5r:\x2\x1CF\x1D0"+
		"\a\x1C\x2\x2\x1D0\x1D2\x5t;\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2"+
		"\x2\x1D2m\x3\x2\x2\x2\x1D3\x1D4\x5 \x11\x2\x1D4o\x3\x2\x2\x2\x1D5\x1D6"+
		"\x5,\x17\x2\x1D6q\x3\x2\x2\x2\x1D7\x1D8\x5,\x17\x2\x1D8s\x3\x2\x2\x2\x1D9"+
		"\x1DA\x5,\x17\x2\x1DAu\x3\x2\x2\x2\x1DB\x1DC\a\x1D\x2\x2\x1DC\x1DD\x5"+
		"n\x38\x2\x1DDw\x3\x2\x2\x2\x1DE\x1E0\a\x1E\x2\x2\x1DF\x1E1\x5z>\x2\x1E0"+
		"\x1DF\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1y\x3\x2\x2\x2\x1E2\x1E4\x5"+
		"|?\x2\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2"+
		"\x1E5\x1E7\x5\x80\x41\x2\x1E6\x1E3\x3\x2\x2\x2\x1E7\x1EA\x3\x2\x2\x2\x1E8"+
		"\x1E6\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EC\x3\x2\x2\x2\x1EA\x1E8"+
		"\x3\x2\x2\x2\x1EB\x1ED\x5|?\x2\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2"+
		"\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF{\x3\x2\x2\x2\x1F0"+
		"\x1F3\x5*\x16\x2\x1F1\x1F3\x5~@\x2\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F1\x3"+
		"\x2\x2\x2\x1F3}\x3\x2\x2\x2\x1F4\x1F5\a\x1F\x2\x2\x1F5\x1F6\a\x33\x2\x2"+
		"\x1F6\x1F7\x5,\x17\x2\x1F7\x1F8\a\x34\x2\x2\x1F8\x7F\x3\x2\x2\x2\x1F9"+
		"\x1FA\t\x5\x2\x2\x1FA\x81\x3\x2\x2\x2\x1FB\x1FC\a \x2\x2\x1FC\x1FD\x5"+
		"\x84\x43\x2\x1FD\x83\x3\x2\x2\x2\x1FE\x203\x5\x1C\xF\x2\x1FF\x200\a\x37"+
		"\x2\x2\x200\x202\x5\x1C\xF\x2\x201\x1FF\x3\x2\x2\x2\x202\x205\x3\x2\x2"+
		"\x2\x203\x201\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x85\x3\x2\x2\x2\x205"+
		"\x203\x3\x2\x2\x2\x206\x207\a!\x2\x2\x207\x87\x3\x2\x2\x2\x208\x209\x5"+
		"\x8A\x46\x2\x209\x89\x3\x2\x2\x2\x20A\x20F\x5\x8CG\x2\x20B\x20C\a\x37"+
		"\x2\x2\x20C\x20E\x5\x8CG\x2\x20D\x20B\x3\x2\x2\x2\x20E\x211\x3\x2\x2\x2"+
		"\x20F\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x8B\x3\x2\x2\x2\x211"+
		"\x20F\x3\x2\x2\x2\x212\x214\a+\x2\x2\x213\x212\x3\x2\x2\x2\x214\x217\x3"+
		"\x2\x2\x2\x215\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x218\x3\x2"+
		"\x2\x2\x217\x215\x3\x2\x2\x2\x218\x21C\x5\x8EH\x2\x219\x21B\a+\x2\x2\x21A"+
		"\x219\x3\x2\x2\x2\x21B\x21E\x3\x2\x2\x2\x21C\x21A\x3\x2\x2\x2\x21C\x21D"+
		"\x3\x2\x2\x2\x21D\x8D\x3\x2\x2\x2\x21E\x21C\x3\x2\x2\x2\x21F\x222\x5\xAC"+
		"W\x2\x220\x222\x5\xAEX\x2\x221\x21F\x3\x2\x2\x2\x221\x220\x3\x2\x2\x2"+
		"\x222\x8F\x3\x2\x2\x2\x223\x224\a\"\x2\x2\x224\x225\x5\x84\x43\x2\x225"+
		"\x91\x3\x2\x2\x2\x226\x227\a#\x2\x2\x227\x93\x3\x2\x2\x2\x228\x229\a$"+
		"\x2\x2\x229\x22A\x5\x96L\x2\x22A\x95\x3\x2\x2\x2\x22B\x230\x5\x8EH\x2"+
		"\x22C\x22D\a\x37\x2\x2\x22D\x22F\x5\x8EH\x2\x22E\x22C\x3\x2\x2\x2\x22F"+
		"\x232\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231\x97"+
		"\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x233\x234\a%\x2\x2\x234\x239\x5\x9A"+
		"N\x2\x235\x236\a\x37\x2\x2\x236\x238\x5\x9AN\x2\x237\x235\x3\x2\x2\x2"+
		"\x238\x23B\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A"+
		"\x99\x3\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23C\x23D\x5$\x13\x2\x23D\x23E"+
		"\a\x33\x2\x2\x23E\x23F\x5\x9CO\x2\x23F\x240\a\x34\x2\x2\x240\x9B\x3\x2"+
		"\x2\x2\x241\x244\x5\x14\v\x2\x242\x243\a\x37\x2\x2\x243\x245\x5\x14\v"+
		"\x2\x244\x242\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x9D\x3\x2\x2\x2\x246"+
		"\x247\a&\x2\x2\x247\x248\x5\xAAV\x2\x248\x9F\x3\x2\x2\x2\x249\x24A\a\'"+
		"\x2\x2\x24A\xA1\x3\x2\x2\x2\x24B\x24E\a-\x2\x2\x24C\x24E\x5\xA4S\x2\x24D"+
		"\x24B\x3\x2\x2\x2\x24D\x24C\x3\x2\x2\x2\x24E\xA3\x3\x2\x2\x2\x24F\x264"+
		"\a,\x2\x2\x250\x264\a.\x2\x2\x251\x264\a/\x2\x2\x252\x264\a\x30\x2\x2"+
		"\x253\x264\a\x31\x2\x2\x254\x264\a\x32\x2\x2\x255\x264\a\x33\x2\x2\x256"+
		"\x264\a\x34\x2\x2\x257\x264\a\x35\x2\x2\x258\x264\a\x37\x2\x2\x259\x264"+
		"\a:\x2\x2\x25A\x264\a;\x2\x2\x25B\x264\a<\x2\x2\x25C\x264\a=\x2\x2\x25D"+
		"\x264\a>\x2\x2\x25E\x264\a?\x2\x2\x25F\x264\a@\x2\x2\x260\x264\a\x41\x2"+
		"\x2\x261\x264\a\x42\x2\x2\x262\x264\x5\xA6T\x2\x263\x24F\x3\x2\x2\x2\x263"+
		"\x250\x3\x2\x2\x2\x263\x251\x3\x2\x2\x2\x263\x252\x3\x2\x2\x2\x263\x253"+
		"\x3\x2\x2\x2\x263\x254\x3\x2\x2\x2\x263\x255\x3\x2\x2\x2\x263\x256\x3"+
		"\x2\x2\x2\x263\x257\x3\x2\x2\x2\x263\x258\x3\x2\x2\x2\x263\x259\x3\x2"+
		"\x2\x2\x263\x25A\x3\x2\x2\x2\x263\x25B\x3\x2\x2\x2\x263\x25C\x3\x2\x2"+
		"\x2\x263\x25D\x3\x2\x2\x2\x263\x25E\x3\x2\x2\x2\x263\x25F\x3\x2\x2\x2"+
		"\x263\x260\x3\x2\x2\x2\x263\x261\x3\x2\x2\x2\x263\x262\x3\x2\x2\x2\x264"+
		"\xA5\x3\x2\x2\x2\x265\x268\a+\x2\x2\x266\x268\x5\xA8U\x2\x267\x265\x3"+
		"\x2\x2\x2\x267\x266\x3\x2\x2\x2\x268\xA7\x3\x2\x2\x2\x269\x26A\t\x6\x2"+
		"\x2\x26A\xA9\x3\x2\x2\x2\x26B\x26D\x5\xA2R\x2\x26C\x26B\x3\x2\x2\x2\x26D"+
		"\x26E\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\xAB"+
		"\x3\x2\x2\x2\x270\x274\a-\x2\x2\x271\x273\x5\xA4S\x2\x272\x271\x3\x2\x2"+
		"\x2\x273\x276\x3\x2\x2\x2\x274\x272\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2"+
		"\x275\x277\x3\x2\x2\x2\x276\x274\x3\x2\x2\x2\x277\x278\a-\x2\x2\x278\xAD"+
		"\x3\x2\x2\x2\x279\x284\x5\xA8U\x2\x27A\x27E\x5\xA8U\x2\x27B\x27D\x5\xA6"+
		"T\x2\x27C\x27B\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2"+
		"\x27E\x27F\x3\x2\x2\x2\x27F\x281\x3\x2\x2\x2\x280\x27E\x3\x2\x2\x2\x281"+
		"\x282\x5\xA8U\x2\x282\x284\x3\x2\x2\x2\x283\x279\x3\x2\x2\x2\x283\x27A"+
		"\x3\x2\x2\x2\x284\xAF\x3\x2\x2\x2\x37\xB4\xCD\xD0\xD8\xDC\xDF\xE2\xE8"+
		"\xF0\xF5\xFD\x101\x105\x110\x119\x11C\x124\x12D\x135\x141\x145\x149\x153"+
		"\x15A\x16A\x17A\x18D\x194\x198\x1A7\x1B5\x1BE\x1D1\x1E0\x1E3\x1E8\x1EE"+
		"\x1F2\x203\x20F\x215\x21C\x221\x230\x239\x244\x24D\x263\x267\x26E\x274"+
		"\x27E\x283";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
