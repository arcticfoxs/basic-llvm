//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BASIC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class BASICParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, LETTER=41, DIGIT=42, STRINGCHARACTER=43, QUOTEDSTRINGCHARACTER=44, 
		UNQUOTEDSTRINGCHARACTER=45, PLAINSTRINGCHARACTER=46, REMARKSTRING=47, 
		QUOTEDSTRING=48, UNQUOTEDSTRING=49, SPACE=50, EXCLAMATIONMARK=51, QUOTATIONMARK=52, 
		NUMBERSIGN=53, DOLLARSIGN=54, PERCENTSIGN=55, AMPERSAND=56, APOSTROPHE=57, 
		LEFTPARENTHESIS=58, RIGHTPARENTHESIS=59, ASTERISK=60, PLUSSIGN=61, COMMA=62, 
		MINUSSIGN=63, FULLSTOP=64, SOLIDUS=65, COLON=66, SEMICOLON=67, LESSTHANSIGN=68, 
		EQUALSSIGN=69, GREATERTHANSIGN=70, QUESTIONMARK=71, CIRCUMFLEXACCENT=72, 
		UNDERLINE=73;
	public const int
		RULE_line = 0, RULE_linenumber = 1, RULE_endline = 2, RULE_endstatement = 3, 
		RULE_statement = 4, RULE_numericconstant = 5, RULE_sign = 6, RULE_numericrep = 7, 
		RULE_significand = 8, RULE_integer = 9, RULE_fraction = 10, RULE_exrad = 11, 
		RULE_stringconstant = 12, RULE_variable = 13, RULE_numericvariable = 14, 
		RULE_simplenumericvariable = 15, RULE_numericarrayelement = 16, RULE_numericarrayname = 17, 
		RULE_subscript = 18, RULE_stringvariable = 19, RULE_expression = 20, RULE_numericexpression = 21, 
		RULE_term = 22, RULE_factor = 23, RULE_multiplier = 24, RULE_primary = 25, 
		RULE_numericfunctionref = 26, RULE_numericfunctionname = 27, RULE_argumentlist = 28, 
		RULE_argument = 29, RULE_stringexpression = 30, RULE_numericsuppliedfunction = 31, 
		RULE_defstatement = 32, RULE_numericdefinedfunction = 33, RULE_parameterlist = 34, 
		RULE_parameter = 35, RULE_letstatement = 36, RULE_numericletstatement = 37, 
		RULE_stringletstatement = 38, RULE_gotostatement = 39, RULE_ifthenstatement = 40, 
		RULE_relationalexpression = 41, RULE_relation = 42, RULE_equalityrelation = 43, 
		RULE_notless = 44, RULE_notgreater = 45, RULE_notequals = 46, RULE_gosubstatement = 47, 
		RULE_returnstatement = 48, RULE_ongotostatement = 49, RULE_stopstatement = 50, 
		RULE_forline = 51, RULE_nextline = 52, RULE_forstatement = 53, RULE_controlvariable = 54, 
		RULE_initialvalue = 55, RULE_limit = 56, RULE_increment = 57, RULE_nextstatement = 58, 
		RULE_printstatement = 59, RULE_printlist = 60, RULE_printitem = 61, RULE_tabcall = 62, 
		RULE_printseparator = 63, RULE_inputstatement = 64, RULE_variablelist = 65, 
		RULE_inputprompt = 66, RULE_inputreply = 67, RULE_inputlist = 68, RULE_paddeddatum = 69, 
		RULE_datum = 70, RULE_readstatement = 71, RULE_restorestatement = 72, 
		RULE_datastatement = 73, RULE_datalist = 74, RULE_dimensionstatement = 75, 
		RULE_arraydeclaration = 76, RULE_bounds = 77, RULE_optionstatement = 78, 
		RULE_remarkstatement = 79, RULE_randomizestatement = 80;
	public static readonly string[] ruleNames = {
		"line", "linenumber", "endline", "endstatement", "statement", "numericconstant", 
		"sign", "numericrep", "significand", "integer", "fraction", "exrad", "stringconstant", 
		"variable", "numericvariable", "simplenumericvariable", "numericarrayelement", 
		"numericarrayname", "subscript", "stringvariable", "expression", "numericexpression", 
		"term", "factor", "multiplier", "primary", "numericfunctionref", "numericfunctionname", 
		"argumentlist", "argument", "stringexpression", "numericsuppliedfunction", 
		"defstatement", "numericdefinedfunction", "parameterlist", "parameter", 
		"letstatement", "numericletstatement", "stringletstatement", "gotostatement", 
		"ifthenstatement", "relationalexpression", "relation", "equalityrelation", 
		"notless", "notgreater", "notequals", "gosubstatement", "returnstatement", 
		"ongotostatement", "stopstatement", "forline", "nextline", "forstatement", 
		"controlvariable", "initialvalue", "limit", "increment", "nextstatement", 
		"printstatement", "printlist", "printitem", "tabcall", "printseparator", 
		"inputstatement", "variablelist", "inputprompt", "inputreply", "inputlist", 
		"paddeddatum", "datum", "readstatement", "restorestatement", "datastatement", 
		"datalist", "dimensionstatement", "arraydeclaration", "bounds", "optionstatement", 
		"remarkstatement", "randomizestatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'end'", "'E'", "'ABS'", "'ATN'", "'COS'", "'EXP'", "'INT'", "'LOG'", 
		"'RND'", "'SGN'", "'SIN'", "'SQR'", "'TAN'", "'DEF'", "'FN'", "'LET'", 
		"'GO'", "'TO'", "'IF'", "'THEN'", "'SUB'", "'RETURN'", "'ON'", "'STOP'", 
		"'FOR'", "'STEP'", "'NEXT'", "'PRINT'", "'TAB'", "'INPUT'", "'INPUT?'", 
		"'READ'", "'restore'", "'DATA'", "'DIM'", "'OPTION BASE'", "'0'", "'1'", 
		"'REM'", "'RANDOMIZE'", null, null, null, null, null, null, null, null, 
		null, "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", "'('", 
		"')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "';'", "'<'", 
		"'='", "'>'", "'?'", "'^'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "LETTER", "DIGIT", "STRINGCHARACTER", "QUOTEDSTRINGCHARACTER", 
		"UNQUOTEDSTRINGCHARACTER", "PLAINSTRINGCHARACTER", "REMARKSTRING", "QUOTEDSTRING", 
		"UNQUOTEDSTRING", "SPACE", "EXCLAMATIONMARK", "QUOTATIONMARK", "NUMBERSIGN", 
		"DOLLARSIGN", "PERCENTSIGN", "AMPERSAND", "APOSTROPHE", "LEFTPARENTHESIS", 
		"RIGHTPARENTHESIS", "ASTERISK", "PLUSSIGN", "COMMA", "MINUSSIGN", "FULLSTOP", 
		"SOLIDUS", "COLON", "SEMICOLON", "LESSTHANSIGN", "EQUALSSIGN", "GREATERTHANSIGN", 
		"QUESTIONMARK", "CIRCUMFLEXACCENT", "UNDERLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BASIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BASICParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class LineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; linenumber();
			State = 163; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 2, RULE_linenumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(DIGIT);
			// 1,4 <- wtf is this?
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndstatementContext endstatement() {
			return GetRuleContext<EndstatementContext>(0);
		}
		public EndlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndline(this);
		}
	}

	[RuleVersion(0)]
	public EndlineContext endline() {
		EndlineContext _localctx = new EndlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_endline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; linenumber();
			State = 169; endstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstatementContext : ParserRuleContext {
		public EndstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndstatement(this);
		}
	}

	[RuleVersion(0)]
	public EndstatementContext endstatement() {
		EndstatementContext _localctx = new EndstatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_endstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DatastatementContext datastatement() {
			return GetRuleContext<DatastatementContext>(0);
		}
		public DefstatementContext defstatement() {
			return GetRuleContext<DefstatementContext>(0);
		}
		public DimensionstatementContext dimensionstatement() {
			return GetRuleContext<DimensionstatementContext>(0);
		}
		public GosubstatementContext gosubstatement() {
			return GetRuleContext<GosubstatementContext>(0);
		}
		public GotostatementContext gotostatement() {
			return GetRuleContext<GotostatementContext>(0);
		}
		public IfthenstatementContext ifthenstatement() {
			return GetRuleContext<IfthenstatementContext>(0);
		}
		public InputstatementContext inputstatement() {
			return GetRuleContext<InputstatementContext>(0);
		}
		public LetstatementContext letstatement() {
			return GetRuleContext<LetstatementContext>(0);
		}
		public OngotostatementContext ongotostatement() {
			return GetRuleContext<OngotostatementContext>(0);
		}
		public OptionstatementContext optionstatement() {
			return GetRuleContext<OptionstatementContext>(0);
		}
		public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		public RandomizestatementContext randomizestatement() {
			return GetRuleContext<RandomizestatementContext>(0);
		}
		public ReadstatementContext readstatement() {
			return GetRuleContext<ReadstatementContext>(0);
		}
		public RemarkstatementContext remarkstatement() {
			return GetRuleContext<RemarkstatementContext>(0);
		}
		public RestorestatementContext restorestatement() {
			return GetRuleContext<RestorestatementContext>(0);
		}
		public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		public StopstatementContext stopstatement() {
			return GetRuleContext<StopstatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 190;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; datastatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; defstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175; dimensionstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176; gosubstatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177; gotostatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 178; ifthenstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 179; inputstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 180; letstatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 181; ongotostatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 182; optionstatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 183; printstatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 184; randomizestatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 185; readstatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 186; remarkstatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 187; restorestatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 188; returnstatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 189; stopstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericconstantContext : ParserRuleContext {
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public NumericconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericconstant(this);
		}
	}

	[RuleVersion(0)]
	public NumericconstantContext numericconstant() {
		NumericconstantContext _localctx = new NumericconstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_numericconstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 192; sign();
				}
			}

			State = 195; numericrep();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 12, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.La(1);
			if ( !(_la==PLUSSIGN || _la==MINUSSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericrepContext : ParserRuleContext {
		public SignificandContext significand() {
			return GetRuleContext<SignificandContext>(0);
		}
		public ExradContext exrad() {
			return GetRuleContext<ExradContext>(0);
		}
		public NumericrepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericrep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericrep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericrep(this);
		}
	}

	[RuleVersion(0)]
	public NumericrepContext numericrep() {
		NumericrepContext _localctx = new NumericrepContext(Context, State);
		EnterRule(_localctx, 14, RULE_numericrep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; significand();
			State = 201;
			_la = TokenStream.La(1);
			if (_la==T__1) {
				{
				State = 200; exrad();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignificandContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		public SignificandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_significand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSignificand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSignificand(this);
		}
	}

	[RuleVersion(0)]
	public SignificandContext significand() {
		SignificandContext _localctx = new SignificandContext(Context, State);
		EnterRule(_localctx, 16, RULE_significand);
		int _la;
		try {
			State = 211;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; integer();
				State = 205;
				_la = TokenStream.La(1);
				if (_la==FULLSTOP) {
					{
					State = 204; Match(FULLSTOP);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 207; integer();
					}
				}

				State = 210; fraction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 18, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(DIGIT);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DIGIT) {
				{
				{
				State = 214; Match(DIGIT);
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFraction(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(Context, State);
		EnterRule(_localctx, 20, RULE_fraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(FULLSTOP);
			State = 221; Match(DIGIT);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DIGIT) {
				{
				{
				State = 222; Match(DIGIT);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExradContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ExradContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exrad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExrad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExrad(this);
		}
	}

	[RuleVersion(0)]
	public ExradContext exrad() {
		ExradContext _localctx = new ExradContext(Context, State);
		EnterRule(_localctx, 22, RULE_exrad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T__1);
			State = 230;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 229; sign();
				}
			}

			State = 232; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringconstantContext : ParserRuleContext {
		public ITerminalNode QUOTEDSTRING() { return GetToken(BASICParser.QUOTEDSTRING, 0); }
		public StringconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringconstant(this);
		}
	}

	[RuleVersion(0)]
	public StringconstantContext stringconstant() {
		StringconstantContext _localctx = new StringconstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringconstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(QUOTEDSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		try {
			State = 238;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; numericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; stringvariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public NumericarrayelementContext numericarrayelement() {
			return GetRuleContext<NumericarrayelementContext>(0);
		}
		public NumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public NumericvariableContext numericvariable() {
		NumericvariableContext _localctx = new NumericvariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_numericvariable);
		try {
			State = 242;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; simplenumericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; numericarrayelement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplenumericvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public SimplenumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplenumericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSimplenumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSimplenumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public SimplenumericvariableContext simplenumericvariable() {
		SimplenumericvariableContext _localctx = new SimplenumericvariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_simplenumericvariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(LETTER);
			State = 246;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 245; Match(DIGIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarrayelementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public NumericarrayelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayelement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayelement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayelement(this);
		}
	}

	[RuleVersion(0)]
	public NumericarrayelementContext numericarrayelement() {
		NumericarrayelementContext _localctx = new NumericarrayelementContext(Context, State);
		EnterRule(_localctx, 32, RULE_numericarrayelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; numericarrayname();
			State = 249; subscript();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarraynameContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericarraynameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayname(this);
		}
	}

	[RuleVersion(0)]
	public NumericarraynameContext numericarrayname() {
		NumericarraynameContext _localctx = new NumericarraynameContext(Context, State);
		EnterRule(_localctx, 34, RULE_numericarrayname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 36, RULE_subscript);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(LEFTPARENTHESIS);
			State = 254; numericexpression();
			State = 257;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 255; Match(COMMA);
				State = 256; numericexpression();
				}
			}

			State = 259; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public StringvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringvariable(this);
		}
	}

	[RuleVersion(0)]
	public StringvariableContext stringvariable() {
		StringvariableContext _localctx = new StringvariableContext(Context, State);
		EnterRule(_localctx, 38, RULE_stringvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(LETTER);
			State = 262; Match(DOLLARSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			State = 266;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericexpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public SignContext[] sign() {
			return GetRuleContexts<SignContext>();
		}
		public SignContext sign(int i) {
			return GetRuleContext<SignContext>(i);
		}
		public NumericexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericexpression(this);
		}
	}

	[RuleVersion(0)]
	public NumericexpressionContext numericexpression() {
		NumericexpressionContext _localctx = new NumericexpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_numericexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 268; sign();
				}
			}

			State = 271; term();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				{
				State = 272; sign();
				State = 273; term();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MultiplierContext[] multiplier() {
			return GetRuleContexts<MultiplierContext>();
		}
		public MultiplierContext multiplier(int i) {
			return GetRuleContext<MultiplierContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 44, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; factor();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ASTERISK || _la==SOLIDUS) {
				{
				{
				State = 281; multiplier();
				State = 282; factor();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		public ITerminalNode[] CIRCUMFLEXACCENT() { return GetTokens(BASICParser.CIRCUMFLEXACCENT); }
		public ITerminalNode CIRCUMFLEXACCENT(int i) {
			return GetToken(BASICParser.CIRCUMFLEXACCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 46, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; primary();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CIRCUMFLEXACCENT) {
				{
				{
				State = 290; Match(CIRCUMFLEXACCENT);
				State = 291; primary();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplierContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public MultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterMultiplier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitMultiplier(this);
		}
	}

	[RuleVersion(0)]
	public MultiplierContext multiplier() {
		MultiplierContext _localctx = new MultiplierContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			_la = TokenStream.La(1);
			if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public NumericfunctionrefContext numericfunctionref() {
			return GetRuleContext<NumericfunctionrefContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_primary);
		try {
			State = 306;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; numericvariable();
				}
				break;
			case DIGIT:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; numericrep();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; numericfunctionref();
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302; Match(LEFTPARENTHESIS);
				State = 303; numericexpression();
				State = 304; Match(RIGHTPARENTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionrefContext : ParserRuleContext {
		public NumericfunctionnameContext numericfunctionname() {
			return GetRuleContext<NumericfunctionnameContext>(0);
		}
		public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public NumericfunctionrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionref(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionrefContext numericfunctionref() {
		NumericfunctionrefContext _localctx = new NumericfunctionrefContext(Context, State);
		EnterRule(_localctx, 52, RULE_numericfunctionref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; numericfunctionname();
			State = 310;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 309; argumentlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionnameContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public NumericsuppliedfunctionContext numericsuppliedfunction() {
			return GetRuleContext<NumericsuppliedfunctionContext>(0);
		}
		public NumericfunctionnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionname(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionnameContext numericfunctionname() {
		NumericfunctionnameContext _localctx = new NumericfunctionnameContext(Context, State);
		EnterRule(_localctx, 54, RULE_numericfunctionname);
		try {
			State = 314;
			switch (TokenStream.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; numericdefinedfunction();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; numericsuppliedfunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArgumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgumentlist(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentlistContext argumentlist() {
		ArgumentlistContext _localctx = new ArgumentlistContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(LEFTPARENTHESIS);
			State = 317; argument();
			State = 318; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringexpressionContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		public StringexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringexpression(this);
		}
	}

	[RuleVersion(0)]
	public StringexpressionContext stringexpression() {
		StringexpressionContext _localctx = new StringexpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_stringexpression);
		try {
			State = 324;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322; stringvariable();
				}
				break;
			case QUOTEDSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323; stringconstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericsuppliedfunctionContext : ParserRuleContext {
		public NumericsuppliedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericsuppliedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericsuppliedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericsuppliedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericsuppliedfunctionContext numericsuppliedfunction() {
		NumericsuppliedfunctionContext _localctx = new NumericsuppliedfunctionContext(Context, State);
		EnterRule(_localctx, 62, RULE_numericsuppliedfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstatementContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		public DefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDefstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDefstatement(this);
		}
	}

	[RuleVersion(0)]
	public DefstatementContext defstatement() {
		DefstatementContext _localctx = new DefstatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_defstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__13);
			State = 329; numericdefinedfunction();
			State = 331;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 330; parameterlist();
				}
			}

			State = 333; Match(EQUALSSIGN);
			State = 334; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericdefinedfunctionContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericdefinedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericdefinedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericdefinedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericdefinedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericdefinedfunctionContext numericdefinedfunction() {
		NumericdefinedfunctionContext _localctx = new NumericdefinedfunctionContext(Context, State);
		EnterRule(_localctx, 66, RULE_numericdefinedfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(T__14);
			State = 337; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ParameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameterlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterlistContext parameterlist() {
		ParameterlistContext _localctx = new ParameterlistContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameterlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(LEFTPARENTHESIS);
			State = 340; parameter();
			State = 341; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstatementContext : ParserRuleContext {
		public NumericletstatementContext numericletstatement() {
			return GetRuleContext<NumericletstatementContext>(0);
		}
		public StringletstatementContext stringletstatement() {
			return GetRuleContext<StringletstatementContext>(0);
		}
		public LetstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLetstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLetstatement(this);
		}
	}

	[RuleVersion(0)]
	public LetstatementContext letstatement() {
		LetstatementContext _localctx = new LetstatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_letstatement);
		try {
			State = 347;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; numericletstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; stringletstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericletstatementContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public NumericletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericletstatement(this);
		}
	}

	[RuleVersion(0)]
	public NumericletstatementContext numericletstatement() {
		NumericletstatementContext _localctx = new NumericletstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_numericletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(T__15);
			State = 350; numericvariable();
			State = 351; Match(EQUALSSIGN);
			State = 352; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringletstatementContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public StringletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringletstatement(this);
		}
	}

	[RuleVersion(0)]
	public StringletstatementContext stringletstatement() {
		StringletstatementContext _localctx = new StringletstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(T__15);
			State = 355; stringvariable();
			State = 356; Match(EQUALSSIGN);
			State = 357; stringexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGotostatement(this);
		}
	}

	[RuleVersion(0)]
	public GotostatementContext gotostatement() {
		GotostatementContext _localctx = new GotostatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_gotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T__16);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 360; Match(SPACE);
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 366; Match(T__17);
			State = 367; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstatementContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public IfthenstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIfthenstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIfthenstatement(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstatementContext ifthenstatement() {
		IfthenstatementContext _localctx = new IfthenstatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_ifthenstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(T__18);
			State = 370; relationalexpression();
			State = 371; Match(T__19);
			State = 372; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public StringexpressionContext[] stringexpression() {
			return GetRuleContexts<StringexpressionContext>();
		}
		public StringexpressionContext stringexpression(int i) {
			return GetRuleContext<StringexpressionContext>(i);
		}
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_relationalexpression);
		try {
			State = 382;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; numericexpression();
				State = 375; relation();
				State = 376; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; stringexpression();
				State = 379; equalityrelation();
				State = 380; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotlessContext notless() {
			return GetRuleContext<NotlessContext>(0);
		}
		public NotgreaterContext notgreater() {
			return GetRuleContext<NotgreaterContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 84, RULE_relation);
		try {
			State = 389;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; equalityrelation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; Match(LESSTHANSIGN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386; Match(GREATERTHANSIGN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 387; notless();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 388; notgreater();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityrelationContext : ParserRuleContext {
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotequalsContext notequals() {
			return GetRuleContext<NotequalsContext>(0);
		}
		public EqualityrelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityrelation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEqualityrelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEqualityrelation(this);
		}
	}

	[RuleVersion(0)]
	public EqualityrelationContext equalityrelation() {
		EqualityrelationContext _localctx = new EqualityrelationContext(Context, State);
		EnterRule(_localctx, 86, RULE_equalityrelation);
		try {
			State = 393;
			switch (TokenStream.La(1)) {
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; Match(EQUALSSIGN);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392; notequals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotlessContext : ParserRuleContext {
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notless; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotless(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotless(this);
		}
	}

	[RuleVersion(0)]
	public NotlessContext notless() {
		NotlessContext _localctx = new NotlessContext(Context, State);
		EnterRule(_localctx, 88, RULE_notless);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(GREATERTHANSIGN);
			State = 396; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotgreaterContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotgreaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notgreater; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotgreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotgreater(this);
		}
	}

	[RuleVersion(0)]
	public NotgreaterContext notgreater() {
		NotgreaterContext _localctx = new NotgreaterContext(Context, State);
		EnterRule(_localctx, 90, RULE_notgreater);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(LESSTHANSIGN);
			State = 399; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotequalsContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotequalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notequals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotequals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotequals(this);
		}
	}

	[RuleVersion(0)]
	public NotequalsContext notequals() {
		NotequalsContext _localctx = new NotequalsContext(Context, State);
		EnterRule(_localctx, 92, RULE_notequals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LESSTHANSIGN);
			State = 402; Match(GREATERTHANSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GosubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGosubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGosubstatement(this);
		}
	}

	[RuleVersion(0)]
	public GosubstatementContext gosubstatement() {
		GosubstatementContext _localctx = new GosubstatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_gosubstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(T__16);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 405; Match(SPACE);
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 411; Match(T__20);
			State = 412; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostatementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public OngotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterOngotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitOngotostatement(this);
		}
	}

	[RuleVersion(0)]
	public OngotostatementContext ongotostatement() {
		OngotostatementContext _localctx = new OngotostatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_ongotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T__22);
			State = 417; numericexpression();
			State = 418; Match(T__16);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 419; Match(SPACE);
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 425; Match(T__17);
			State = 426; linenumber();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 427; Match(COMMA);
				State = 428; linenumber();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstatementContext : ParserRuleContext {
		public StopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStopstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStopstatement(this);
		}
	}

	[RuleVersion(0)]
	public StopstatementContext stopstatement() {
		StopstatementContext _localctx = new StopstatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_stopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ForstatementContext forstatement() {
			return GetRuleContext<ForstatementContext>(0);
		}
		public ForlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForline(this);
		}
	}

	[RuleVersion(0)]
	public ForlineContext forline() {
		ForlineContext _localctx = new ForlineContext(Context, State);
		EnterRule(_localctx, 102, RULE_forline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; linenumber();
			State = 437; forstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextlineContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public NextstatementContext nextstatement() {
			return GetRuleContext<NextstatementContext>(0);
		}
		public NextlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextline(this);
		}
	}

	[RuleVersion(0)]
	public NextlineContext nextline() {
		NextlineContext _localctx = new NextlineContext(Context, State);
		EnterRule(_localctx, 104, RULE_nextline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; linenumber();
			State = 440; nextstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public InitialvalueContext initialvalue() {
			return GetRuleContext<InitialvalueContext>(0);
		}
		public LimitContext limit() {
			return GetRuleContext<LimitContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public ForstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForstatementContext forstatement() {
		ForstatementContext _localctx = new ForstatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_forstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T__24);
			State = 443; controlvariable();
			State = 444; Match(EQUALSSIGN);
			State = 445; initialvalue();
			State = 446; Match(T__17);
			State = 447; limit();
			State = 450;
			_la = TokenStream.La(1);
			if (_la==T__25) {
				{
				State = 448; Match(T__25);
				State = 449; increment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ControlvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterControlvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitControlvariable(this);
		}
	}

	[RuleVersion(0)]
	public ControlvariableContext controlvariable() {
		ControlvariableContext _localctx = new ControlvariableContext(Context, State);
		EnterRule(_localctx, 108, RULE_controlvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialvalueContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public InitialvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInitialvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInitialvalue(this);
		}
	}

	[RuleVersion(0)]
	public InitialvalueContext initialvalue() {
		InitialvalueContext _localctx = new InitialvalueContext(Context, State);
		EnterRule(_localctx, 110, RULE_initialvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLimit(this);
		}
	}

	[RuleVersion(0)]
	public LimitContext limit() {
		LimitContext _localctx = new LimitContext(Context, State);
		EnterRule(_localctx, 112, RULE_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 114, RULE_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public NextstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextstatement(this);
		}
	}

	[RuleVersion(0)]
	public NextstatementContext nextstatement() {
		NextstatementContext _localctx = new NextstatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_nextstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__26);
			State = 461; controlvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		public PrintlistContext printlist() {
			return GetRuleContext<PrintlistContext>(0);
		}
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_printstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(T__27);
			State = 465;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 464; printlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlistContext : ParserRuleContext {
		public PrintseparatorContext[] printseparator() {
			return GetRuleContexts<PrintseparatorContext>();
		}
		public PrintseparatorContext printseparator(int i) {
			return GetRuleContext<PrintseparatorContext>(i);
		}
		public PrintitemContext[] printitem() {
			return GetRuleContexts<PrintitemContext>();
		}
		public PrintitemContext printitem(int i) {
			return GetRuleContext<PrintitemContext>(i);
		}
		public PrintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintlist(this);
		}
	}

	[RuleVersion(0)]
	public PrintlistContext printlist() {
		PrintlistContext _localctx = new PrintlistContext(Context, State);
		EnterRule(_localctx, 120, RULE_printlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 468;
					_la = TokenStream.La(1);
					if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__3 - 3)) | (1L << (T__4 - 3)) | (1L << (T__5 - 3)) | (1L << (T__6 - 3)) | (1L << (T__7 - 3)) | (1L << (T__8 - 3)) | (1L << (T__9 - 3)) | (1L << (T__10 - 3)) | (1L << (T__11 - 3)) | (1L << (T__12 - 3)) | (1L << (T__14 - 3)) | (1L << (T__28 - 3)) | (1L << (LETTER - 3)) | (1L << (DIGIT - 3)) | (1L << (QUOTEDSTRING - 3)) | (1L << (LEFTPARENTHESIS - 3)) | (1L << (PLUSSIGN - 3)) | (1L << (MINUSSIGN - 3)) | (1L << (FULLSTOP - 3)))) != 0)) {
						{
						State = 467; printitem();
						}
					}

					State = 470; printseparator();
					}
					} 
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 477;
			_la = TokenStream.La(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (T__2 - 3)) | (1L << (T__3 - 3)) | (1L << (T__4 - 3)) | (1L << (T__5 - 3)) | (1L << (T__6 - 3)) | (1L << (T__7 - 3)) | (1L << (T__8 - 3)) | (1L << (T__9 - 3)) | (1L << (T__10 - 3)) | (1L << (T__11 - 3)) | (1L << (T__12 - 3)) | (1L << (T__14 - 3)) | (1L << (T__28 - 3)) | (1L << (LETTER - 3)) | (1L << (DIGIT - 3)) | (1L << (QUOTEDSTRING - 3)) | (1L << (LEFTPARENTHESIS - 3)) | (1L << (PLUSSIGN - 3)) | (1L << (MINUSSIGN - 3)) | (1L << (FULLSTOP - 3)))) != 0)) {
				{
				State = 476; printitem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintitemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TabcallContext tabcall() {
			return GetRuleContext<TabcallContext>(0);
		}
		public PrintitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintitem(this);
		}
	}

	[RuleVersion(0)]
	public PrintitemContext printitem() {
		PrintitemContext _localctx = new PrintitemContext(Context, State);
		EnterRule(_localctx, 122, RULE_printitem);
		try {
			State = 481;
			switch (TokenStream.La(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__14:
			case LETTER:
			case DIGIT:
			case QUOTEDSTRING:
			case LEFTPARENTHESIS:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479; expression();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480; tabcall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabcallContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public TabcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabcall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTabcall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTabcall(this);
		}
	}

	[RuleVersion(0)]
	public TabcallContext tabcall() {
		TabcallContext _localctx = new TabcallContext(Context, State);
		EnterRule(_localctx, 124, RULE_tabcall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(T__28);
			State = 484; Match(LEFTPARENTHESIS);
			State = 485; numericexpression();
			State = 486; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintseparatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public PrintseparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printseparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintseparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintseparator(this);
		}
	}

	[RuleVersion(0)]
	public PrintseparatorContext printseparator() {
		PrintseparatorContext _localctx = new PrintseparatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_printseparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			_la = TokenStream.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public InputstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputstatement(this);
		}
	}

	[RuleVersion(0)]
	public InputstatementContext inputstatement() {
		InputstatementContext _localctx = new InputstatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_inputstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490; Match(T__29);
			State = 491; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablelistContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public VariablelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariablelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariablelist(this);
		}
	}

	[RuleVersion(0)]
	public VariablelistContext variablelist() {
		VariablelistContext _localctx = new VariablelistContext(Context, State);
		EnterRule(_localctx, 130, RULE_variablelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; variable();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 494; Match(COMMA);
				State = 495; variable();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputpromptContext : ParserRuleContext {
		public InputpromptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputprompt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputprompt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputprompt(this);
		}
	}

	[RuleVersion(0)]
	public InputpromptContext inputprompt() {
		InputpromptContext _localctx = new InputpromptContext(Context, State);
		EnterRule(_localctx, 132, RULE_inputprompt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputreplyContext : ParserRuleContext {
		public InputlistContext inputlist() {
			return GetRuleContext<InputlistContext>(0);
		}
		public InputreplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputreply; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputreply(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputreply(this);
		}
	}

	[RuleVersion(0)]
	public InputreplyContext inputreply() {
		InputreplyContext _localctx = new InputreplyContext(Context, State);
		EnterRule(_localctx, 134, RULE_inputreply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; inputlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputlistContext : ParserRuleContext {
		public PaddeddatumContext[] paddeddatum() {
			return GetRuleContexts<PaddeddatumContext>();
		}
		public PaddeddatumContext paddeddatum(int i) {
			return GetRuleContext<PaddeddatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public InputlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputlist(this);
		}
	}

	[RuleVersion(0)]
	public InputlistContext inputlist() {
		InputlistContext _localctx = new InputlistContext(Context, State);
		EnterRule(_localctx, 136, RULE_inputlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; paddeddatum();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 506; Match(COMMA);
				State = 507; paddeddatum();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PaddeddatumContext : ParserRuleContext {
		public DatumContext datum() {
			return GetRuleContext<DatumContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public PaddeddatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paddeddatum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPaddeddatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPaddeddatum(this);
		}
	}

	[RuleVersion(0)]
	public PaddeddatumContext paddeddatum() {
		PaddeddatumContext _localctx = new PaddeddatumContext(Context, State);
		EnterRule(_localctx, 138, RULE_paddeddatum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 513; Match(SPACE);
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 519; datum();
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 520; Match(SPACE);
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		public ITerminalNode QUOTEDSTRING() { return GetToken(BASICParser.QUOTEDSTRING, 0); }
		public ITerminalNode UNQUOTEDSTRING() { return GetToken(BASICParser.UNQUOTEDSTRING, 0); }
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 140, RULE_datum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.La(1);
			if ( !(_la==QUOTEDSTRING || _la==UNQUOTEDSTRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstatementContext : ParserRuleContext {
		public VariablelistContext variablelist() {
			return GetRuleContext<VariablelistContext>(0);
		}
		public ReadstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReadstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReadstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReadstatementContext readstatement() {
		ReadstatementContext _localctx = new ReadstatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_readstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(T__31);
			State = 529; variablelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestatementContext : ParserRuleContext {
		public RestorestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRestorestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRestorestatement(this);
		}
	}

	[RuleVersion(0)]
	public RestorestatementContext restorestatement() {
		RestorestatementContext _localctx = new RestorestatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_restorestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastatementContext : ParserRuleContext {
		public DatalistContext datalist() {
			return GetRuleContext<DatalistContext>(0);
		}
		public DatastatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatastatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatastatement(this);
		}
	}

	[RuleVersion(0)]
	public DatastatementContext datastatement() {
		DatastatementContext _localctx = new DatastatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_datastatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(T__33);
			State = 534; datalist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatalistContext : ParserRuleContext {
		public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DatalistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datalist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDatalist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDatalist(this);
		}
	}

	[RuleVersion(0)]
	public DatalistContext datalist() {
		DatalistContext _localctx = new DatalistContext(Context, State);
		EnterRule(_localctx, 148, RULE_datalist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; datum();
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 537; Match(COMMA);
				State = 538; datum();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionstatementContext : ParserRuleContext {
		public ArraydeclarationContext[] arraydeclaration() {
			return GetRuleContexts<ArraydeclarationContext>();
		}
		public ArraydeclarationContext arraydeclaration(int i) {
			return GetRuleContext<ArraydeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public DimensionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDimensionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDimensionstatement(this);
		}
	}

	[RuleVersion(0)]
	public DimensionstatementContext dimensionstatement() {
		DimensionstatementContext _localctx = new DimensionstatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_dimensionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(T__34);
			State = 545; arraydeclaration();
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 546; Match(COMMA);
				State = 547; arraydeclaration();
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public BoundsContext bounds() {
			return GetRuleContext<BoundsContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArraydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArraydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 152, RULE_arraydeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; numericarrayname();
			State = 554; Match(LEFTPARENTHESIS);
			State = 555; bounds();
			State = 556; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsContext : ParserRuleContext {
		public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public BoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitBounds(this);
		}
	}

	[RuleVersion(0)]
	public BoundsContext bounds() {
		BoundsContext _localctx = new BoundsContext(Context, State);
		EnterRule(_localctx, 154, RULE_bounds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; integer();
			State = 561;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 559; Match(COMMA);
				State = 560; integer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionstatementContext : ParserRuleContext {
		public OptionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterOptionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitOptionstatement(this);
		}
	}

	[RuleVersion(0)]
	public OptionstatementContext optionstatement() {
		OptionstatementContext _localctx = new OptionstatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_optionstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; Match(T__35);
			State = 564;
			_la = TokenStream.La(1);
			if ( !(_la==T__36 || _la==T__37) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstatementContext : ParserRuleContext {
		public ITerminalNode REMARKSTRING() { return GetToken(BASICParser.REMARKSTRING, 0); }
		public RemarkstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstatement(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstatementContext remarkstatement() {
		RemarkstatementContext _localctx = new RemarkstatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_remarkstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(T__38);
			State = 567; Match(REMARKSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizestatementContext : ParserRuleContext {
		public RandomizestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRandomizestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRandomizestatement(this);
		}
	}

	[RuleVersion(0)]
	public RandomizestatementContext randomizestatement() {
		RandomizestatementContext _localctx = new RandomizestatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_randomizestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3K\x23E\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xC1\n"+
		"\x6\x3\a\x5\a\xC4\n\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x5\t\xCC\n\t\x3\n"+
		"\x3\n\x5\n\xD0\n\n\x3\n\x5\n\xD3\n\n\x3\n\x5\n\xD6\n\n\x3\v\x3\v\a\v\xDA"+
		"\n\v\f\v\xE\v\xDD\v\v\x3\f\x3\f\x3\f\a\f\xE2\n\f\f\f\xE\f\xE5\v\f\x3\r"+
		"\x3\r\x5\r\xE9\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xF1\n\xF\x3"+
		"\x10\x3\x10\x5\x10\xF5\n\x10\x3\x11\x3\x11\x5\x11\xF9\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x104\n\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x10D\n\x16\x3"+
		"\x17\x5\x17\x110\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x116\n\x17\f"+
		"\x17\xE\x17\x119\v\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x11F\n\x18\f"+
		"\x18\xE\x18\x122\v\x18\x3\x19\x3\x19\x3\x19\a\x19\x127\n\x19\f\x19\xE"+
		"\x19\x12A\v\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x135\n\x1B\x3\x1C\x3\x1C\x5\x1C\x139\n\x1C\x3\x1D\x3\x1D"+
		"\x5\x1D\x13D\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x5"+
		" \x147\n \x3!\x3!\x3\"\x3\"\x3\"\x5\"\x14E\n\"\x3\"\x3\"\x3\"\x3#\x3#"+
		"\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3&\x3&\x5&\x15E\n&\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\a)\x16C\n)\f)\xE)\x16F\v)\x3)\x3)\x3)\x3"+
		"*\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x181\n+\x3,\x3,"+
		"\x3,\x3,\x3,\x5,\x188\n,\x3-\x3-\x5-\x18C\n-\x3.\x3.\x3.\x3/\x3/\x3/\x3"+
		"\x30\x3\x30\x3\x30\x3\x31\x3\x31\a\x31\x199\n\x31\f\x31\xE\x31\x19C\v"+
		"\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\a"+
		"\x33\x1A7\n\x33\f\x33\xE\x33\x1AA\v\x33\x3\x33\x3\x33\x3\x33\x3\x33\a"+
		"\x33\x1B0\n\x33\f\x33\xE\x33\x1B3\v\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3"+
		"\x35\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x5\x37\x1C5\n\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;"+
		"\x3;\x3<\x3<\x3<\x3=\x3=\x5=\x1D4\n=\x3>\x5>\x1D7\n>\x3>\a>\x1DA\n>\f"+
		">\xE>\x1DD\v>\x3>\x5>\x1E0\n>\x3?\x3?\x5?\x1E4\n?\x3@\x3@\x3@\x3@\x3@"+
		"\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\a\x43\x1F3\n"+
		"\x43\f\x43\xE\x43\x1F6\v\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3\x46\a\x46\x1FF\n\x46\f\x46\xE\x46\x202\v\x46\x3G\aG\x205\nG\fG\xE"+
		"G\x208\vG\x3G\x3G\aG\x20C\nG\fG\xEG\x20F\vG\x3H\x3H\x3I\x3I\x3I\x3J\x3"+
		"J\x3K\x3K\x3K\x3L\x3L\x3L\aL\x21E\nL\fL\xEL\x221\vL\x3M\x3M\x3M\x3M\a"+
		"M\x227\nM\fM\xEM\x22A\vM\x3N\x3N\x3N\x3N\x3N\x3O\x3O\x3O\x5O\x234\nO\x3"+
		"P\x3P\x3P\x3Q\x3Q\x3Q\x3R\x3R\x3R\x2\x2S\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90"+
		"\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\x2\b\x4\x2??\x41\x41\x4\x2>>\x43"+
		"\x43\x3\x2\x5\xF\x4\x2@@\x45\x45\x3\x2\x32\x33\x3\x2\'(\x22C\x2\xA4\x3"+
		"\x2\x2\x2\x4\xA7\x3\x2\x2\x2\x6\xAA\x3\x2\x2\x2\b\xAD\x3\x2\x2\x2\n\xC0"+
		"\x3\x2\x2\x2\f\xC3\x3\x2\x2\x2\xE\xC7\x3\x2\x2\x2\x10\xC9\x3\x2\x2\x2"+
		"\x12\xD5\x3\x2\x2\x2\x14\xD7\x3\x2\x2\x2\x16\xDE\x3\x2\x2\x2\x18\xE6\x3"+
		"\x2\x2\x2\x1A\xEC\x3\x2\x2\x2\x1C\xF0\x3\x2\x2\x2\x1E\xF4\x3\x2\x2\x2"+
		" \xF6\x3\x2\x2\x2\"\xFA\x3\x2\x2\x2$\xFD\x3\x2\x2\x2&\xFF\x3\x2\x2\x2"+
		"(\x107\x3\x2\x2\x2*\x10C\x3\x2\x2\x2,\x10F\x3\x2\x2\x2.\x11A\x3\x2\x2"+
		"\x2\x30\x123\x3\x2\x2\x2\x32\x12B\x3\x2\x2\x2\x34\x134\x3\x2\x2\x2\x36"+
		"\x136\x3\x2\x2\x2\x38\x13C\x3\x2\x2\x2:\x13E\x3\x2\x2\x2<\x142\x3\x2\x2"+
		"\x2>\x146\x3\x2\x2\x2@\x148\x3\x2\x2\x2\x42\x14A\x3\x2\x2\x2\x44\x152"+
		"\x3\x2\x2\x2\x46\x155\x3\x2\x2\x2H\x159\x3\x2\x2\x2J\x15D\x3\x2\x2\x2"+
		"L\x15F\x3\x2\x2\x2N\x164\x3\x2\x2\x2P\x169\x3\x2\x2\x2R\x173\x3\x2\x2"+
		"\x2T\x180\x3\x2\x2\x2V\x187\x3\x2\x2\x2X\x18B\x3\x2\x2\x2Z\x18D\x3\x2"+
		"\x2\x2\\\x190\x3\x2\x2\x2^\x193\x3\x2\x2\x2`\x196\x3\x2\x2\x2\x62\x1A0"+
		"\x3\x2\x2\x2\x64\x1A2\x3\x2\x2\x2\x66\x1B4\x3\x2\x2\x2h\x1B6\x3\x2\x2"+
		"\x2j\x1B9\x3\x2\x2\x2l\x1BC\x3\x2\x2\x2n\x1C6\x3\x2\x2\x2p\x1C8\x3\x2"+
		"\x2\x2r\x1CA\x3\x2\x2\x2t\x1CC\x3\x2\x2\x2v\x1CE\x3\x2\x2\x2x\x1D1\x3"+
		"\x2\x2\x2z\x1DB\x3\x2\x2\x2|\x1E3\x3\x2\x2\x2~\x1E5\x3\x2\x2\x2\x80\x1EA"+
		"\x3\x2\x2\x2\x82\x1EC\x3\x2\x2\x2\x84\x1EF\x3\x2\x2\x2\x86\x1F7\x3\x2"+
		"\x2\x2\x88\x1F9\x3\x2\x2\x2\x8A\x1FB\x3\x2\x2\x2\x8C\x206\x3\x2\x2\x2"+
		"\x8E\x210\x3\x2\x2\x2\x90\x212\x3\x2\x2\x2\x92\x215\x3\x2\x2\x2\x94\x217"+
		"\x3\x2\x2\x2\x96\x21A\x3\x2\x2\x2\x98\x222\x3\x2\x2\x2\x9A\x22B\x3\x2"+
		"\x2\x2\x9C\x230\x3\x2\x2\x2\x9E\x235\x3\x2\x2\x2\xA0\x238\x3\x2\x2\x2"+
		"\xA2\x23B\x3\x2\x2\x2\xA4\xA5\x5\x4\x3\x2\xA5\xA6\x5\n\x6\x2\xA6\x3\x3"+
		"\x2\x2\x2\xA7\xA8\a,\x2\x2\xA8\xA9\b\x3\x1\x2\xA9\x5\x3\x2\x2\x2\xAA\xAB"+
		"\x5\x4\x3\x2\xAB\xAC\x5\b\x5\x2\xAC\a\x3\x2\x2\x2\xAD\xAE\a\x3\x2\x2\xAE"+
		"\t\x3\x2\x2\x2\xAF\xC1\x5\x94K\x2\xB0\xC1\x5\x42\"\x2\xB1\xC1\x5\x98M"+
		"\x2\xB2\xC1\x5`\x31\x2\xB3\xC1\x5P)\x2\xB4\xC1\x5R*\x2\xB5\xC1\x5\x82"+
		"\x42\x2\xB6\xC1\x5J&\x2\xB7\xC1\x5\x64\x33\x2\xB8\xC1\x5\x9EP\x2\xB9\xC1"+
		"\x5x=\x2\xBA\xC1\x5\xA2R\x2\xBB\xC1\x5\x90I\x2\xBC\xC1\x5\xA0Q\x2\xBD"+
		"\xC1\x5\x92J\x2\xBE\xC1\x5\x62\x32\x2\xBF\xC1\x5\x66\x34\x2\xC0\xAF\x3"+
		"\x2\x2\x2\xC0\xB0\x3\x2\x2\x2\xC0\xB1\x3\x2\x2\x2\xC0\xB2\x3\x2\x2\x2"+
		"\xC0\xB3\x3\x2\x2\x2\xC0\xB4\x3\x2\x2\x2\xC0\xB5\x3\x2\x2\x2\xC0\xB6\x3"+
		"\x2\x2\x2\xC0\xB7\x3\x2\x2\x2\xC0\xB8\x3\x2\x2\x2\xC0\xB9\x3\x2\x2\x2"+
		"\xC0\xBA\x3\x2\x2\x2\xC0\xBB\x3\x2\x2\x2\xC0\xBC\x3\x2\x2\x2\xC0\xBD\x3"+
		"\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xBF\x3\x2\x2\x2\xC1\v\x3\x2\x2\x2\xC2"+
		"\xC4\x5\xE\b\x2\xC3\xC2\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x3\x2"+
		"\x2\x2\xC5\xC6\x5\x10\t\x2\xC6\r\x3\x2\x2\x2\xC7\xC8\t\x2\x2\x2\xC8\xF"+
		"\x3\x2\x2\x2\xC9\xCB\x5\x12\n\x2\xCA\xCC\x5\x18\r\x2\xCB\xCA\x3\x2\x2"+
		"\x2\xCB\xCC\x3\x2\x2\x2\xCC\x11\x3\x2\x2\x2\xCD\xCF\x5\x14\v\x2\xCE\xD0"+
		"\a\x42\x2\x2\xCF\xCE\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD6\x3\x2\x2"+
		"\x2\xD1\xD3\x5\x14\v\x2\xD2\xD1\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4"+
		"\x3\x2\x2\x2\xD4\xD6\x5\x16\f\x2\xD5\xCD\x3\x2\x2\x2\xD5\xD2\x3\x2\x2"+
		"\x2\xD6\x13\x3\x2\x2\x2\xD7\xDB\a,\x2\x2\xD8\xDA\a,\x2\x2\xD9\xD8\x3\x2"+
		"\x2\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC"+
		"\x15\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xDF\a\x42\x2\x2\xDF\xE3\a,\x2"+
		"\x2\xE0\xE2\a,\x2\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3"+
		"\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\x17\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2"+
		"\xE6\xE8\a\x4\x2\x2\xE7\xE9\x5\xE\b\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3"+
		"\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEB\x5\x14\v\x2\xEB\x19\x3\x2\x2\x2"+
		"\xEC\xED\a\x32\x2\x2\xED\x1B\x3\x2\x2\x2\xEE\xF1\x5\x1E\x10\x2\xEF\xF1"+
		"\x5(\x15\x2\xF0\xEE\x3\x2\x2\x2\xF0\xEF\x3\x2\x2\x2\xF1\x1D\x3\x2\x2\x2"+
		"\xF2\xF5\x5 \x11\x2\xF3\xF5\x5\"\x12\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF3\x3"+
		"\x2\x2\x2\xF5\x1F\x3\x2\x2\x2\xF6\xF8\a+\x2\x2\xF7\xF9\a,\x2\x2\xF8\xF7"+
		"\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9!\x3\x2\x2\x2\xFA\xFB\x5$\x13\x2\xFB"+
		"\xFC\x5&\x14\x2\xFC#\x3\x2\x2\x2\xFD\xFE\a+\x2\x2\xFE%\x3\x2\x2\x2\xFF"+
		"\x100\a<\x2\x2\x100\x103\x5,\x17\x2\x101\x102\a@\x2\x2\x102\x104\x5,\x17"+
		"\x2\x103\x101\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2"+
		"\x105\x106\a=\x2\x2\x106\'\x3\x2\x2\x2\x107\x108\a+\x2\x2\x108\x109\a"+
		"\x38\x2\x2\x109)\x3\x2\x2\x2\x10A\x10D\x5,\x17\x2\x10B\x10D\x5> \x2\x10C"+
		"\x10A\x3\x2\x2\x2\x10C\x10B\x3\x2\x2\x2\x10D+\x3\x2\x2\x2\x10E\x110\x5"+
		"\xE\b\x2\x10F\x10E\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111\x3\x2\x2"+
		"\x2\x111\x117\x5.\x18\x2\x112\x113\x5\xE\b\x2\x113\x114\x5.\x18\x2\x114"+
		"\x116\x3\x2\x2\x2\x115\x112\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117\x115"+
		"\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118-\x3\x2\x2\x2\x119\x117\x3\x2\x2"+
		"\x2\x11A\x120\x5\x30\x19\x2\x11B\x11C\x5\x32\x1A\x2\x11C\x11D\x5\x30\x19"+
		"\x2\x11D\x11F\x3\x2\x2\x2\x11E\x11B\x3\x2\x2\x2\x11F\x122\x3\x2\x2\x2"+
		"\x120\x11E\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121/\x3\x2\x2\x2\x122\x120"+
		"\x3\x2\x2\x2\x123\x128\x5\x34\x1B\x2\x124\x125\aJ\x2\x2\x125\x127\x5\x34"+
		"\x1B\x2\x126\x124\x3\x2\x2\x2\x127\x12A\x3\x2\x2\x2\x128\x126\x3\x2\x2"+
		"\x2\x128\x129\x3\x2\x2\x2\x129\x31\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12B"+
		"\x12C\t\x3\x2\x2\x12C\x33\x3\x2\x2\x2\x12D\x135\x5\x1E\x10\x2\x12E\x135"+
		"\x5\x10\t\x2\x12F\x135\x5\x36\x1C\x2\x130\x131\a<\x2\x2\x131\x132\x5,"+
		"\x17\x2\x132\x133\a=\x2\x2\x133\x135\x3\x2\x2\x2\x134\x12D\x3\x2\x2\x2"+
		"\x134\x12E\x3\x2\x2\x2\x134\x12F\x3\x2\x2\x2\x134\x130\x3\x2\x2\x2\x135"+
		"\x35\x3\x2\x2\x2\x136\x138\x5\x38\x1D\x2\x137\x139\x5:\x1E\x2\x138\x137"+
		"\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x37\x3\x2\x2\x2\x13A\x13D\x5\x44"+
		"#\x2\x13B\x13D\x5@!\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13B\x3\x2\x2\x2\x13D"+
		"\x39\x3\x2\x2\x2\x13E\x13F\a<\x2\x2\x13F\x140\x5<\x1F\x2\x140\x141\a="+
		"\x2\x2\x141;\x3\x2\x2\x2\x142\x143\x5,\x17\x2\x143=\x3\x2\x2\x2\x144\x147"+
		"\x5(\x15\x2\x145\x147\x5\x1A\xE\x2\x146\x144\x3\x2\x2\x2\x146\x145\x3"+
		"\x2\x2\x2\x147?\x3\x2\x2\x2\x148\x149\t\x4\x2\x2\x149\x41\x3\x2\x2\x2"+
		"\x14A\x14B\a\x10\x2\x2\x14B\x14D\x5\x44#\x2\x14C\x14E\x5\x46$\x2\x14D"+
		"\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150"+
		"\aG\x2\x2\x150\x151\x5,\x17\x2\x151\x43\x3\x2\x2\x2\x152\x153\a\x11\x2"+
		"\x2\x153\x154\a+\x2\x2\x154\x45\x3\x2\x2\x2\x155\x156\a<\x2\x2\x156\x157"+
		"\x5H%\x2\x157\x158\a=\x2\x2\x158G\x3\x2\x2\x2\x159\x15A\x5 \x11\x2\x15A"+
		"I\x3\x2\x2\x2\x15B\x15E\x5L\'\x2\x15C\x15E\x5N(\x2\x15D\x15B\x3\x2\x2"+
		"\x2\x15D\x15C\x3\x2\x2\x2\x15EK\x3\x2\x2\x2\x15F\x160\a\x12\x2\x2\x160"+
		"\x161\x5\x1E\x10\x2\x161\x162\aG\x2\x2\x162\x163\x5,\x17\x2\x163M\x3\x2"+
		"\x2\x2\x164\x165\a\x12\x2\x2\x165\x166\x5(\x15\x2\x166\x167\aG\x2\x2\x167"+
		"\x168\x5> \x2\x168O\x3\x2\x2\x2\x169\x16D\a\x13\x2\x2\x16A\x16C\a\x34"+
		"\x2\x2\x16B\x16A\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3\x2\x2"+
		"\x2\x16D\x16E\x3\x2\x2\x2\x16E\x170\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2"+
		"\x170\x171\a\x14\x2\x2\x171\x172\x5\x4\x3\x2\x172Q\x3\x2\x2\x2\x173\x174"+
		"\a\x15\x2\x2\x174\x175\x5T+\x2\x175\x176\a\x16\x2\x2\x176\x177\x5\x4\x3"+
		"\x2\x177S\x3\x2\x2\x2\x178\x179\x5,\x17\x2\x179\x17A\x5V,\x2\x17A\x17B"+
		"\x5,\x17\x2\x17B\x181\x3\x2\x2\x2\x17C\x17D\x5> \x2\x17D\x17E\x5X-\x2"+
		"\x17E\x17F\x5> \x2\x17F\x181\x3\x2\x2\x2\x180\x178\x3\x2\x2\x2\x180\x17C"+
		"\x3\x2\x2\x2\x181U\x3\x2\x2\x2\x182\x188\x5X-\x2\x183\x188\a\x46\x2\x2"+
		"\x184\x188\aH\x2\x2\x185\x188\x5Z.\x2\x186\x188\x5\\/\x2\x187\x182\x3"+
		"\x2\x2\x2\x187\x183\x3\x2\x2\x2\x187\x184\x3\x2\x2\x2\x187\x185\x3\x2"+
		"\x2\x2\x187\x186\x3\x2\x2\x2\x188W\x3\x2\x2\x2\x189\x18C\aG\x2\x2\x18A"+
		"\x18C\x5^\x30\x2\x18B\x189\x3\x2\x2\x2\x18B\x18A\x3\x2\x2\x2\x18CY\x3"+
		"\x2\x2\x2\x18D\x18E\aH\x2\x2\x18E\x18F\aG\x2\x2\x18F[\x3\x2\x2\x2\x190"+
		"\x191\a\x46\x2\x2\x191\x192\aG\x2\x2\x192]\x3\x2\x2\x2\x193\x194\a\x46"+
		"\x2\x2\x194\x195\aH\x2\x2\x195_\x3\x2\x2\x2\x196\x19A\a\x13\x2\x2\x197"+
		"\x199\a\x34\x2\x2\x198\x197\x3\x2\x2\x2\x199\x19C\x3\x2\x2\x2\x19A\x198"+
		"\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19D\x3\x2\x2\x2\x19C\x19A\x3"+
		"\x2\x2\x2\x19D\x19E\a\x17\x2\x2\x19E\x19F\x5\x4\x3\x2\x19F\x61\x3\x2\x2"+
		"\x2\x1A0\x1A1\a\x18\x2\x2\x1A1\x63\x3\x2\x2\x2\x1A2\x1A3\a\x19\x2\x2\x1A3"+
		"\x1A4\x5,\x17\x2\x1A4\x1A8\a\x13\x2\x2\x1A5\x1A7\a\x34\x2\x2\x1A6\x1A5"+
		"\x3\x2\x2\x2\x1A7\x1AA\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3"+
		"\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1AC\a\x14"+
		"\x2\x2\x1AC\x1B1\x5\x4\x3\x2\x1AD\x1AE\a@\x2\x2\x1AE\x1B0\x5\x4\x3\x2"+
		"\x1AF\x1AD\x3\x2\x2\x2\x1B0\x1B3\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B1"+
		"\x1B2\x3\x2\x2\x2\x1B2\x65\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B4\x1B5"+
		"\a\x1A\x2\x2\x1B5g\x3\x2\x2\x2\x1B6\x1B7\x5\x4\x3\x2\x1B7\x1B8\x5l\x37"+
		"\x2\x1B8i\x3\x2\x2\x2\x1B9\x1BA\x5\x4\x3\x2\x1BA\x1BB\x5v<\x2\x1BBk\x3"+
		"\x2\x2\x2\x1BC\x1BD\a\x1B\x2\x2\x1BD\x1BE\x5n\x38\x2\x1BE\x1BF\aG\x2\x2"+
		"\x1BF\x1C0\x5p\x39\x2\x1C0\x1C1\a\x14\x2\x2\x1C1\x1C4\x5r:\x2\x1C2\x1C3"+
		"\a\x1C\x2\x2\x1C3\x1C5\x5t;\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2"+
		"\x2\x1C5m\x3\x2\x2\x2\x1C6\x1C7\x5 \x11\x2\x1C7o\x3\x2\x2\x2\x1C8\x1C9"+
		"\x5,\x17\x2\x1C9q\x3\x2\x2\x2\x1CA\x1CB\x5,\x17\x2\x1CBs\x3\x2\x2\x2\x1CC"+
		"\x1CD\x5,\x17\x2\x1CDu\x3\x2\x2\x2\x1CE\x1CF\a\x1D\x2\x2\x1CF\x1D0\x5"+
		"n\x38\x2\x1D0w\x3\x2\x2\x2\x1D1\x1D3\a\x1E\x2\x2\x1D2\x1D4\x5z>\x2\x1D3"+
		"\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4y\x3\x2\x2\x2\x1D5\x1D7\x5"+
		"|?\x2\x1D6\x1D5\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2"+
		"\x1D8\x1DA\x5\x80\x41\x2\x1D9\x1D6\x3\x2\x2\x2\x1DA\x1DD\x3\x2\x2\x2\x1DB"+
		"\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DF\x3\x2\x2\x2\x1DD\x1DB"+
		"\x3\x2\x2\x2\x1DE\x1E0\x5|?\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2"+
		"\x2\x1E0{\x3\x2\x2\x2\x1E1\x1E4\x5*\x16\x2\x1E2\x1E4\x5~@\x2\x1E3\x1E1"+
		"\x3\x2\x2\x2\x1E3\x1E2\x3\x2\x2\x2\x1E4}\x3\x2\x2\x2\x1E5\x1E6\a\x1F\x2"+
		"\x2\x1E6\x1E7\a<\x2\x2\x1E7\x1E8\x5,\x17\x2\x1E8\x1E9\a=\x2\x2\x1E9\x7F"+
		"\x3\x2\x2\x2\x1EA\x1EB\t\x5\x2\x2\x1EB\x81\x3\x2\x2\x2\x1EC\x1ED\a \x2"+
		"\x2\x1ED\x1EE\x5\x84\x43\x2\x1EE\x83\x3\x2\x2\x2\x1EF\x1F4\x5\x1C\xF\x2"+
		"\x1F0\x1F1\a@\x2\x2\x1F1\x1F3\x5\x1C\xF\x2\x1F2\x1F0\x3\x2\x2\x2\x1F3"+
		"\x1F6\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x85"+
		"\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x1F8\a!\x2\x2\x1F8\x87\x3\x2\x2"+
		"\x2\x1F9\x1FA\x5\x8A\x46\x2\x1FA\x89\x3\x2\x2\x2\x1FB\x200\x5\x8CG\x2"+
		"\x1FC\x1FD\a@\x2\x2\x1FD\x1FF\x5\x8CG\x2\x1FE\x1FC\x3\x2\x2\x2\x1FF\x202"+
		"\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2\x201\x8B\x3\x2"+
		"\x2\x2\x202\x200\x3\x2\x2\x2\x203\x205\a\x34\x2\x2\x204\x203\x3\x2\x2"+
		"\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2"+
		"\x207\x209\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20D\x5\x8EH\x2\x20A"+
		"\x20C\a\x34\x2\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20B"+
		"\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x8D\x3\x2\x2\x2\x20F\x20D\x3\x2"+
		"\x2\x2\x210\x211\t\x6\x2\x2\x211\x8F\x3\x2\x2\x2\x212\x213\a\"\x2\x2\x213"+
		"\x214\x5\x84\x43\x2\x214\x91\x3\x2\x2\x2\x215\x216\a#\x2\x2\x216\x93\x3"+
		"\x2\x2\x2\x217\x218\a$\x2\x2\x218\x219\x5\x96L\x2\x219\x95\x3\x2\x2\x2"+
		"\x21A\x21F\x5\x8EH\x2\x21B\x21C\a@\x2\x2\x21C\x21E\x5\x8EH\x2\x21D\x21B"+
		"\x3\x2\x2\x2\x21E\x221\x3\x2\x2\x2\x21F\x21D\x3\x2\x2\x2\x21F\x220\x3"+
		"\x2\x2\x2\x220\x97\x3\x2\x2\x2\x221\x21F\x3\x2\x2\x2\x222\x223\a%\x2\x2"+
		"\x223\x228\x5\x9AN\x2\x224\x225\a@\x2\x2\x225\x227\x5\x9AN\x2\x226\x224"+
		"\x3\x2\x2\x2\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3"+
		"\x2\x2\x2\x229\x99\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x22C\x5$\x13"+
		"\x2\x22C\x22D\a<\x2\x2\x22D\x22E\x5\x9CO\x2\x22E\x22F\a=\x2\x2\x22F\x9B"+
		"\x3\x2\x2\x2\x230\x233\x5\x14\v\x2\x231\x232\a@\x2\x2\x232\x234\x5\x14"+
		"\v\x2\x233\x231\x3\x2\x2\x2\x233\x234\x3\x2\x2\x2\x234\x9D\x3\x2\x2\x2"+
		"\x235\x236\a&\x2\x2\x236\x237\t\a\x2\x2\x237\x9F\x3\x2\x2\x2\x238\x239"+
		"\a)\x2\x2\x239\x23A\a\x31\x2\x2\x23A\xA1\x3\x2\x2\x2\x23B\x23C\a*\x2\x2"+
		"\x23C\xA3\x3\x2\x2\x2.\xC0\xC3\xCB\xCF\xD2\xD5\xDB\xE3\xE8\xF0\xF4\xF8"+
		"\x103\x10C\x10F\x117\x120\x128\x134\x138\x13C\x146\x14D\x15D\x16D\x180"+
		"\x187\x18B\x19A\x1A8\x1B1\x1C4\x1D3\x1D6\x1DB\x1DF\x1E3\x1F4\x200\x206"+
		"\x20D\x21F\x228\x233";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
