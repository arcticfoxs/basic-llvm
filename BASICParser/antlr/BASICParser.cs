//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../BASIC.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class BASICParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, WS=36, SPACE=37, EXCLAMATIONMARK=38, 
		QUOTATIONMARK=39, NUMBERSIGN=40, DOLLARSIGN=41, PERCENTSIGN=42, AMPERSAND=43, 
		APOSTROPHE=44, LEFTPARENTHESIS=45, RIGHTPARENTHESIS=46, ASTERISK=47, PLUSSIGN=48, 
		COMMA=49, MINUSSIGN=50, FULLSTOP=51, SOLIDUS=52, COLON=53, SEMICOLON=54, 
		LESSTHANSIGN=55, EQUALSSIGN=56, GREATERTHANSIGN=57, QUESTIONMARK=58, CIRCUMFLEXACCENT=59, 
		UNDERLINE=60, LETTERE=61, DIGIT=62, LETTER=63;
	public const int
		RULE_remarkstatement = 0, RULE_line = 1, RULE_linenumber = 2, RULE_endline = 3, 
		RULE_endstatement = 4, RULE_statement = 5, RULE_numericconstant = 6, RULE_sign = 7, 
		RULE_numericrep = 8, RULE_significand = 9, RULE_integer = 10, RULE_fraction = 11, 
		RULE_exrad = 12, RULE_stringconstant = 13, RULE_variable = 14, RULE_numericvariable = 15, 
		RULE_simplenumericvariable = 16, RULE_numericarrayelement = 17, RULE_numericarrayname = 18, 
		RULE_subscript = 19, RULE_stringvariable = 20, RULE_expression = 21, RULE_numericexpression = 22, 
		RULE_term = 23, RULE_factor = 24, RULE_multiplier = 25, RULE_primary = 26, 
		RULE_numericfunctionref = 27, RULE_numericfunctionname = 28, RULE_argumentlist = 29, 
		RULE_argument = 30, RULE_stringexpression = 31, RULE_numericsuppliedfunction = 32, 
		RULE_defstatement = 33, RULE_numericdefinedfunction = 34, RULE_parameterlist = 35, 
		RULE_parameter = 36, RULE_letstatement = 37, RULE_numericletstatement = 38, 
		RULE_stringletstatement = 39, RULE_gotostatement = 40, RULE_ifthenstatement = 41, 
		RULE_relationalexpression = 42, RULE_relation = 43, RULE_equalityrelation = 44, 
		RULE_notless = 45, RULE_notgreater = 46, RULE_notequals = 47, RULE_gosubstatement = 48, 
		RULE_returnstatement = 49, RULE_ongotostatement = 50, RULE_stopstatement = 51, 
		RULE_forstatement = 52, RULE_controlvariable = 53, RULE_initialvalue = 54, 
		RULE_limit = 55, RULE_increment = 56, RULE_nextstatement = 57, RULE_printstatement = 58, 
		RULE_printlist = 59, RULE_printitem = 60, RULE_printseparator = 61, RULE_inputstatement = 62, 
		RULE_dimensionstatement = 63, RULE_bounds = 64, RULE_readstatement = 65, 
		RULE_writestatement = 66, RULE_filename = 67, RULE_randomizestatement = 68, 
		RULE_stringcharacter = 69, RULE_quotedstringcharacter = 70, RULE_unquotedstringcharacter = 71, 
		RULE_plainstringcharacter = 72, RULE_remarkstring = 73, RULE_quotedstring = 74, 
		RULE_unquotedstring = 75;
	public static readonly string[] ruleNames = {
		"remarkstatement", "line", "linenumber", "endline", "endstatement", "statement", 
		"numericconstant", "sign", "numericrep", "significand", "integer", "fraction", 
		"exrad", "stringconstant", "variable", "numericvariable", "simplenumericvariable", 
		"numericarrayelement", "numericarrayname", "subscript", "stringvariable", 
		"expression", "numericexpression", "term", "factor", "multiplier", "primary", 
		"numericfunctionref", "numericfunctionname", "argumentlist", "argument", 
		"stringexpression", "numericsuppliedfunction", "defstatement", "numericdefinedfunction", 
		"parameterlist", "parameter", "letstatement", "numericletstatement", "stringletstatement", 
		"gotostatement", "ifthenstatement", "relationalexpression", "relation", 
		"equalityrelation", "notless", "notgreater", "notequals", "gosubstatement", 
		"returnstatement", "ongotostatement", "stopstatement", "forstatement", 
		"controlvariable", "initialvalue", "limit", "increment", "nextstatement", 
		"printstatement", "printlist", "printitem", "printseparator", "inputstatement", 
		"dimensionstatement", "bounds", "readstatement", "writestatement", "filename", 
		"randomizestatement", "stringcharacter", "quotedstringcharacter", "unquotedstringcharacter", 
		"plainstringcharacter", "remarkstring", "quotedstring", "unquotedstring"
	};

	private static readonly string[] _LiteralNames = {
		null, "'REM'", "'END'", "'ABS'", "'ATN'", "'COS'", "'EXP'", "'INT'", "'LOG'", 
		"'RND'", "'SGN'", "'SIN'", "'SQR'", "'TAN'", "'MOD2'", "'PI'", "'DEF'", 
		"'FN'", "'LET'", "'GO'", "'TO'", "'IF'", "'THEN'", "'SUB'", "'RETURN'", 
		"'ON'", "'STOP'", "'FOR'", "'STEP'", "'NEXT'", "'PRINT'", "'INPUT'", "'DIM'", 
		"'READ'", "'WRITE'", "'RANDOMIZE'", null, "' '", "'!'", "'\"'", "'#'", 
		"'$'", "'%'", "'&'", "'''", "'('", "')'", "'*'", "'+'", "','", "'-'", 
		"'.'", "'/'", "':'", "';'", "'<'", "'='", "'>'", "'?'", "'^'", "'_'", 
		"'E'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "SPACE", "EXCLAMATIONMARK", "QUOTATIONMARK", "NUMBERSIGN", "DOLLARSIGN", 
		"PERCENTSIGN", "AMPERSAND", "APOSTROPHE", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", 
		"ASTERISK", "PLUSSIGN", "COMMA", "MINUSSIGN", "FULLSTOP", "SOLIDUS", "COLON", 
		"SEMICOLON", "LESSTHANSIGN", "EQUALSSIGN", "GREATERTHANSIGN", "QUESTIONMARK", 
		"CIRCUMFLEXACCENT", "UNDERLINE", "LETTERE", "DIGIT", "LETTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BASIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BASICParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class RemarkstatementContext : ParserRuleContext {
		public RemarkstringContext remarkstring() {
			return GetRuleContext<RemarkstringContext>(0);
		}
		public RemarkstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstatement(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstatementContext remarkstatement() {
		RemarkstatementContext _localctx = new RemarkstatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_remarkstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__0);
			State = 153; remarkstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndlineContext endline() {
			return GetRuleContext<EndlineContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 160;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 155; linenumber();
					}
				}

				State = 158; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; endline();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_linenumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndlineContext : ParserRuleContext {
		public EndstatementContext endstatement() {
			return GetRuleContext<EndstatementContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public EndlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndline(this);
		}
	}

	[RuleVersion(0)]
	public EndlineContext endline() {
		EndlineContext _localctx = new EndlineContext(Context, State);
		EnterRule(_localctx, 6, RULE_endline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 164; linenumber();
				}
			}

			State = 167; endstatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstatementContext : ParserRuleContext {
		public EndstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEndstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEndstatement(this);
		}
	}

	[RuleVersion(0)]
	public EndstatementContext endstatement() {
		EndstatementContext _localctx = new EndstatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_endstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DefstatementContext defstatement() {
			return GetRuleContext<DefstatementContext>(0);
		}
		public DimensionstatementContext dimensionstatement() {
			return GetRuleContext<DimensionstatementContext>(0);
		}
		public GosubstatementContext gosubstatement() {
			return GetRuleContext<GosubstatementContext>(0);
		}
		public GotostatementContext gotostatement() {
			return GetRuleContext<GotostatementContext>(0);
		}
		public IfthenstatementContext ifthenstatement() {
			return GetRuleContext<IfthenstatementContext>(0);
		}
		public InputstatementContext inputstatement() {
			return GetRuleContext<InputstatementContext>(0);
		}
		public LetstatementContext letstatement() {
			return GetRuleContext<LetstatementContext>(0);
		}
		public OngotostatementContext ongotostatement() {
			return GetRuleContext<OngotostatementContext>(0);
		}
		public PrintstatementContext printstatement() {
			return GetRuleContext<PrintstatementContext>(0);
		}
		public RandomizestatementContext randomizestatement() {
			return GetRuleContext<RandomizestatementContext>(0);
		}
		public RemarkstatementContext remarkstatement() {
			return GetRuleContext<RemarkstatementContext>(0);
		}
		public ReturnstatementContext returnstatement() {
			return GetRuleContext<ReturnstatementContext>(0);
		}
		public StopstatementContext stopstatement() {
			return GetRuleContext<StopstatementContext>(0);
		}
		public ForstatementContext forstatement() {
			return GetRuleContext<ForstatementContext>(0);
		}
		public NextstatementContext nextstatement() {
			return GetRuleContext<NextstatementContext>(0);
		}
		public ReadstatementContext readstatement() {
			return GetRuleContext<ReadstatementContext>(0);
		}
		public WritestatementContext writestatement() {
			return GetRuleContext<WritestatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 188;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; defstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; dimensionstatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; gosubstatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174; gotostatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175; ifthenstatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176; inputstatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 177; letstatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 178; ongotostatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 179; printstatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 180; randomizestatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 181; remarkstatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 182; returnstatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 183; stopstatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 184; forstatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 185; nextstatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 186; readstatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 187; writestatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericconstantContext : ParserRuleContext {
		public NumericrepContext numericrep() {
			return GetRuleContext<NumericrepContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public NumericconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericconstant(this);
		}
	}

	[RuleVersion(0)]
	public NumericconstantContext numericconstant() {
		NumericconstantContext _localctx = new NumericconstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_numericconstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 190; sign();
				}
			}

			State = 193; numericrep();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 14, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.La(1);
			if ( !(_la==PLUSSIGN || _la==MINUSSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericrepContext : ParserRuleContext {
		public SignificandContext significand() {
			return GetRuleContext<SignificandContext>(0);
		}
		public ExradContext exrad() {
			return GetRuleContext<ExradContext>(0);
		}
		public NumericrepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericrep; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericrep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericrep(this);
		}
	}

	[RuleVersion(0)]
	public NumericrepContext numericrep() {
		NumericrepContext _localctx = new NumericrepContext(Context, State);
		EnterRule(_localctx, 16, RULE_numericrep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; significand();
			State = 199;
			_la = TokenStream.La(1);
			if (_la==LETTERE) {
				{
				State = 198; exrad();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignificandContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public FractionContext fraction() {
			return GetRuleContext<FractionContext>(0);
		}
		public SignificandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_significand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSignificand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSignificand(this);
		}
	}

	[RuleVersion(0)]
	public SignificandContext significand() {
		SignificandContext _localctx = new SignificandContext(Context, State);
		EnterRule(_localctx, 18, RULE_significand);
		int _la;
		try {
			State = 209;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; integer();
				State = 203;
				_la = TokenStream.La(1);
				if (_la==FULLSTOP) {
					{
					State = 202; Match(FULLSTOP);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 205; integer();
					}
				}

				State = 208; fraction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 20, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(DIGIT);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DIGIT) {
				{
				{
				State = 212; Match(DIGIT);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionContext : ParserRuleContext {
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public FractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFraction(this);
		}
	}

	[RuleVersion(0)]
	public FractionContext fraction() {
		FractionContext _localctx = new FractionContext(Context, State);
		EnterRule(_localctx, 22, RULE_fraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(FULLSTOP);
			State = 219; Match(DIGIT);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DIGIT) {
				{
				{
				State = 220; Match(DIGIT);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExradContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ExradContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exrad; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExrad(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExrad(this);
		}
	}

	[RuleVersion(0)]
	public ExradContext exrad() {
		ExradContext _localctx = new ExradContext(Context, State);
		EnterRule(_localctx, 24, RULE_exrad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(LETTERE);
			State = 228;
			_la = TokenStream.La(1);
			if (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				State = 227; sign();
				}
			}

			State = 230; integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringconstantContext : ParserRuleContext {
		public QuotedstringContext quotedstring() {
			return GetRuleContext<QuotedstringContext>(0);
		}
		public StringconstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringconstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringconstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringconstant(this);
		}
	}

	[RuleVersion(0)]
	public StringconstantContext stringconstant() {
		StringconstantContext _localctx = new StringconstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_stringconstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; quotedstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable);
		try {
			State = 236;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; numericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; stringvariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public NumericarrayelementContext numericarrayelement() {
			return GetRuleContext<NumericarrayelementContext>(0);
		}
		public NumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public NumericvariableContext numericvariable() {
		NumericvariableContext _localctx = new NumericvariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_numericvariable);
		try {
			State = 240;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; simplenumericvariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; numericarrayelement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplenumericvariableContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public SimplenumericvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplenumericvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSimplenumericvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSimplenumericvariable(this);
		}
	}

	[RuleVersion(0)]
	public SimplenumericvariableContext simplenumericvariable() {
		SimplenumericvariableContext _localctx = new SimplenumericvariableContext(Context, State);
		EnterRule(_localctx, 32, RULE_simplenumericvariable);
		int _la;
		try {
			State = 250;
			switch (TokenStream.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(LETTER);
				State = 244;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 243; Match(DIGIT);
					}
				}

				}
				break;
			case LETTERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(LETTERE);
				State = 248;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 247; Match(DIGIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarrayelementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		public NumericarrayelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayelement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayelement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayelement(this);
		}
	}

	[RuleVersion(0)]
	public NumericarrayelementContext numericarrayelement() {
		NumericarrayelementContext _localctx = new NumericarrayelementContext(Context, State);
		EnterRule(_localctx, 34, RULE_numericarrayelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; numericarrayname();
			State = 253; subscript();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericarraynameContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericarraynameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericarrayname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericarrayname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericarrayname(this);
		}
	}

	[RuleVersion(0)]
	public NumericarraynameContext numericarrayname() {
		NumericarraynameContext _localctx = new NumericarraynameContext(Context, State);
		EnterRule(_localctx, 36, RULE_numericarrayname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.La(1);
			if ( !(_la==LETTERE || _la==LETTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 38, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(LEFTPARENTHESIS);
			State = 258; numericexpression();
			State = 259; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringvariableContext : ParserRuleContext {
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public StringvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringvariable(this);
		}
	}

	[RuleVersion(0)]
	public StringvariableContext stringvariable() {
		StringvariableContext _localctx = new StringvariableContext(Context, State);
		EnterRule(_localctx, 40, RULE_stringvariable);
		try {
			State = 265;
			switch (TokenStream.La(1)) {
			case LETTERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; Match(LETTERE);
				State = 262; Match(DOLLARSIGN);
				}
				break;
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; Match(LETTER);
				State = 264; Match(DOLLARSIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		try {
			State = 269;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericexpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public SignContext[] sign() {
			return GetRuleContexts<SignContext>();
		}
		public SignContext sign(int i) {
			return GetRuleContext<SignContext>(i);
		}
		public NumericexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericexpression(this);
		}
	}

	[RuleVersion(0)]
	public NumericexpressionContext numericexpression() {
		NumericexpressionContext _localctx = new NumericexpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_numericexpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 271; sign();
				}
				break;
			}
			State = 274; term();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PLUSSIGN || _la==MINUSSIGN) {
				{
				{
				State = 275; sign();
				State = 276; term();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MultiplierContext[] multiplier() {
			return GetRuleContexts<MultiplierContext>();
		}
		public MultiplierContext multiplier(int i) {
			return GetRuleContext<MultiplierContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 46, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; factor();
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ASTERISK || _la==SOLIDUS) {
				{
				{
				State = 284; multiplier();
				State = 285; factor();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		public ITerminalNode[] CIRCUMFLEXACCENT() { return GetTokens(BASICParser.CIRCUMFLEXACCENT); }
		public ITerminalNode CIRCUMFLEXACCENT(int i) {
			return GetToken(BASICParser.CIRCUMFLEXACCENT, i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 48, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; primary();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CIRCUMFLEXACCENT) {
				{
				{
				State = 293; Match(CIRCUMFLEXACCENT);
				State = 294; primary();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplierContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public MultiplierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterMultiplier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitMultiplier(this);
		}
	}

	[RuleVersion(0)]
	public MultiplierContext multiplier() {
		MultiplierContext _localctx = new MultiplierContext(Context, State);
		EnterRule(_localctx, 50, RULE_multiplier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = TokenStream.La(1);
			if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public NumericconstantContext numericconstant() {
			return GetRuleContext<NumericconstantContext>(0);
		}
		public NumericfunctionrefContext numericfunctionref() {
			return GetRuleContext<NumericfunctionrefContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 52, RULE_primary);
		try {
			State = 309;
			switch (TokenStream.La(1)) {
			case LETTERE:
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; numericvariable();
				}
				break;
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; numericconstant();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304; numericfunctionref();
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305; Match(LEFTPARENTHESIS);
				State = 306; numericexpression();
				State = 307; Match(RIGHTPARENTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionrefContext : ParserRuleContext {
		public NumericfunctionnameContext numericfunctionname() {
			return GetRuleContext<NumericfunctionnameContext>(0);
		}
		public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public NumericfunctionrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionref(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionrefContext numericfunctionref() {
		NumericfunctionrefContext _localctx = new NumericfunctionrefContext(Context, State);
		EnterRule(_localctx, 54, RULE_numericfunctionref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; numericfunctionname();
			State = 313;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 312; argumentlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericfunctionnameContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public NumericsuppliedfunctionContext numericsuppliedfunction() {
			return GetRuleContext<NumericsuppliedfunctionContext>(0);
		}
		public NumericfunctionnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericfunctionname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericfunctionname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericfunctionname(this);
		}
	}

	[RuleVersion(0)]
	public NumericfunctionnameContext numericfunctionname() {
		NumericfunctionnameContext _localctx = new NumericfunctionnameContext(Context, State);
		EnterRule(_localctx, 56, RULE_numericfunctionname);
		try {
			State = 317;
			switch (TokenStream.La(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; numericdefinedfunction();
				}
				break;
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; numericsuppliedfunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ArgumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgumentlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgumentlist(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentlistContext argumentlist() {
		ArgumentlistContext _localctx = new ArgumentlistContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(LEFTPARENTHESIS);
			State = 320; argument();
			State = 321; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringexpressionContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public StringconstantContext stringconstant() {
			return GetRuleContext<StringconstantContext>(0);
		}
		public StringexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringexpression(this);
		}
	}

	[RuleVersion(0)]
	public StringexpressionContext stringexpression() {
		StringexpressionContext _localctx = new StringexpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_stringexpression);
		try {
			State = 327;
			switch (TokenStream.La(1)) {
			case LETTERE:
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; stringvariable();
				}
				break;
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; stringconstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericsuppliedfunctionContext : ParserRuleContext {
		public NumericsuppliedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericsuppliedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericsuppliedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericsuppliedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericsuppliedfunctionContext numericsuppliedfunction() {
		NumericsuppliedfunctionContext _localctx = new NumericsuppliedfunctionContext(Context, State);
		EnterRule(_localctx, 64, RULE_numericsuppliedfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstatementContext : ParserRuleContext {
		public NumericdefinedfunctionContext numericdefinedfunction() {
			return GetRuleContext<NumericdefinedfunctionContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public ParameterlistContext parameterlist() {
			return GetRuleContext<ParameterlistContext>(0);
		}
		public DefstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDefstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDefstatement(this);
		}
	}

	[RuleVersion(0)]
	public DefstatementContext defstatement() {
		DefstatementContext _localctx = new DefstatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_defstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(T__15);
			State = 332; numericdefinedfunction();
			State = 334;
			_la = TokenStream.La(1);
			if (_la==LEFTPARENTHESIS) {
				{
				State = 333; parameterlist();
				}
			}

			State = 336; Match(EQUALSSIGN);
			State = 337; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericdefinedfunctionContext : ParserRuleContext {
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public NumericdefinedfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericdefinedfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericdefinedfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericdefinedfunction(this);
		}
	}

	[RuleVersion(0)]
	public NumericdefinedfunctionContext numericdefinedfunction() {
		NumericdefinedfunctionContext _localctx = new NumericdefinedfunctionContext(Context, State);
		EnterRule(_localctx, 68, RULE_numericdefinedfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__16);
			State = 340; Match(LETTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterlistContext : ParserRuleContext {
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ParameterlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameterlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameterlist(this);
		}
	}

	[RuleVersion(0)]
	public ParameterlistContext parameterlist() {
		ParameterlistContext _localctx = new ParameterlistContext(Context, State);
		EnterRule(_localctx, 70, RULE_parameterlist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(LEFTPARENTHESIS);
			State = 343; parameter();
			State = 344; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstatementContext : ParserRuleContext {
		public NumericletstatementContext numericletstatement() {
			return GetRuleContext<NumericletstatementContext>(0);
		}
		public StringletstatementContext stringletstatement() {
			return GetRuleContext<StringletstatementContext>(0);
		}
		public LetstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLetstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLetstatement(this);
		}
	}

	[RuleVersion(0)]
	public LetstatementContext letstatement() {
		LetstatementContext _localctx = new LetstatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_letstatement);
		try {
			State = 350;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; numericletstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; stringletstatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericletstatementContext : ParserRuleContext {
		public NumericvariableContext numericvariable() {
			return GetRuleContext<NumericvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public NumericletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNumericletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNumericletstatement(this);
		}
	}

	[RuleVersion(0)]
	public NumericletstatementContext numericletstatement() {
		NumericletstatementContext _localctx = new NumericletstatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_numericletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(T__17);
			State = 353; numericvariable();
			State = 354; Match(EQUALSSIGN);
			State = 355; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringletstatementContext : ParserRuleContext {
		public StringvariableContext stringvariable() {
			return GetRuleContext<StringvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public StringletstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringletstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringletstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringletstatement(this);
		}
	}

	[RuleVersion(0)]
	public StringletstatementContext stringletstatement() {
		StringletstatementContext _localctx = new StringletstatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_stringletstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(T__17);
			State = 358; stringvariable();
			State = 359; Match(EQUALSSIGN);
			State = 360; stringexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGotostatement(this);
		}
	}

	[RuleVersion(0)]
	public GotostatementContext gotostatement() {
		GotostatementContext _localctx = new GotostatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_gotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(T__18);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 363; Match(SPACE);
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 369; Match(T__19);
			State = 370; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenstatementContext : ParserRuleContext {
		public RelationalexpressionContext relationalexpression() {
			return GetRuleContext<RelationalexpressionContext>(0);
		}
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public IfthenstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIfthenstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIfthenstatement(this);
		}
	}

	[RuleVersion(0)]
	public IfthenstatementContext ifthenstatement() {
		IfthenstatementContext _localctx = new IfthenstatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_ifthenstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__20);
			State = 373; relationalexpression();
			State = 374; Match(T__21);
			State = 375; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalexpressionContext : ParserRuleContext {
		public NumericexpressionContext[] numericexpression() {
			return GetRuleContexts<NumericexpressionContext>();
		}
		public NumericexpressionContext numericexpression(int i) {
			return GetRuleContext<NumericexpressionContext>(i);
		}
		public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public StringexpressionContext[] stringexpression() {
			return GetRuleContexts<StringexpressionContext>();
		}
		public StringexpressionContext stringexpression(int i) {
			return GetRuleContext<StringexpressionContext>(i);
		}
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public RelationalexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelationalexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelationalexpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalexpressionContext relationalexpression() {
		RelationalexpressionContext _localctx = new RelationalexpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_relationalexpression);
		try {
			State = 385;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377; numericexpression();
				State = 378; relation();
				State = 379; numericexpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381; stringexpression();
				State = 382; equalityrelation();
				State = 383; stringexpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public EqualityrelationContext equalityrelation() {
			return GetRuleContext<EqualityrelationContext>(0);
		}
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotlessContext notless() {
			return GetRuleContext<NotlessContext>(0);
		}
		public NotgreaterContext notgreater() {
			return GetRuleContext<NotgreaterContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 86, RULE_relation);
		try {
			State = 392;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; equalityrelation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; Match(LESSTHANSIGN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; Match(GREATERTHANSIGN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390; notless();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391; notgreater();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityrelationContext : ParserRuleContext {
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotequalsContext notequals() {
			return GetRuleContext<NotequalsContext>(0);
		}
		public EqualityrelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityrelation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterEqualityrelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitEqualityrelation(this);
		}
	}

	[RuleVersion(0)]
	public EqualityrelationContext equalityrelation() {
		EqualityrelationContext _localctx = new EqualityrelationContext(Context, State);
		EnterRule(_localctx, 88, RULE_equalityrelation);
		try {
			State = 396;
			switch (TokenStream.La(1)) {
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; Match(EQUALSSIGN);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395; notequals();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotlessContext : ParserRuleContext {
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notless; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotless(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotless(this);
		}
	}

	[RuleVersion(0)]
	public NotlessContext notless() {
		NotlessContext _localctx = new NotlessContext(Context, State);
		EnterRule(_localctx, 90, RULE_notless);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(GREATERTHANSIGN);
			State = 399; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotgreaterContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public NotgreaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notgreater; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotgreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotgreater(this);
		}
	}

	[RuleVersion(0)]
	public NotgreaterContext notgreater() {
		NotgreaterContext _localctx = new NotgreaterContext(Context, State);
		EnterRule(_localctx, 92, RULE_notgreater);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LESSTHANSIGN);
			State = 402; Match(EQUALSSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotequalsContext : ParserRuleContext {
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public NotequalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notequals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNotequals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNotequals(this);
		}
	}

	[RuleVersion(0)]
	public NotequalsContext notequals() {
		NotequalsContext _localctx = new NotequalsContext(Context, State);
		EnterRule(_localctx, 94, RULE_notequals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(LESSTHANSIGN);
			State = 405; Match(GREATERTHANSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstatementContext : ParserRuleContext {
		public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public GosubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterGosubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitGosubstatement(this);
		}
	}

	[RuleVersion(0)]
	public GosubstatementContext gosubstatement() {
		GosubstatementContext _localctx = new GosubstatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_gosubstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T__18);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 408; Match(SPACE);
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 414; Match(T__22);
			State = 415; linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstatementContext : ParserRuleContext {
		public ReturnstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReturnstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReturnstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstatementContext returnstatement() {
		ReturnstatementContext _localctx = new ReturnstatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_returnstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostatementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		public ITerminalNode[] SPACE() { return GetTokens(BASICParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(BASICParser.SPACE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BASICParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BASICParser.COMMA, i);
		}
		public OngotostatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterOngotostatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitOngotostatement(this);
		}
	}

	[RuleVersion(0)]
	public OngotostatementContext ongotostatement() {
		OngotostatementContext _localctx = new OngotostatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_ongotostatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(T__24);
			State = 420; numericexpression();
			State = 421; Match(T__18);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SPACE) {
				{
				{
				State = 422; Match(SPACE);
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 428; Match(T__19);
			State = 429; linenumber();
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 430; Match(COMMA);
				State = 431; linenumber();
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopstatementContext : ParserRuleContext {
		public StopstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStopstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStopstatement(this);
		}
	}

	[RuleVersion(0)]
	public StopstatementContext stopstatement() {
		StopstatementContext _localctx = new StopstatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_stopstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public InitialvalueContext initialvalue() {
			return GetRuleContext<InitialvalueContext>(0);
		}
		public LimitContext limit() {
			return GetRuleContext<LimitContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public ForstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
	}

	[RuleVersion(0)]
	public ForstatementContext forstatement() {
		ForstatementContext _localctx = new ForstatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_forstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T__26);
			State = 440; controlvariable();
			State = 441; Match(EQUALSSIGN);
			State = 442; initialvalue();
			State = 443; Match(T__19);
			State = 444; limit();
			State = 447;
			_la = TokenStream.La(1);
			if (_la==T__27) {
				{
				State = 445; Match(T__27);
				State = 446; increment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlvariableContext : ParserRuleContext {
		public SimplenumericvariableContext simplenumericvariable() {
			return GetRuleContext<SimplenumericvariableContext>(0);
		}
		public ControlvariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlvariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterControlvariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitControlvariable(this);
		}
	}

	[RuleVersion(0)]
	public ControlvariableContext controlvariable() {
		ControlvariableContext _localctx = new ControlvariableContext(Context, State);
		EnterRule(_localctx, 106, RULE_controlvariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; simplenumericvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialvalueContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public InitialvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInitialvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInitialvalue(this);
		}
	}

	[RuleVersion(0)]
	public InitialvalueContext initialvalue() {
		InitialvalueContext _localctx = new InitialvalueContext(Context, State);
		EnterRule(_localctx, 108, RULE_initialvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public LimitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterLimit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitLimit(this);
		}
	}

	[RuleVersion(0)]
	public LimitContext limit() {
		LimitContext _localctx = new LimitContext(Context, State);
		EnterRule(_localctx, 110, RULE_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 112, RULE_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstatementContext : ParserRuleContext {
		public ControlvariableContext controlvariable() {
			return GetRuleContext<ControlvariableContext>(0);
		}
		public NextstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterNextstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitNextstatement(this);
		}
	}

	[RuleVersion(0)]
	public NextstatementContext nextstatement() {
		NextstatementContext _localctx = new NextstatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_nextstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__28);
			State = 458; controlvariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstatementContext : ParserRuleContext {
		public PrintlistContext printlist() {
			return GetRuleContext<PrintlistContext>(0);
		}
		public PrintstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintstatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintstatementContext printstatement() {
		PrintstatementContext _localctx = new PrintstatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_printstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(T__29);
			State = 462;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << COMMA) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << SEMICOLON) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0)) {
				{
				State = 461; printlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlistContext : ParserRuleContext {
		public PrintseparatorContext[] printseparator() {
			return GetRuleContexts<PrintseparatorContext>();
		}
		public PrintseparatorContext printseparator(int i) {
			return GetRuleContext<PrintseparatorContext>(i);
		}
		public PrintitemContext[] printitem() {
			return GetRuleContexts<PrintitemContext>();
		}
		public PrintitemContext printitem(int i) {
			return GetRuleContext<PrintitemContext>(i);
		}
		public PrintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintlist(this);
		}
	}

	[RuleVersion(0)]
	public PrintlistContext printlist() {
		PrintlistContext _localctx = new PrintlistContext(Context, State);
		EnterRule(_localctx, 118, RULE_printlist);
		int _la;
		try {
			int _alt;
			State = 476;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 465;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0)) {
							{
							State = 464; printitem();
							}
						}

						State = 467; printseparator();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 470;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 473;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << QUOTATIONMARK) | (1L << LEFTPARENTHESIS) | (1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0)) {
					{
					State = 472; printitem();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; printitem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintitemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintitem(this);
		}
	}

	[RuleVersion(0)]
	public PrintitemContext printitem() {
		PrintitemContext _localctx = new PrintitemContext(Context, State);
		EnterRule(_localctx, 120, RULE_printitem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintseparatorContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public PrintseparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printseparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPrintseparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPrintseparator(this);
		}
	}

	[RuleVersion(0)]
	public PrintseparatorContext printseparator() {
		PrintseparatorContext _localctx = new PrintseparatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_printseparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_la = TokenStream.La(1);
			if ( !(_la==COMMA || _la==SEMICOLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstatementContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public InputstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterInputstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitInputstatement(this);
		}
	}

	[RuleVersion(0)]
	public InputstatementContext inputstatement() {
		InputstatementContext _localctx = new InputstatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_inputstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(T__30);
			State = 483; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionstatementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public BoundsContext bounds() {
			return GetRuleContext<BoundsContext>(0);
		}
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public DimensionstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensionstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDimensionstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDimensionstatement(this);
		}
	}

	[RuleVersion(0)]
	public DimensionstatementContext dimensionstatement() {
		DimensionstatementContext _localctx = new DimensionstatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_dimensionstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(T__31);
			State = 486; numericarrayname();
			State = 487; Match(LEFTPARENTHESIS);
			State = 488; bounds();
			State = 489; Match(RIGHTPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundsContext : ParserRuleContext {
		public NumericexpressionContext numericexpression() {
			return GetRuleContext<NumericexpressionContext>(0);
		}
		public BoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitBounds(this);
		}
	}

	[RuleVersion(0)]
	public BoundsContext bounds() {
		BoundsContext _localctx = new BoundsContext(Context, State);
		EnterRule(_localctx, 128, RULE_bounds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; numericexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstatementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public FilenameContext filename() {
			return GetRuleContext<FilenameContext>(0);
		}
		public ReadstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterReadstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitReadstatement(this);
		}
	}

	[RuleVersion(0)]
	public ReadstatementContext readstatement() {
		ReadstatementContext _localctx = new ReadstatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_readstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; Match(T__32);
			State = 494; numericarrayname();
			State = 495; filename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WritestatementContext : ParserRuleContext {
		public NumericarraynameContext numericarrayname() {
			return GetRuleContext<NumericarraynameContext>(0);
		}
		public FilenameContext filename() {
			return GetRuleContext<FilenameContext>(0);
		}
		public WritestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterWritestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitWritestatement(this);
		}
	}

	[RuleVersion(0)]
	public WritestatementContext writestatement() {
		WritestatementContext _localctx = new WritestatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_writestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(T__33);
			State = 498; numericarrayname();
			State = 499; filename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilenameContext : ParserRuleContext {
		public StringexpressionContext stringexpression() {
			return GetRuleContext<StringexpressionContext>(0);
		}
		public FilenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterFilename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitFilename(this);
		}
	}

	[RuleVersion(0)]
	public FilenameContext filename() {
		FilenameContext _localctx = new FilenameContext(Context, State);
		EnterRule(_localctx, 134, RULE_filename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; stringexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizestatementContext : ParserRuleContext {
		public RandomizestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizestatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRandomizestatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRandomizestatement(this);
		}
	}

	[RuleVersion(0)]
	public RandomizestatementContext randomizestatement() {
		RandomizestatementContext _localctx = new RandomizestatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_randomizestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringcharacterContext : ParserRuleContext {
		public ITerminalNode QUOTATIONMARK() { return GetToken(BASICParser.QUOTATIONMARK, 0); }
		public QuotedstringcharacterContext quotedstringcharacter() {
			return GetRuleContext<QuotedstringcharacterContext>(0);
		}
		public StringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterStringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitStringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public StringcharacterContext stringcharacter() {
		StringcharacterContext _localctx = new StringcharacterContext(Context, State);
		EnterRule(_localctx, 138, RULE_stringcharacter);
		try {
			State = 507;
			switch (TokenStream.La(1)) {
			case QUOTATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; Match(QUOTATIONMARK);
				}
				break;
			case SPACE:
			case EXCLAMATIONMARK:
			case NUMBERSIGN:
			case DOLLARSIGN:
			case PERCENTSIGN:
			case AMPERSAND:
			case APOSTROPHE:
			case LEFTPARENTHESIS:
			case RIGHTPARENTHESIS:
			case ASTERISK:
			case PLUSSIGN:
			case COMMA:
			case MINUSSIGN:
			case FULLSTOP:
			case SOLIDUS:
			case COLON:
			case SEMICOLON:
			case LESSTHANSIGN:
			case EQUALSSIGN:
			case GREATERTHANSIGN:
			case QUESTIONMARK:
			case CIRCUMFLEXACCENT:
			case UNDERLINE:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506; quotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(BASICParser.EXCLAMATIONMARK, 0); }
		public ITerminalNode NUMBERSIGN() { return GetToken(BASICParser.NUMBERSIGN, 0); }
		public ITerminalNode DOLLARSIGN() { return GetToken(BASICParser.DOLLARSIGN, 0); }
		public ITerminalNode PERCENTSIGN() { return GetToken(BASICParser.PERCENTSIGN, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(BASICParser.AMPERSAND, 0); }
		public ITerminalNode APOSTROPHE() { return GetToken(BASICParser.APOSTROPHE, 0); }
		public ITerminalNode LEFTPARENTHESIS() { return GetToken(BASICParser.LEFTPARENTHESIS, 0); }
		public ITerminalNode RIGHTPARENTHESIS() { return GetToken(BASICParser.RIGHTPARENTHESIS, 0); }
		public ITerminalNode ASTERISK() { return GetToken(BASICParser.ASTERISK, 0); }
		public ITerminalNode COMMA() { return GetToken(BASICParser.COMMA, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(BASICParser.SOLIDUS, 0); }
		public ITerminalNode COLON() { return GetToken(BASICParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BASICParser.SEMICOLON, 0); }
		public ITerminalNode LESSTHANSIGN() { return GetToken(BASICParser.LESSTHANSIGN, 0); }
		public ITerminalNode EQUALSSIGN() { return GetToken(BASICParser.EQUALSSIGN, 0); }
		public ITerminalNode GREATERTHANSIGN() { return GetToken(BASICParser.GREATERTHANSIGN, 0); }
		public ITerminalNode QUESTIONMARK() { return GetToken(BASICParser.QUESTIONMARK, 0); }
		public ITerminalNode CIRCUMFLEXACCENT() { return GetToken(BASICParser.CIRCUMFLEXACCENT, 0); }
		public ITerminalNode UNDERLINE() { return GetToken(BASICParser.UNDERLINE, 0); }
		public UnquotedstringcharacterContext unquotedstringcharacter() {
			return GetRuleContext<UnquotedstringcharacterContext>(0);
		}
		public QuotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringcharacterContext quotedstringcharacter() {
		QuotedstringcharacterContext _localctx = new QuotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 140, RULE_quotedstringcharacter);
		try {
			State = 529;
			switch (TokenStream.La(1)) {
			case EXCLAMATIONMARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; Match(EXCLAMATIONMARK);
				}
				break;
			case NUMBERSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; Match(NUMBERSIGN);
				}
				break;
			case DOLLARSIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 511; Match(DOLLARSIGN);
				}
				break;
			case PERCENTSIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 512; Match(PERCENTSIGN);
				}
				break;
			case AMPERSAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 513; Match(AMPERSAND);
				}
				break;
			case APOSTROPHE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 514; Match(APOSTROPHE);
				}
				break;
			case LEFTPARENTHESIS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 515; Match(LEFTPARENTHESIS);
				}
				break;
			case RIGHTPARENTHESIS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 516; Match(RIGHTPARENTHESIS);
				}
				break;
			case ASTERISK:
				EnterOuterAlt(_localctx, 9);
				{
				State = 517; Match(ASTERISK);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 10);
				{
				State = 518; Match(COMMA);
				}
				break;
			case SOLIDUS:
				EnterOuterAlt(_localctx, 11);
				{
				State = 519; Match(SOLIDUS);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 520; Match(COLON);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 13);
				{
				State = 521; Match(SEMICOLON);
				}
				break;
			case LESSTHANSIGN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 522; Match(LESSTHANSIGN);
				}
				break;
			case EQUALSSIGN:
				EnterOuterAlt(_localctx, 15);
				{
				State = 523; Match(EQUALSSIGN);
				}
				break;
			case GREATERTHANSIGN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 524; Match(GREATERTHANSIGN);
				}
				break;
			case QUESTIONMARK:
				EnterOuterAlt(_localctx, 17);
				{
				State = 525; Match(QUESTIONMARK);
				}
				break;
			case CIRCUMFLEXACCENT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 526; Match(CIRCUMFLEXACCENT);
				}
				break;
			case UNDERLINE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 527; Match(UNDERLINE);
				}
				break;
			case SPACE:
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 20);
				{
				State = 528; unquotedstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringcharacterContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(BASICParser.SPACE, 0); }
		public PlainstringcharacterContext plainstringcharacter() {
			return GetRuleContext<PlainstringcharacterContext>(0);
		}
		public UnquotedstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringcharacterContext unquotedstringcharacter() {
		UnquotedstringcharacterContext _localctx = new UnquotedstringcharacterContext(Context, State);
		EnterRule(_localctx, 142, RULE_unquotedstringcharacter);
		try {
			State = 533;
			switch (TokenStream.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531; Match(SPACE);
				}
				break;
			case PLUSSIGN:
			case MINUSSIGN:
			case FULLSTOP:
			case LETTERE:
			case DIGIT:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; plainstringcharacter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainstringcharacterContext : ParserRuleContext {
		public ITerminalNode PLUSSIGN() { return GetToken(BASICParser.PLUSSIGN, 0); }
		public ITerminalNode MINUSSIGN() { return GetToken(BASICParser.MINUSSIGN, 0); }
		public ITerminalNode FULLSTOP() { return GetToken(BASICParser.FULLSTOP, 0); }
		public ITerminalNode DIGIT() { return GetToken(BASICParser.DIGIT, 0); }
		public ITerminalNode LETTER() { return GetToken(BASICParser.LETTER, 0); }
		public ITerminalNode LETTERE() { return GetToken(BASICParser.LETTERE, 0); }
		public PlainstringcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainstringcharacter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterPlainstringcharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitPlainstringcharacter(this);
		}
	}

	[RuleVersion(0)]
	public PlainstringcharacterContext plainstringcharacter() {
		PlainstringcharacterContext _localctx = new PlainstringcharacterContext(Context, State);
		EnterRule(_localctx, 144, RULE_plainstringcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUSSIGN) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemarkstringContext : ParserRuleContext {
		public StringcharacterContext[] stringcharacter() {
			return GetRuleContexts<StringcharacterContext>();
		}
		public StringcharacterContext stringcharacter(int i) {
			return GetRuleContext<StringcharacterContext>(i);
		}
		public RemarkstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remarkstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterRemarkstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitRemarkstring(this);
		}
	}

	[RuleVersion(0)]
	public RemarkstringContext remarkstring() {
		RemarkstringContext _localctx = new RemarkstringContext(Context, State);
		EnterRule(_localctx, 146, RULE_remarkstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 537; stringcharacter();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPACE) | (1L << EXCLAMATIONMARK) | (1L << QUOTATIONMARK) | (1L << NUMBERSIGN) | (1L << DOLLARSIGN) | (1L << PERCENTSIGN) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFTPARENTHESIS) | (1L << RIGHTPARENTHESIS) | (1L << ASTERISK) | (1L << PLUSSIGN) | (1L << COMMA) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << SOLIDUS) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESSTHANSIGN) | (1L << EQUALSSIGN) | (1L << GREATERTHANSIGN) | (1L << QUESTIONMARK) | (1L << CIRCUMFLEXACCENT) | (1L << UNDERLINE) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedstringContext : ParserRuleContext {
		public ITerminalNode[] QUOTATIONMARK() { return GetTokens(BASICParser.QUOTATIONMARK); }
		public ITerminalNode QUOTATIONMARK(int i) {
			return GetToken(BASICParser.QUOTATIONMARK, i);
		}
		public QuotedstringcharacterContext[] quotedstringcharacter() {
			return GetRuleContexts<QuotedstringcharacterContext>();
		}
		public QuotedstringcharacterContext quotedstringcharacter(int i) {
			return GetRuleContext<QuotedstringcharacterContext>(i);
		}
		public QuotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterQuotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitQuotedstring(this);
		}
	}

	[RuleVersion(0)]
	public QuotedstringContext quotedstring() {
		QuotedstringContext _localctx = new QuotedstringContext(Context, State);
		EnterRule(_localctx, 148, RULE_quotedstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542; Match(QUOTATIONMARK);
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPACE) | (1L << EXCLAMATIONMARK) | (1L << NUMBERSIGN) | (1L << DOLLARSIGN) | (1L << PERCENTSIGN) | (1L << AMPERSAND) | (1L << APOSTROPHE) | (1L << LEFTPARENTHESIS) | (1L << RIGHTPARENTHESIS) | (1L << ASTERISK) | (1L << PLUSSIGN) | (1L << COMMA) | (1L << MINUSSIGN) | (1L << FULLSTOP) | (1L << SOLIDUS) | (1L << COLON) | (1L << SEMICOLON) | (1L << LESSTHANSIGN) | (1L << EQUALSSIGN) | (1L << GREATERTHANSIGN) | (1L << QUESTIONMARK) | (1L << CIRCUMFLEXACCENT) | (1L << UNDERLINE) | (1L << LETTERE) | (1L << DIGIT) | (1L << LETTER))) != 0)) {
				{
				{
				State = 543; quotedstringcharacter();
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 549; Match(QUOTATIONMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedstringContext : ParserRuleContext {
		public PlainstringcharacterContext[] plainstringcharacter() {
			return GetRuleContexts<PlainstringcharacterContext>();
		}
		public PlainstringcharacterContext plainstringcharacter(int i) {
			return GetRuleContext<PlainstringcharacterContext>(i);
		}
		public UnquotedstringcharacterContext[] unquotedstringcharacter() {
			return GetRuleContexts<UnquotedstringcharacterContext>();
		}
		public UnquotedstringcharacterContext unquotedstringcharacter(int i) {
			return GetRuleContext<UnquotedstringcharacterContext>(i);
		}
		public UnquotedstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterUnquotedstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitUnquotedstring(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedstringContext unquotedstring() {
		UnquotedstringContext _localctx = new UnquotedstringContext(Context, State);
		EnterRule(_localctx, 150, RULE_unquotedstring);
		try {
			int _alt;
			State = 561;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551; plainstringcharacter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552; plainstringcharacter();
				State = 556;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 553; unquotedstringcharacter();
						}
						} 
					}
					State = 558;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				State = 559; plainstringcharacter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x41\x236\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x5\x3\x9F\n\x3\x3\x3\x3\x3\x5\x3\xA3\n\x3\x3\x4\x3\x4"+
		"\x3\x5\x5\x5\xA8\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xBF"+
		"\n\a\x3\b\x5\b\xC2\n\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x5\n\xCA\n\n\x3\v"+
		"\x3\v\x5\v\xCE\n\v\x3\v\x5\v\xD1\n\v\x3\v\x5\v\xD4\n\v\x3\f\x3\f\a\f\xD8"+
		"\n\f\f\f\xE\f\xDB\v\f\x3\r\x3\r\x3\r\a\r\xE0\n\r\f\r\xE\r\xE3\v\r\x3\xE"+
		"\x3\xE\x5\xE\xE7\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xEF"+
		"\n\x10\x3\x11\x3\x11\x5\x11\xF3\n\x11\x3\x12\x3\x12\x5\x12\xF7\n\x12\x3"+
		"\x12\x3\x12\x5\x12\xFB\n\x12\x5\x12\xFD\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x10C\n\x16\x3\x17\x3\x17\x5\x17\x110\n\x17\x3\x18\x5\x18\x113\n\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x119\n\x18\f\x18\xE\x18\x11C\v\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x122\n\x19\f\x19\xE\x19\x125\v\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x12A\n\x1A\f\x1A\xE\x1A\x12D\v\x1A\x3\x1B"+
		"\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x138\n"+
		"\x1C\x3\x1D\x3\x1D\x5\x1D\x13C\n\x1D\x3\x1E\x3\x1E\x5\x1E\x140\n\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x5!\x14A\n!\x3\"\x3\"\x3#\x3"+
		"#\x3#\x5#\x151\n#\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3&\x3&\x3\'"+
		"\x3\'\x5\'\x161\n\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\a"+
		"*\x16F\n*\f*\xE*\x172\v*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x5,\x184\n,\x3-\x3-\x3-\x3-\x3-\x5-\x18B\n-\x3.\x3."+
		"\x5.\x18F\n.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x32\x3\x32\a\x32\x19C\n\x32\f\x32\xE\x32\x19F\v\x32\x3\x32\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x1AA\n\x34\f\x34"+
		"\xE\x34\x1AD\v\x34\x3\x34\x3\x34\x3\x34\x3\x34\a\x34\x1B3\n\x34\f\x34"+
		"\xE\x34\x1B6\v\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x5\x36\x1C2\n\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39"+
		"\x3\x39\x3:\x3:\x3;\x3;\x3;\x3<\x3<\x5<\x1D1\n<\x3=\x5=\x1D4\n=\x3=\x6"+
		"=\x1D7\n=\r=\xE=\x1D8\x3=\x5=\x1DC\n=\x3=\x5=\x1DF\n=\x3>\x3>\x3?\x3?"+
		"\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3"+
		"\x46\x3\x46\x3G\x3G\x5G\x1FE\nG\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x214\nH\x3I\x3I\x5I\x218"+
		"\nI\x3J\x3J\x3K\x6K\x21D\nK\rK\xEK\x21E\x3L\x3L\aL\x223\nL\fL\xEL\x226"+
		"\vL\x3L\x3L\x3M\x3M\x3M\aM\x22D\nM\fM\xEM\x230\vM\x3M\x3M\x5M\x234\nM"+
		"\x3M\x2\x2N\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,"+
		".\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnpr"+
		"tvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x2\b\x4\x2"+
		"\x32\x32\x34\x34\x4\x2??\x41\x41\x4\x2\x31\x31\x36\x36\x3\x2\x5\x11\x4"+
		"\x2\x33\x33\x38\x38\x5\x2\x32\x32\x34\x35?\x41\x240\x2\x9A\x3\x2\x2\x2"+
		"\x4\xA2\x3\x2\x2\x2\x6\xA4\x3\x2\x2\x2\b\xA7\x3\x2\x2\x2\n\xAB\x3\x2\x2"+
		"\x2\f\xBE\x3\x2\x2\x2\xE\xC1\x3\x2\x2\x2\x10\xC5\x3\x2\x2\x2\x12\xC7\x3"+
		"\x2\x2\x2\x14\xD3\x3\x2\x2\x2\x16\xD5\x3\x2\x2\x2\x18\xDC\x3\x2\x2\x2"+
		"\x1A\xE4\x3\x2\x2\x2\x1C\xEA\x3\x2\x2\x2\x1E\xEE\x3\x2\x2\x2 \xF2\x3\x2"+
		"\x2\x2\"\xFC\x3\x2\x2\x2$\xFE\x3\x2\x2\x2&\x101\x3\x2\x2\x2(\x103\x3\x2"+
		"\x2\x2*\x10B\x3\x2\x2\x2,\x10F\x3\x2\x2\x2.\x112\x3\x2\x2\x2\x30\x11D"+
		"\x3\x2\x2\x2\x32\x126\x3\x2\x2\x2\x34\x12E\x3\x2\x2\x2\x36\x137\x3\x2"+
		"\x2\x2\x38\x139\x3\x2\x2\x2:\x13F\x3\x2\x2\x2<\x141\x3\x2\x2\x2>\x145"+
		"\x3\x2\x2\x2@\x149\x3\x2\x2\x2\x42\x14B\x3\x2\x2\x2\x44\x14D\x3\x2\x2"+
		"\x2\x46\x155\x3\x2\x2\x2H\x158\x3\x2\x2\x2J\x15C\x3\x2\x2\x2L\x160\x3"+
		"\x2\x2\x2N\x162\x3\x2\x2\x2P\x167\x3\x2\x2\x2R\x16C\x3\x2\x2\x2T\x176"+
		"\x3\x2\x2\x2V\x183\x3\x2\x2\x2X\x18A\x3\x2\x2\x2Z\x18E\x3\x2\x2\x2\\\x190"+
		"\x3\x2\x2\x2^\x193\x3\x2\x2\x2`\x196\x3\x2\x2\x2\x62\x199\x3\x2\x2\x2"+
		"\x64\x1A3\x3\x2\x2\x2\x66\x1A5\x3\x2\x2\x2h\x1B7\x3\x2\x2\x2j\x1B9\x3"+
		"\x2\x2\x2l\x1C3\x3\x2\x2\x2n\x1C5\x3\x2\x2\x2p\x1C7\x3\x2\x2\x2r\x1C9"+
		"\x3\x2\x2\x2t\x1CB\x3\x2\x2\x2v\x1CE\x3\x2\x2\x2x\x1DE\x3\x2\x2\x2z\x1E0"+
		"\x3\x2\x2\x2|\x1E2\x3\x2\x2\x2~\x1E4\x3\x2\x2\x2\x80\x1E7\x3\x2\x2\x2"+
		"\x82\x1ED\x3\x2\x2\x2\x84\x1EF\x3\x2\x2\x2\x86\x1F3\x3\x2\x2\x2\x88\x1F7"+
		"\x3\x2\x2\x2\x8A\x1F9\x3\x2\x2\x2\x8C\x1FD\x3\x2\x2\x2\x8E\x213\x3\x2"+
		"\x2\x2\x90\x217\x3\x2\x2\x2\x92\x219\x3\x2\x2\x2\x94\x21C\x3\x2\x2\x2"+
		"\x96\x220\x3\x2\x2\x2\x98\x233\x3\x2\x2\x2\x9A\x9B\a\x3\x2\x2\x9B\x9C"+
		"\x5\x94K\x2\x9C\x3\x3\x2\x2\x2\x9D\x9F\x5\x6\x4\x2\x9E\x9D\x3\x2\x2\x2"+
		"\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA3\x5\f\a\x2\xA1\xA3\x5"+
		"\b\x5\x2\xA2\x9E\x3\x2\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\x5\x3\x2\x2\x2\xA4"+
		"\xA5\x5\x16\f\x2\xA5\a\x3\x2\x2\x2\xA6\xA8\x5\x6\x4\x2\xA7\xA6\x3\x2\x2"+
		"\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x5\n\x6\x2\xAA\t\x3"+
		"\x2\x2\x2\xAB\xAC\a\x4\x2\x2\xAC\v\x3\x2\x2\x2\xAD\xBF\x5\x44#\x2\xAE"+
		"\xBF\x5\x80\x41\x2\xAF\xBF\x5\x62\x32\x2\xB0\xBF\x5R*\x2\xB1\xBF\x5T+"+
		"\x2\xB2\xBF\x5~@\x2\xB3\xBF\x5L\'\x2\xB4\xBF\x5\x66\x34\x2\xB5\xBF\x5"+
		"v<\x2\xB6\xBF\x5\x8A\x46\x2\xB7\xBF\x5\x2\x2\x2\xB8\xBF\x5\x64\x33\x2"+
		"\xB9\xBF\x5h\x35\x2\xBA\xBF\x5j\x36\x2\xBB\xBF\x5t;\x2\xBC\xBF\x5\x84"+
		"\x43\x2\xBD\xBF\x5\x86\x44\x2\xBE\xAD\x3\x2\x2\x2\xBE\xAE\x3\x2\x2\x2"+
		"\xBE\xAF\x3\x2\x2\x2\xBE\xB0\x3\x2\x2\x2\xBE\xB1\x3\x2\x2\x2\xBE\xB2\x3"+
		"\x2\x2\x2\xBE\xB3\x3\x2\x2\x2\xBE\xB4\x3\x2\x2\x2\xBE\xB5\x3\x2\x2\x2"+
		"\xBE\xB6\x3\x2\x2\x2\xBE\xB7\x3\x2\x2\x2\xBE\xB8\x3\x2\x2\x2\xBE\xB9\x3"+
		"\x2\x2\x2\xBE\xBA\x3\x2\x2\x2\xBE\xBB\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2"+
		"\xBE\xBD\x3\x2\x2\x2\xBF\r\x3\x2\x2\x2\xC0\xC2\x5\x10\t\x2\xC1\xC0\x3"+
		"\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x5\x12\n\x2"+
		"\xC4\xF\x3\x2\x2\x2\xC5\xC6\t\x2\x2\x2\xC6\x11\x3\x2\x2\x2\xC7\xC9\x5"+
		"\x14\v\x2\xC8\xCA\x5\x1A\xE\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2"+
		"\xCA\x13\x3\x2\x2\x2\xCB\xCD\x5\x16\f\x2\xCC\xCE\a\x35\x2\x2\xCD\xCC\x3"+
		"\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD4\x3\x2\x2\x2\xCF\xD1\x5\x16\f\x2"+
		"\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x5"+
		"\x18\r\x2\xD3\xCB\x3\x2\x2\x2\xD3\xD0\x3\x2\x2\x2\xD4\x15\x3\x2\x2\x2"+
		"\xD5\xD9\a@\x2\x2\xD6\xD8\a@\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\xDB\x3\x2\x2"+
		"\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x17\x3\x2\x2\x2\xDB\xD9"+
		"\x3\x2\x2\x2\xDC\xDD\a\x35\x2\x2\xDD\xE1\a@\x2\x2\xDE\xE0\a@\x2\x2\xDF"+
		"\xDE\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2"+
		"\x2\x2\xE2\x19\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE6\a?\x2\x2\xE5\xE7"+
		"\x5\x10\t\x2\xE6\xE5\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE8\x3\x2\x2"+
		"\x2\xE8\xE9\x5\x16\f\x2\xE9\x1B\x3\x2\x2\x2\xEA\xEB\x5\x96L\x2\xEB\x1D"+
		"\x3\x2\x2\x2\xEC\xEF\x5 \x11\x2\xED\xEF\x5*\x16\x2\xEE\xEC\x3\x2\x2\x2"+
		"\xEE\xED\x3\x2\x2\x2\xEF\x1F\x3\x2\x2\x2\xF0\xF3\x5\"\x12\x2\xF1\xF3\x5"+
		"$\x13\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3!\x3\x2\x2\x2\xF4"+
		"\xF6\a\x41\x2\x2\xF5\xF7\a@\x2\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7\x3\x2\x2"+
		"\x2\xF7\xFD\x3\x2\x2\x2\xF8\xFA\a?\x2\x2\xF9\xFB\a@\x2\x2\xFA\xF9\x3\x2"+
		"\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC\xF4\x3\x2\x2\x2\xFC"+
		"\xF8\x3\x2\x2\x2\xFD#\x3\x2\x2\x2\xFE\xFF\x5&\x14\x2\xFF\x100\x5(\x15"+
		"\x2\x100%\x3\x2\x2\x2\x101\x102\t\x3\x2\x2\x102\'\x3\x2\x2\x2\x103\x104"+
		"\a/\x2\x2\x104\x105\x5.\x18\x2\x105\x106\a\x30\x2\x2\x106)\x3\x2\x2\x2"+
		"\x107\x108\a?\x2\x2\x108\x10C\a+\x2\x2\x109\x10A\a\x41\x2\x2\x10A\x10C"+
		"\a+\x2\x2\x10B\x107\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C+\x3\x2\x2\x2"+
		"\x10D\x110\x5.\x18\x2\x10E\x110\x5@!\x2\x10F\x10D\x3\x2\x2\x2\x10F\x10E"+
		"\x3\x2\x2\x2\x110-\x3\x2\x2\x2\x111\x113\x5\x10\t\x2\x112\x111\x3\x2\x2"+
		"\x2\x112\x113\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x11A\x5\x30\x19\x2"+
		"\x115\x116\x5\x10\t\x2\x116\x117\x5\x30\x19\x2\x117\x119\x3\x2\x2\x2\x118"+
		"\x115\x3\x2\x2\x2\x119\x11C\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B"+
		"\x3\x2\x2\x2\x11B/\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x123\x5\x32"+
		"\x1A\x2\x11E\x11F\x5\x34\x1B\x2\x11F\x120\x5\x32\x1A\x2\x120\x122\x3\x2"+
		"\x2\x2\x121\x11E\x3\x2\x2\x2\x122\x125\x3\x2\x2\x2\x123\x121\x3\x2\x2"+
		"\x2\x123\x124\x3\x2\x2\x2\x124\x31\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x126"+
		"\x12B\x5\x36\x1C\x2\x127\x128\a=\x2\x2\x128\x12A\x5\x36\x1C\x2\x129\x127"+
		"\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3"+
		"\x2\x2\x2\x12C\x33\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E\x12F\t\x4\x2"+
		"\x2\x12F\x35\x3\x2\x2\x2\x130\x138\x5 \x11\x2\x131\x138\x5\xE\b\x2\x132"+
		"\x138\x5\x38\x1D\x2\x133\x134\a/\x2\x2\x134\x135\x5.\x18\x2\x135\x136"+
		"\a\x30\x2\x2\x136\x138\x3\x2\x2\x2\x137\x130\x3\x2\x2\x2\x137\x131\x3"+
		"\x2\x2\x2\x137\x132\x3\x2\x2\x2\x137\x133\x3\x2\x2\x2\x138\x37\x3\x2\x2"+
		"\x2\x139\x13B\x5:\x1E\x2\x13A\x13C\x5<\x1F\x2\x13B\x13A\x3\x2\x2\x2\x13B"+
		"\x13C\x3\x2\x2\x2\x13C\x39\x3\x2\x2\x2\x13D\x140\x5\x46$\x2\x13E\x140"+
		"\x5\x42\"\x2\x13F\x13D\x3\x2\x2\x2\x13F\x13E\x3\x2\x2\x2\x140;\x3\x2\x2"+
		"\x2\x141\x142\a/\x2\x2\x142\x143\x5> \x2\x143\x144\a\x30\x2\x2\x144=\x3"+
		"\x2\x2\x2\x145\x146\x5.\x18\x2\x146?\x3\x2\x2\x2\x147\x14A\x5*\x16\x2"+
		"\x148\x14A\x5\x1C\xF\x2\x149\x147\x3\x2\x2\x2\x149\x148\x3\x2\x2\x2\x14A"+
		"\x41\x3\x2\x2\x2\x14B\x14C\t\x5\x2\x2\x14C\x43\x3\x2\x2\x2\x14D\x14E\a"+
		"\x12\x2\x2\x14E\x150\x5\x46$\x2\x14F\x151\x5H%\x2\x150\x14F\x3\x2\x2\x2"+
		"\x150\x151\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x153\a:\x2\x2\x153\x154"+
		"\x5.\x18\x2\x154\x45\x3\x2\x2\x2\x155\x156\a\x13\x2\x2\x156\x157\a\x41"+
		"\x2\x2\x157G\x3\x2\x2\x2\x158\x159\a/\x2\x2\x159\x15A\x5J&\x2\x15A\x15B"+
		"\a\x30\x2\x2\x15BI\x3\x2\x2\x2\x15C\x15D\x5\"\x12\x2\x15DK\x3\x2\x2\x2"+
		"\x15E\x161\x5N(\x2\x15F\x161\x5P)\x2\x160\x15E\x3\x2\x2\x2\x160\x15F\x3"+
		"\x2\x2\x2\x161M\x3\x2\x2\x2\x162\x163\a\x14\x2\x2\x163\x164\x5 \x11\x2"+
		"\x164\x165\a:\x2\x2\x165\x166\x5.\x18\x2\x166O\x3\x2\x2\x2\x167\x168\a"+
		"\x14\x2\x2\x168\x169\x5*\x16\x2\x169\x16A\a:\x2\x2\x16A\x16B\x5@!\x2\x16B"+
		"Q\x3\x2\x2\x2\x16C\x170\a\x15\x2\x2\x16D\x16F\a\'\x2\x2\x16E\x16D\x3\x2"+
		"\x2\x2\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2"+
		"\x2\x171\x173\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x174\a\x16\x2\x2"+
		"\x174\x175\x5\x6\x4\x2\x175S\x3\x2\x2\x2\x176\x177\a\x17\x2\x2\x177\x178"+
		"\x5V,\x2\x178\x179\a\x18\x2\x2\x179\x17A\x5\x6\x4\x2\x17AU\x3\x2\x2\x2"+
		"\x17B\x17C\x5.\x18\x2\x17C\x17D\x5X-\x2\x17D\x17E\x5.\x18\x2\x17E\x184"+
		"\x3\x2\x2\x2\x17F\x180\x5@!\x2\x180\x181\x5Z.\x2\x181\x182\x5@!\x2\x182"+
		"\x184\x3\x2\x2\x2\x183\x17B\x3\x2\x2\x2\x183\x17F\x3\x2\x2\x2\x184W\x3"+
		"\x2\x2\x2\x185\x18B\x5Z.\x2\x186\x18B\a\x39\x2\x2\x187\x18B\a;\x2\x2\x188"+
		"\x18B\x5\\/\x2\x189\x18B\x5^\x30\x2\x18A\x185\x3\x2\x2\x2\x18A\x186\x3"+
		"\x2\x2\x2\x18A\x187\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x189\x3\x2"+
		"\x2\x2\x18BY\x3\x2\x2\x2\x18C\x18F\a:\x2\x2\x18D\x18F\x5`\x31\x2\x18E"+
		"\x18C\x3\x2\x2\x2\x18E\x18D\x3\x2\x2\x2\x18F[\x3\x2\x2\x2\x190\x191\a"+
		";\x2\x2\x191\x192\a:\x2\x2\x192]\x3\x2\x2\x2\x193\x194\a\x39\x2\x2\x194"+
		"\x195\a:\x2\x2\x195_\x3\x2\x2\x2\x196\x197\a\x39\x2\x2\x197\x198\a;\x2"+
		"\x2\x198\x61\x3\x2\x2\x2\x199\x19D\a\x15\x2\x2\x19A\x19C\a\'\x2\x2\x19B"+
		"\x19A\x3\x2\x2\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19E"+
		"\x3\x2\x2\x2\x19E\x1A0\x3\x2\x2\x2\x19F\x19D\x3\x2\x2\x2\x1A0\x1A1\a\x19"+
		"\x2\x2\x1A1\x1A2\x5\x6\x4\x2\x1A2\x63\x3\x2\x2\x2\x1A3\x1A4\a\x1A\x2\x2"+
		"\x1A4\x65\x3\x2\x2\x2\x1A5\x1A6\a\x1B\x2\x2\x1A6\x1A7\x5.\x18\x2\x1A7"+
		"\x1AB\a\x15\x2\x2\x1A8\x1AA\a\'\x2\x2\x1A9\x1A8\x3\x2\x2\x2\x1AA\x1AD"+
		"\x3\x2\x2\x2\x1AB\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\x3"+
		"\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AE\x1AF\a\x16\x2\x2\x1AF\x1B4\x5\x6"+
		"\x4\x2\x1B0\x1B1\a\x33\x2\x2\x1B1\x1B3\x5\x6\x4\x2\x1B2\x1B0\x3\x2\x2"+
		"\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2"+
		"\x1B5g\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B7\x1B8\a\x1C\x2\x2\x1B8i\x3"+
		"\x2\x2\x2\x1B9\x1BA\a\x1D\x2\x2\x1BA\x1BB\x5l\x37\x2\x1BB\x1BC\a:\x2\x2"+
		"\x1BC\x1BD\x5n\x38\x2\x1BD\x1BE\a\x16\x2\x2\x1BE\x1C1\x5p\x39\x2\x1BF"+
		"\x1C0\a\x1E\x2\x2\x1C0\x1C2\x5r:\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3"+
		"\x2\x2\x2\x1C2k\x3\x2\x2\x2\x1C3\x1C4\x5\"\x12\x2\x1C4m\x3\x2\x2\x2\x1C5"+
		"\x1C6\x5.\x18\x2\x1C6o\x3\x2\x2\x2\x1C7\x1C8\x5.\x18\x2\x1C8q\x3\x2\x2"+
		"\x2\x1C9\x1CA\x5.\x18\x2\x1CAs\x3\x2\x2\x2\x1CB\x1CC\a\x1F\x2\x2\x1CC"+
		"\x1CD\x5l\x37\x2\x1CDu\x3\x2\x2\x2\x1CE\x1D0\a \x2\x2\x1CF\x1D1\x5x=\x2"+
		"\x1D0\x1CF\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1w\x3\x2\x2\x2\x1D2\x1D4"+
		"\x5z>\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2"+
		"\x2\x1D5\x1D7\x5|?\x2\x1D6\x1D3\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8"+
		"\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DB\x3\x2\x2\x2\x1DA\x1DC"+
		"\x5z>\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DF\x3\x2\x2"+
		"\x2\x1DD\x1DF\x5z>\x2\x1DE\x1D6\x3\x2\x2\x2\x1DE\x1DD\x3\x2\x2\x2\x1DF"+
		"y\x3\x2\x2\x2\x1E0\x1E1\x5,\x17\x2\x1E1{\x3\x2\x2\x2\x1E2\x1E3\t\x6\x2"+
		"\x2\x1E3}\x3\x2\x2\x2\x1E4\x1E5\a!\x2\x2\x1E5\x1E6\x5\x1E\x10\x2\x1E6"+
		"\x7F\x3\x2\x2\x2\x1E7\x1E8\a\"\x2\x2\x1E8\x1E9\x5&\x14\x2\x1E9\x1EA\a"+
		"/\x2\x2\x1EA\x1EB\x5\x82\x42\x2\x1EB\x1EC\a\x30\x2\x2\x1EC\x81\x3\x2\x2"+
		"\x2\x1ED\x1EE\x5.\x18\x2\x1EE\x83\x3\x2\x2\x2\x1EF\x1F0\a#\x2\x2\x1F0"+
		"\x1F1\x5&\x14\x2\x1F1\x1F2\x5\x88\x45\x2\x1F2\x85\x3\x2\x2\x2\x1F3\x1F4"+
		"\a$\x2\x2\x1F4\x1F5\x5&\x14\x2\x1F5\x1F6\x5\x88\x45\x2\x1F6\x87\x3\x2"+
		"\x2\x2\x1F7\x1F8\x5@!\x2\x1F8\x89\x3\x2\x2\x2\x1F9\x1FA\a%\x2\x2\x1FA"+
		"\x8B\x3\x2\x2\x2\x1FB\x1FE\a)\x2\x2\x1FC\x1FE\x5\x8EH\x2\x1FD\x1FB\x3"+
		"\x2\x2\x2\x1FD\x1FC\x3\x2\x2\x2\x1FE\x8D\x3\x2\x2\x2\x1FF\x214\a(\x2\x2"+
		"\x200\x214\a*\x2\x2\x201\x214\a+\x2\x2\x202\x214\a,\x2\x2\x203\x214\a"+
		"-\x2\x2\x204\x214\a.\x2\x2\x205\x214\a/\x2\x2\x206\x214\a\x30\x2\x2\x207"+
		"\x214\a\x31\x2\x2\x208\x214\a\x33\x2\x2\x209\x214\a\x36\x2\x2\x20A\x214"+
		"\a\x37\x2\x2\x20B\x214\a\x38\x2\x2\x20C\x214\a\x39\x2\x2\x20D\x214\a:"+
		"\x2\x2\x20E\x214\a;\x2\x2\x20F\x214\a<\x2\x2\x210\x214\a=\x2\x2\x211\x214"+
		"\a>\x2\x2\x212\x214\x5\x90I\x2\x213\x1FF\x3\x2\x2\x2\x213\x200\x3\x2\x2"+
		"\x2\x213\x201\x3\x2\x2\x2\x213\x202\x3\x2\x2\x2\x213\x203\x3\x2\x2\x2"+
		"\x213\x204\x3\x2\x2\x2\x213\x205\x3\x2\x2\x2\x213\x206\x3\x2\x2\x2\x213"+
		"\x207\x3\x2\x2\x2\x213\x208\x3\x2\x2\x2\x213\x209\x3\x2\x2\x2\x213\x20A"+
		"\x3\x2\x2\x2\x213\x20B\x3\x2\x2\x2\x213\x20C\x3\x2\x2\x2\x213\x20D\x3"+
		"\x2\x2\x2\x213\x20E\x3\x2\x2\x2\x213\x20F\x3\x2\x2\x2\x213\x210\x3\x2"+
		"\x2\x2\x213\x211\x3\x2\x2\x2\x213\x212\x3\x2\x2\x2\x214\x8F\x3\x2\x2\x2"+
		"\x215\x218\a\'\x2\x2\x216\x218\x5\x92J\x2\x217\x215\x3\x2\x2\x2\x217\x216"+
		"\x3\x2\x2\x2\x218\x91\x3\x2\x2\x2\x219\x21A\t\a\x2\x2\x21A\x93\x3\x2\x2"+
		"\x2\x21B\x21D\x5\x8CG\x2\x21C\x21B\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E"+
		"\x21C\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x95\x3\x2\x2\x2\x220\x224"+
		"\a)\x2\x2\x221\x223\x5\x8EH\x2\x222\x221\x3\x2\x2\x2\x223\x226\x3\x2\x2"+
		"\x2\x224\x222\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x227\x3\x2\x2\x2"+
		"\x226\x224\x3\x2\x2\x2\x227\x228\a)\x2\x2\x228\x97\x3\x2\x2\x2\x229\x234"+
		"\x5\x92J\x2\x22A\x22E\x5\x92J\x2\x22B\x22D\x5\x90I\x2\x22C\x22B\x3\x2"+
		"\x2\x2\x22D\x230\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2"+
		"\x2\x22F\x231\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x231\x232\x5\x92J\x2\x232"+
		"\x234\x3\x2\x2\x2\x233\x229\x3\x2\x2\x2\x233\x22A\x3\x2\x2\x2\x234\x99"+
		"\x3\x2\x2\x2\x33\x9E\xA2\xA7\xBE\xC1\xC9\xCD\xD0\xD3\xD9\xE1\xE6\xEE\xF2"+
		"\xF6\xFA\xFC\x10B\x10F\x112\x11A\x123\x12B\x137\x13B\x13F\x149\x150\x160"+
		"\x170\x183\x18A\x18E\x19D\x1AB\x1B4\x1C1\x1D0\x1D3\x1D8\x1DB\x1DE\x1FD"+
		"\x213\x217\x21E\x224\x22E\x233";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
